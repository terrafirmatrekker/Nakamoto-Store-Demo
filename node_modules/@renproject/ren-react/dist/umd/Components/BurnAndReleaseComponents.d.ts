import * as React from "react";
import { BurnSession, BurnTransaction } from "@renproject/ren-tx";
import { BurnConfigMultiple, BurnConfigSingle } from "../useBurnAndRelease";
export interface ConfirmingBurnProps {
    tx: BurnTransaction;
    confirmations: number;
    targetConfirmations?: number;
}
interface CreatingBurnProps {
    session: BurnSession<any, any>;
}
interface CreatedBurnProps {
    session: BurnSession<any, any>;
    burn: () => void;
    amount: number;
    asset: string;
}
interface SubmittingBurnProps {
    session: BurnSession<any, any>;
}
interface AcceptedBurnProps {
    tx: BurnTransaction;
    amount: number;
}
interface CompletedBurnProps {
    tx: BurnTransaction;
    amount: number;
    txHash: string;
}
interface ReleasingBurnProps {
    tx: BurnTransaction;
}
interface ErrorReleasingProps {
    tx: BurnTransaction;
    reason: Error;
}
interface ErrorBurningProps {
    session: BurnSession<any, any>;
    reason: Error;
}
export interface BurnProps {
    parameters: BurnConfigSingle | BurnConfigMultiple;
    ConfirmingBurn?: React.FC<ConfirmingBurnProps>;
    CreatingBurn?: React.FC<CreatingBurnProps>;
    CreatedBurn?: React.FC<CreatedBurnProps>;
    AcceptedBurn?: React.FC<AcceptedBurnProps>;
    SubmittingBurn?: React.FC<SubmittingBurnProps>;
    CompletedBurn?: React.FC<CompletedBurnProps>;
    ReleasingBurn?: React.FC<ReleasingBurnProps>;
    ErrorBurning?: React.FC<ErrorBurningProps>;
    ErrorReleasing?: React.FC<ErrorReleasingProps>;
    BurnInfo?: React.FC<BurnInfoProps>;
}
interface BurnInfoProps {
    session: BurnSession<any, any>;
    amount: number;
}
export declare const BasicBurn: React.FC<BurnProps>;
export {};
