import BigNumber from "bignumber.js";
import { AbiCoder } from "web3-eth-abi";
import { assertType } from "./assert";
/**
 * Represents 1 second for functions that accept a parameter in milliseconds.
 */
export const SECONDS = 1000;
/**
 * Pauses the thread for the specified number of milliseconds.
 *
 * @param ms The number of milliseconds to pause for.
 */
export const sleep = async (ms) => new Promise((resolve) => setTimeout(resolve, ms));
/**
 * Remove 0x prefix from a hex string. If the input doesn't have a 0x prefix,
 * it's returned unchanged.
 *
 * @param hex The hex value to be prefixed.
 */
export const strip0x = (hex) => {
    // Type validation
    assertType("string", { hex });
    return hex.substring(0, 2) === "0x" ? hex.slice(2) : hex;
};
/**
 * Add a 0x prefix to a hex value, converting to a string first. If the input
 * is already prefixed, it's returned unchanged.
 *
 * @param hex The hex value to be prefixed.
 */
export const Ox = (hex, { prefix } = { prefix: "0x" }) => {
    const hexString = typeof hex === "string" ? hex : hex.toString("hex");
    return hexString.substring(0, 2) === prefix
        ? hexString
        : `${prefix}${hexString}`;
};
export const fromHex = (hex) => {
    assertType("Buffer | string", { hex });
    return Buffer.isBuffer(hex) ? hex : Buffer.from(strip0x(hex), "hex");
};
export const fromBase64 = (base64) => {
    assertType("Buffer | string", {
        base64,
    });
    return Buffer.isBuffer(base64) ? base64 : Buffer.from(base64, "base64");
};
export const toBase64 = (input) => {
    assertType("Buffer", { input });
    return input.toString("base64");
};
export const fromBigNumber = (bn) => {
    const bnStr = bn.toString(16);
    // Pad if necessary
    return Buffer.from(bnStr.length % 2 ? "0" + bnStr : bnStr, "hex");
};
// Unpadded alternate base64 encoding defined in RFC 4648, commonly used in
// URLs.
export const toURLBase64 = (input) => {
    assertType("Buffer | string", {
        input,
    });
    return (Buffer.isBuffer(input) ? input : fromHex(input))
        .toString("base64")
        .replace(/\+/g, "-")
        .replace(/\//g, "_")
        .replace(/\=+$/, "");
};
export const toReadable = (value, decimals) => new BigNumber(value).dividedBy(new BigNumber(10).exponentiatedBy(decimals));
export const fromReadable = (value, decimals) => new BigNumber(value)
    .times(new BigNumber(10).exponentiatedBy(decimals))
    .decimalPlaces(0);
const hasOwnProperty = (
// eslint-disable-next-line @typescript-eslint/no-explicit-any
object, property) => {
    return object.hasOwnProperty(property);
};
const invalidError = (errorMessage) => errorMessage === "" ||
    errorMessage === "null" ||
    errorMessage === "undefined";
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const extractError = (error) => {
    if (error && typeof error === "object") {
        if (hasOwnProperty(error, "response") && error.response) {
            const extractedError = extractError(error.response);
            if (!invalidError(extractedError)) {
                return extractedError;
            }
        }
        if (hasOwnProperty(error, "data") && error.data) {
            const extractedError = extractError(error.data);
            if (!invalidError(extractedError)) {
                return extractedError;
            }
        }
        if (hasOwnProperty(error, "error") && error.error) {
            const extractedError = extractError(error.error);
            if (!invalidError(extractedError)) {
                return extractedError;
            }
        }
        if (hasOwnProperty(error, "context") && error.context) {
            const extractedError = extractError(error.context);
            if (!invalidError(extractedError)) {
                return extractedError;
            }
        }
        if (hasOwnProperty(error, "message") && error.message) {
            const extractedError = extractError(error.message);
            if (!invalidError(extractedError)) {
                return extractedError;
            }
        }
        if (hasOwnProperty(error, "statusText") && error.statusText) {
            const extractedError = extractError(error.statusText);
            if (!invalidError(extractedError)) {
                return extractedError;
            }
        }
    }
    try {
        if (typeof error === "string") {
            if (error.slice(0, 7) === "Error: ") {
                error = error.slice(7);
            }
            return error;
        }
        return JSON.stringify(error);
    }
    catch (innerError) {
        // Ignore JSON error
    }
    return String(error);
};
export const retryNTimes = async (fnCall, retries, timeout = 1 * SECONDS, // in ms
logger) => {
    let returnError;
    const errorMessages = new Set();
    for (let i = 0; retries === -1 || i < retries; i++) {
        try {
            return await fnCall();
        }
        catch (error) {
            // Fix error message.
            const errorMessage = extractError(error);
            errorMessages.add(errorMessage);
            returnError = error;
            if (i < retries || retries === -1) {
                await sleep(timeout);
                if (logger) {
                    logger.warn(error);
                }
            }
        }
    }
    returnError.message = Array.from(errorMessages).join(", ");
    throw returnError;
};
/**
 * Generates a random hex string (prefixed with '0x').
 *
 * @param bytes The number of bytes to generate.
 */
export const randomBytes = (bytes) => {
    try {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        if (window) {
            const uints = new Uint32Array(bytes / 4); // 4 bytes (32 bits)
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            window.crypto.getRandomValues(uints);
            let str = "";
            for (const uint of uints) {
                str +=
                    "0".repeat(8 - uint.toString(16).length) +
                        String(uint.toString(16));
            }
            return fromHex(str);
        }
    }
    catch (error) {
        // Ignore error
    }
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const crypto = require("crypto");
    return crypto.randomBytes(bytes);
};
/**
 * Returns a random 32 byte Buffer.
 */
export const randomNonce = () => randomBytes(32);
export const emptyNonce = () => fromHex("00".repeat(32));
export const rawEncode = (types, parameters) => fromHex(new AbiCoder().encodeParameters(types, parameters));
/**
 * isDefined returns true if the parameter is defined and not null.
 */
export const isDefined = (x) => x !== null && x !== undefined;
//# sourceMappingURL=common.js.map