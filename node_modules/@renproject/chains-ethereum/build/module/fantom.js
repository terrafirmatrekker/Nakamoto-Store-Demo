import { getRenNetworkDetails, RenNetwork, } from "@renproject/interfaces";
import { Callable, utilsWithChainNetwork } from "@renproject/utils";
import { EthereumClass } from "./ethereum";
import { addressIsValid } from "./utils";
export const renFantomTestnet = {
    name: "Fantom Testnet",
    chain: "fantomTestnet",
    isTestnet: true,
    chainLabel: "Fantom Testnet",
    networkID: 0xfa2,
    infura: "https://rpc.testnet.fantom.network/",
    etherscan: "https://testnet.ftmscan.com",
    addresses: {
        GatewayRegistry: "0x1207765B53697a046DCF4AE95bd4dE99ef9D3D3C",
        BasicAdapter: "0x07deB3917d234f787AEd86E0c88E829277D4a33b",
    },
};
export const renFantomDevnet = {
    ...renFantomTestnet,
    addresses: {
        GatewayRegistry: "0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC",
        BasicAdapter: "0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066",
    },
};
export const renFantomMainnet = {
    name: "Fantom Mainnet",
    chain: "fantomMainnet",
    isTestnet: false,
    chainLabel: "Fantom Mainnet",
    networkID: 250,
    infura: "https://rpcapi.fantom.network/",
    etherscan: "https://ftmscan.com",
    addresses: {
        GatewayRegistry: "0x21C482f153D0317fe85C60bE1F7fa079019fcEbD",
        BasicAdapter: "0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5",
    },
};
export const FantomConfigMap = {
    [RenNetwork.TestnetVDot3]: renFantomTestnet,
    [RenNetwork.MainnetVDot3]: renFantomMainnet,
    [RenNetwork.DevnetVDot3]: renFantomDevnet,
};
const resolveFantomNetwork = (renNetwork) => {
    if (!renNetwork) {
        return FantomConfigMap[RenNetwork.MainnetVDot3];
    }
    if (renNetwork.addresses) {
        return renNetwork;
    }
    else {
        const details = getRenNetworkDetails(renNetwork);
        return details.isTestnet
            ? details.name === RenNetwork.DevnetVDot3
                ? renFantomDevnet
                : renFantomTestnet
            : renFantomMainnet;
    }
};
export class FantomClass extends EthereumClass {
    constructor(web3Provider, renNetwork) {
        // To be compatible with the Ethereum chain class, the first parameter
        // is a web3Provider and the second the RenVM network. However,
        super(web3Provider, resolveFantomNetwork(renNetwork));
        this.chain = FantomClass.chain;
        this.name = FantomClass.chain;
        this.legacyName = undefined;
        this.utils = utilsWithChainNetwork(FantomClass.utils, () => this.renNetworkDetails);
        this.initialize = (renNetwork) => {
            this.renNetworkDetails =
                this.renNetworkDetails ||
                    FantomConfigMap[getRenNetworkDetails(renNetwork).name];
            if (!this.renNetworkDetails) {
                throw new Error(`Unable to set ${this.name} network for RenVM network ${getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);
            }
            return this;
        };
    }
}
FantomClass.chain = "Fantom";
FantomClass.utils = {
    resolveChainNetwork: resolveFantomNetwork,
    addressIsValid,
    addressExplorerLink: (address, network) => `${(FantomClass.utils.resolveChainNetwork(network) ||
        renFantomMainnet).etherscan}/address/${address}`,
    transactionExplorerLink: (transaction, network) => `${(Fantom.utils.resolveChainNetwork(network) || renFantomMainnet)
        .etherscan}/tx/${transaction}`,
};
// @dev Removes any static fields, except `utils`.
export const Fantom = Callable(FantomClass);
//# sourceMappingURL=fantom.js.map