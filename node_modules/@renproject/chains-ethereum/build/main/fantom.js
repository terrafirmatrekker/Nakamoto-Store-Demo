"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fantom = exports.FantomClass = exports.FantomConfigMap = exports.renFantomMainnet = exports.renFantomDevnet = exports.renFantomTestnet = void 0;
const interfaces_1 = require("@renproject/interfaces");
const utils_1 = require("@renproject/utils");
const ethereum_1 = require("./ethereum");
const utils_2 = require("./utils");
exports.renFantomTestnet = {
    name: "Fantom Testnet",
    chain: "fantomTestnet",
    isTestnet: true,
    chainLabel: "Fantom Testnet",
    networkID: 0xfa2,
    infura: "https://rpc.testnet.fantom.network/",
    etherscan: "https://testnet.ftmscan.com",
    addresses: {
        GatewayRegistry: "0x1207765B53697a046DCF4AE95bd4dE99ef9D3D3C",
        BasicAdapter: "0x07deB3917d234f787AEd86E0c88E829277D4a33b",
    },
};
exports.renFantomDevnet = Object.assign(Object.assign({}, exports.renFantomTestnet), { addresses: {
        GatewayRegistry: "0xD881213F5ABF783d93220e6bD3Cc21706A8dc1fC",
        BasicAdapter: "0xD087b0540e172553c12DEEeCDEf3dFD21Ec02066",
    } });
exports.renFantomMainnet = {
    name: "Fantom Mainnet",
    chain: "fantomMainnet",
    isTestnet: false,
    chainLabel: "Fantom Mainnet",
    networkID: 250,
    infura: "https://rpcapi.fantom.network/",
    etherscan: "https://ftmscan.com",
    addresses: {
        GatewayRegistry: "0x21C482f153D0317fe85C60bE1F7fa079019fcEbD",
        BasicAdapter: "0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5",
    },
};
exports.FantomConfigMap = {
    [interfaces_1.RenNetwork.TestnetVDot3]: exports.renFantomTestnet,
    [interfaces_1.RenNetwork.MainnetVDot3]: exports.renFantomMainnet,
    [interfaces_1.RenNetwork.DevnetVDot3]: exports.renFantomDevnet,
};
const resolveFantomNetwork = (renNetwork) => {
    if (!renNetwork) {
        return exports.FantomConfigMap[interfaces_1.RenNetwork.MainnetVDot3];
    }
    if (renNetwork.addresses) {
        return renNetwork;
    }
    else {
        const details = interfaces_1.getRenNetworkDetails(renNetwork);
        return details.isTestnet
            ? details.name === interfaces_1.RenNetwork.DevnetVDot3
                ? exports.renFantomDevnet
                : exports.renFantomTestnet
            : exports.renFantomMainnet;
    }
};
class FantomClass extends ethereum_1.EthereumClass {
    constructor(web3Provider, renNetwork) {
        // To be compatible with the Ethereum chain class, the first parameter
        // is a web3Provider and the second the RenVM network. However,
        super(web3Provider, resolveFantomNetwork(renNetwork));
        this.chain = FantomClass.chain;
        this.name = FantomClass.chain;
        this.legacyName = undefined;
        this.utils = utils_1.utilsWithChainNetwork(FantomClass.utils, () => this.renNetworkDetails);
        this.initialize = (renNetwork) => {
            this.renNetworkDetails =
                this.renNetworkDetails ||
                    exports.FantomConfigMap[interfaces_1.getRenNetworkDetails(renNetwork).name];
            if (!this.renNetworkDetails) {
                throw new Error(`Unable to set ${this.name} network for RenVM network ${interfaces_1.getRenNetworkDetails(renNetwork).name}. Please provide ${this.name} network details to ${this.name} constructor.`);
            }
            return this;
        };
    }
}
exports.FantomClass = FantomClass;
FantomClass.chain = "Fantom";
FantomClass.utils = {
    resolveChainNetwork: resolveFantomNetwork,
    addressIsValid: utils_2.addressIsValid,
    addressExplorerLink: (address, network) => `${(FantomClass.utils.resolveChainNetwork(network) ||
        exports.renFantomMainnet).etherscan}/address/${address}`,
    transactionExplorerLink: (transaction, network) => `${(exports.Fantom.utils.resolveChainNetwork(network) || exports.renFantomMainnet)
        .etherscan}/tx/${transaction}`,
};
// @dev Removes any static fields, except `utils`.
exports.Fantom = utils_1.Callable(FantomClass);
//# sourceMappingURL=fantom.js.map