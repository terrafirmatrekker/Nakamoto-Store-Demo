import { TxStatus } from "@renproject/interfaces";
import { TypedPackValue } from "./pack/pack";
import { BurnTransactionInput, MintTransactionInput } from "./transaction";
import { RenVMType, RenVMValue } from "./value";
export declare enum RPCMethod {
    SubmitTx = "ren_submitTx",
    QueryTx = "ren_queryTx",
    QueryTxs = "ren_queryTxs",
    QueryBlock = "ren_queryBlock",
    QueryBlocks = "ren_queryBlocks",
    QueryConfig = "ren_queryConfig",
    QueryState = "ren_queryState"
}
export interface ParamsQueryTxs {
    txStatus?: TxStatus;
    page: RenVMValue<RenVMType.U64>;
    pageSize?: RenVMValue<RenVMType.U64>;
    tags: Array<RenVMValue<RenVMType.B32>>;
}
export interface ParamsQueryBlock {
    blockHeight: number;
}
export interface ParamsQueryBlocks {
    blockHeight: number;
    n: number;
}
export interface ParamsSubmitTx<T extends MintTransactionInput | BurnTransactionInput> {
    tx: T;
}
export declare type ParamsSubmitMint = ParamsSubmitTx<MintTransactionInput>;
export declare type ParamsSubmitBurn = ParamsSubmitTx<BurnTransactionInput>;
export interface ParamsQueryTx {
    txHash: string;
}
export interface ParamsQueryConfig {
}
export interface ParamsQueryState {
}
export interface ResponseQueryBlock {
    block: any;
}
export interface ResponseQueryBlocks {
    blocks: any;
}
export interface ResponseSubmitTx {
    tx: {
        hash: string;
        to: string;
        in: TypedPackValue;
    };
}
export interface ResponseQueryTx {
    tx: {
        version: "1";
        hash: string;
        selector: string;
        in: TypedPackValue;
        out?: TypedPackValue;
    };
    txStatus: TxStatus;
}
export interface ResponseQueryTxs {
    txs: Array<{
        hash: string;
        to: string;
        in: TypedPackValue;
        out?: TypedPackValue;
    }>;
}
export interface ResponseQueryConfig {
    confirmations: {
        [chain: string]: RenVMValue<RenVMType.U64>;
    };
    whitelist: string[];
}
export interface ResponseQueryState {
    state: {
        [chain: string]: {
            address: string;
            gasCap: string;
            gasLimit: string;
            gasPrice: string;
            latestChainHash: string;
            latestChainHeight: string;
            minimumAmount: string;
            pubKey: string;
        } & {
            output?: {
                outpoint: {
                    hash: string;
                    index: string;
                };
                pubKeyScript: string;
                value: string;
            };
        } & {
            nonce?: string;
        };
    };
}
export declare type RenVMParams = {
    [RPCMethod.QueryBlock]: ParamsQueryBlock;
    [RPCMethod.QueryBlocks]: ParamsQueryBlocks;
    [RPCMethod.SubmitTx]: ParamsSubmitBurn | ParamsSubmitMint;
    [RPCMethod.QueryTx]: ParamsQueryTx;
    [RPCMethod.QueryTxs]: ParamsQueryTxs;
    [RPCMethod.QueryConfig]: ParamsQueryConfig;
    [RPCMethod.QueryState]: ParamsQueryState;
};
export declare type RenVMResponses = {
    [RPCMethod.QueryBlock]: ResponseQueryBlock;
    [RPCMethod.QueryBlocks]: ResponseQueryBlocks;
    [RPCMethod.SubmitTx]: ResponseSubmitTx;
    [RPCMethod.QueryTx]: ResponseQueryTx;
    [RPCMethod.QueryTxs]: ResponseQueryTxs;
    [RPCMethod.QueryConfig]: ResponseQueryConfig;
    [RPCMethod.QueryState]: ResponseQueryState;
};
