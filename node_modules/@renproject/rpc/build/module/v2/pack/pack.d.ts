export declare enum PackPrimitive {
    Bool = "bool",
    U8 = "u8",
    U16 = "u16",
    U32 = "u32",
    U64 = "u64",
    U128 = "u128",
    U256 = "u256",
    Str = "string",
    Bytes = "bytes",
    Bytes32 = "bytes32",
    Bytes65 = "bytes65"
}
export interface PackStructType {
    struct: Array<{
        [name: string]: PackTypeDefinition;
    }>;
}
export declare type PackListType = never;
export declare type PackNilType = "nil";
export declare type PackType = PackPrimitive | PackNilType | "list" | "struct";
export declare type PackTypeDefinition = PackPrimitive | PackStructType | PackListType | PackNilType;
export interface TypedPackValue {
    t: PackTypeDefinition;
    v: any;
}
export declare const unmarshalPackPrimitive: (type: PackPrimitive, value: any) => any;
export declare const unmarshalPackStruct: (type: PackStructType, value: object) => {};
export declare const unmarshalPackValue: (type: PackTypeDefinition, value: unknown) => any;
export declare const unmarshalTypedPackValue: ({ t, v }: TypedPackValue) => any;
