import { Callable, isDefined } from "@renproject/utils";
import axios from "axios";
import https from "https";
import { fixUTXO, fixValue, sortUTXOs, DEFAULT_TIMEOUT, } from "./API";
export class InsightClass {
    constructor(url) {
        this.fetchUTXOs = async (address, confirmations = 0) => {
            const url = `${this.url}/addr/${address}/utxo`;
            const response = await axios.get(url, {
                // TODO: Remove when certificate is fixed.
                httpsAgent: new https.Agent({
                    rejectUnauthorized: false,
                }),
                timeout: DEFAULT_TIMEOUT,
            });
            const data = typeof response.data === "string"
                ? JSON.parse(response.data)
                : response.data;
            return (await Promise.all(data
                .filter((utxo) => confirmations === 0 ||
                utxo.confirmations >= confirmations)
                .map((utxo) => ({
                txHash: utxo.txid,
                amount: isDefined(utxo.satoshis)
                    ? utxo.satoshis.toString()
                    : isDefined(utxo.amount)
                        ? fixValue(utxo.amount, 8).toFixed()
                        : undefined,
                // script_hex: utxo.scriptPubKey,
                vOut: utxo.vout,
                confirmations: utxo.confirmations || 0,
            }))
                // If the amount is undefined, fetch the UTXO again.
                // This is due to the Digibyte explorer not returning
                // amounts correctly when fetching UTXOs.
                .map((utxo) => isDefined(utxo.amount)
                ? utxo
                : this.fetchUTXO(utxo.txHash, utxo.vOut)))).sort(sortUTXOs);
        };
        this.fetchTXs = async (address, confirmations = 0) => {
            const url = `${this.url}/txs/?address=${address}`;
            const response = await axios.get(url, {
                // TODO: Remove when certificate is fixed.
                httpsAgent: new https.Agent({
                    rejectUnauthorized: false,
                }),
                timeout: DEFAULT_TIMEOUT,
            });
            const data = typeof response.data === "string"
                ? JSON.parse(response.data)
                : response.data;
            const received = [];
            for (const tx of data.txs) {
                for (let i = 0; i < tx.vout.length; i++) {
                    const vout = tx.vout[i];
                    if (vout.scriptPubKey.addresses.indexOf(address) >= 0) {
                        received.push({
                            txHash: tx.txid,
                            amount: fixValue(parseFloat(vout.value), 8).toFixed(),
                            vOut: i,
                            confirmations: tx.confirmations || 0,
                        });
                    }
                }
            }
            return received
                .filter((utxo) => confirmations === 0 || utxo.confirmations >= confirmations)
                .sort(sortUTXOs);
        };
        this.fetchUTXO = async (txHash, vOut) => {
            const url = `${this.url}/tx/${txHash}`;
            const tx = (await axios.get(url, { timeout: DEFAULT_TIMEOUT })).data;
            return fixUTXO({
                txHash,
                amount: tx.vout[vOut].value.toString(),
                vOut,
                confirmations: tx.confirmations,
            }, 8);
        };
        this.broadcastTransaction = async (txHex) => {
            const url = `${this.url}/tx/send`;
            const response = await axios.post(url, { rawtx: txHex }, { timeout: DEFAULT_TIMEOUT });
            if (response.data.error) {
                throw new Error(response.data.error);
            }
            return response.data.txid;
        };
        this.url = url.replace(/\/$/, "");
    }
}
export const Insight = Callable(InsightClass);
//# sourceMappingURL=insight.js.map