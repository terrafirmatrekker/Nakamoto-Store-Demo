"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pubKeyScript = exports.createAddress = void 0;
const utils_1 = require("@renproject/utils");
const v1 = __importStar(require("./v1"));
const v2 = __importStar(require("./v2"));
/**
 * @dev Runs [[v1.createAddress]] and [[v2.createAddress]] side-by-side to make
 * sure that the v2 implementation is correct for all cases.
 * Eventually, v1 will be removed.
 */
const createAddress = (addressToString, networks, opcode, script) => (isTestnet, gGubKeyHash, gHash, prefix) => {
    const v2Address = addressToString(v2.createAddress(gGubKeyHash, gHash, prefix));
    if (networks && opcode && script) {
        const v1Address = v1.createAddress(networks, opcode, script)(isTestnet, gGubKeyHash, gHash);
        if (v1Address !== v2Address) {
            throw new Error(`Error: Different results returned from gateway address generation with parameters: \
    isTestnet: ${isTestnet}, \
    gPubKey: ${utils_1.Ox(gGubKeyHash)}, \
    gHash: ${utils_1.Ox(gHash)}, \
    prefix: ${utils_1.Ox(prefix)}: ${v1Address} vs ${v2Address}`);
        }
    }
    return v2Address;
};
exports.createAddress = createAddress;
/**
 * @dev See [[createAddress]] comment.
 *
 */
const pubKeyScript = (networks, opcode, script) => (isTestnet, gPubKey, gHash) => {
    const v2PubKeyScript = v2.pubKeyScript(gPubKey, gHash);
    if (networks && opcode && script) {
        const v1PubKeyScript = v1.pubKeyScript(networks, opcode, script)(isTestnet, gPubKey, gHash);
        if (!v1PubKeyScript.equals(v2PubKeyScript)) {
            throw new Error(`Error: Different results returned from gateway public key generation with parameters: \
isTestnet: ${isTestnet}, \
gPubKey: ${utils_1.Ox(gPubKey)}, \
gHash: ${utils_1.Ox(gHash)}`);
        }
    }
    return v2PubKeyScript;
};
exports.pubKeyScript = pubKeyScript;
//# sourceMappingURL=index.js.map