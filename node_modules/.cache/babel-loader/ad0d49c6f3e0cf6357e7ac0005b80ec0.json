{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport { interpret, State } from 'xstate';\nimport useConstant from './useConstant';\nimport { useReactEffectActions } from './useReactEffectActions'; // copied from core/src/utils.ts\n// it avoids a breaking change between this package and XState which is its peer dep\n\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n  if (typeof nextHandler === 'object') {\n    return nextHandler;\n  }\n\n  var noop = function noop() {\n    return void 0;\n  };\n\n  return {\n    next: nextHandler,\n    error: errorHandler || noop,\n    complete: completionHandler || noop\n  };\n}\n\nexport function useInterpret(getMachine, options, observerOrListener) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var machine = useConstant(function () {\n    return typeof getMachine === 'function' ? getMachine() : getMachine;\n  });\n\n  if (process.env.NODE_ENV !== 'production' && typeof getMachine !== 'function') {\n    var _a = __read(useState(machine), 1),\n        initialMachine = _a[0];\n\n    if (machine !== initialMachine) {\n      console.warn('Machine given to `useMachine` has changed between renders. This is not supported and might lead to unexpected results.\\n' + 'Please make sure that you pass the same Machine as argument each time.');\n    }\n  }\n\n  var context = options.context,\n      guards = options.guards,\n      actions = options.actions,\n      activities = options.activities,\n      services = options.services,\n      delays = options.delays,\n      rehydratedState = options.state,\n      interpreterOptions = __rest(options, [\"context\", \"guards\", \"actions\", \"activities\", \"services\", \"delays\", \"state\"]);\n\n  var service = useConstant(function () {\n    var machineConfig = {\n      context: context,\n      guards: guards,\n      actions: actions,\n      activities: activities,\n      services: services,\n      delays: delays\n    };\n    var machineWithConfig = machine.withConfig(machineConfig, __assign(__assign({}, machine.context), context));\n    return interpret(machineWithConfig, __assign({\n      deferEvents: true\n    }, interpreterOptions));\n  });\n  useIsomorphicLayoutEffect(function () {\n    var sub;\n\n    if (observerOrListener) {\n      sub = service.subscribe(toObserver(observerOrListener));\n    }\n\n    return function () {\n      sub === null || sub === void 0 ? void 0 : sub.unsubscribe();\n    };\n  }, [observerOrListener]);\n  useIsomorphicLayoutEffect(function () {\n    service.start(rehydratedState ? State.create(rehydratedState) : undefined);\n    return function () {\n      service.stop();\n    };\n  }, []); // Make sure actions and services are kept updated when they change.\n  // This mutation assignment is safe because the service instance is only used\n  // in one place -- this hook's caller.\n\n  useIsomorphicLayoutEffect(function () {\n    Object.assign(service.machine.options.actions, actions);\n  }, [actions]);\n  useIsomorphicLayoutEffect(function () {\n    Object.assign(service.machine.options.services, services);\n  }, [services]);\n  useReactEffectActions(service);\n  return service;\n}","map":null,"metadata":{},"sourceType":"module"}