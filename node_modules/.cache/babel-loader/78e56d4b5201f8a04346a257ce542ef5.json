{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { StreamCipher } from './cipher-core.js'; // Reusable objects\n\nvar S = [];\nvar C_ = [];\nvar G = [];\n\nfunction nextState() {\n  // Shortcuts\n  var X = this._X;\n  var C = this._C; // Save old counter values\n\n  for (var i = 0; i < 8; i += 1) {\n    C_[i] = C[i];\n  } // Calculate new counter values\n\n\n  C[0] = C[0] + 0x4d34d34d + this._b | 0;\n  C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;\n  C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;\n  C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;\n  C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;\n  C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;\n  C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;\n  C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;\n  this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0; // Calculate the g-values\n\n  for (var _i = 0; _i < 8; _i += 1) {\n    var gx = X[_i] + C[_i]; // Construct high and low argument for squaring\n\n    var ga = gx & 0xffff;\n    var gb = gx >>> 16; // Calculate high and low result of squaring\n\n    var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;\n    var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0); // High XOR low\n\n    G[_i] = gh ^ gl;\n  } // Calculate new state values\n\n\n  X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;\n  X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;\n  X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;\n  X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;\n  X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;\n  X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;\n  X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;\n  X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;\n}\n/**\n * Rabbit stream cipher algorithm.\n *\n * This is a legacy version that neglected to convert the key to little-endian.\n * This error doesn't affect the cipher's security,\n * but it does affect its compatibility with other implementations.\n */\n\n\nexport var RabbitLegacyAlgo =\n/*#__PURE__*/\nfunction (_StreamCipher) {\n  _inherits(RabbitLegacyAlgo, _StreamCipher);\n\n  function RabbitLegacyAlgo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RabbitLegacyAlgo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RabbitLegacyAlgo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.blockSize = 128 / 32;\n    _this.ivSize = 64 / 32;\n    return _this;\n  }\n\n  _createClass(RabbitLegacyAlgo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      // Shortcuts\n      var K = this._key.words;\n      var iv = this.cfg.iv; // Generate initial state values\n\n      this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];\n      var X = this._X; // Generate initial counter values\n\n      this._C = [K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff, K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff, K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff, K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];\n      var C = this._C; // Carry bit\n\n      this._b = 0; // Iterate the system four times\n\n      for (var i = 0; i < 4; i += 1) {\n        nextState.call(this);\n      } // Modify the counters\n\n\n      for (var _i2 = 0; _i2 < 8; _i2 += 1) {\n        C[_i2] ^= X[_i2 + 4 & 7];\n      } // IV setup\n\n\n      if (iv) {\n        // Shortcuts\n        var IV = iv.words;\n        var IV_0 = IV[0];\n        var IV_1 = IV[1]; // Generate four subvectors\n\n        var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;\n        var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;\n        var i1 = i0 >>> 16 | i2 & 0xffff0000;\n        var i3 = i2 << 16 | i0 & 0x0000ffff; // Modify counter values\n\n        C[0] ^= i0;\n        C[1] ^= i1;\n        C[2] ^= i2;\n        C[3] ^= i3;\n        C[4] ^= i0;\n        C[5] ^= i1;\n        C[6] ^= i2;\n        C[7] ^= i3; // Iterate the system four times\n\n        for (var _i3 = 0; _i3 < 4; _i3 += 1) {\n          nextState.call(this);\n        }\n      }\n    }\n  }, {\n    key: \"_doProcessBlock\",\n    value: function _doProcessBlock(M, offset) {\n      var _M = M; // Shortcut\n\n      var X = this._X; // Iterate the system\n\n      nextState.call(this); // Generate four keystream words\n\n      S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;\n      S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;\n      S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;\n      S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;\n\n      for (var i = 0; i < 4; i += 1) {\n        // Swap endian\n        S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff | (S[i] << 24 | S[i] >>> 8) & 0xff00ff00; // Encrypt\n\n        _M[offset + i] ^= S[i];\n      }\n    }\n  }]);\n\n  return RabbitLegacyAlgo;\n}(StreamCipher);\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n */\n\nexport var RabbitLegacy = StreamCipher._createHelper(RabbitLegacyAlgo);","map":null,"metadata":{},"sourceType":"module"}