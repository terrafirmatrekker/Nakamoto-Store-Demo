{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tejas/Desktop/marketplace2/src/components/Bridge.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\"; // Need to correct RenJS tutorial BTC/ETH imports with newest NPM file hyphen\n\nimport RenJS from \"@renproject/ren\";\nimport { Bitcoin } from \"@renproject/chains-bitcoin\";\nimport { Ethereum } from \"@renproject/chains-ethereum\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport ABI from \"../abis/ABI.json\"; // Replace with your contract's address.\n\nvar contractAddress = \"0x4EaFf0d9Ce1c01910a1C4AeC87399A4caEc0a0Dd\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3Provider, web3, networkID;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 13;\n                break;\n              }\n\n              web3Provider = window.ethereum;\n              _context.prev = 2;\n              _context.next = 5;\n              return window.ethereum.enable();\n\n            case 5:\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n\n              // User denied account access...\n              _this.logError(\"Please allow access to your Web3 wallet.\");\n\n              return _context.abrupt(\"return\");\n\n            case 11:\n              _context.next = 19;\n              break;\n\n            case 13:\n              if (!window.web3) {\n                _context.next = 17;\n                break;\n              }\n\n              web3Provider = window.web3.currentProvider;\n              _context.next = 19;\n              break;\n\n            case 17:\n              _this.logError(\"Please install MetaMask!\");\n\n              return _context.abrupt(\"return\");\n\n            case 19:\n              web3 = new Web3(web3Provider);\n              _context.next = 22;\n              return web3.eth.net.getId();\n\n            case 22:\n              networkID = _context.sent;\n\n              if (!(networkID !== 42)) {\n                _context.next = 26;\n                break;\n              }\n\n              _this.logError(\"Please set your network to Kovan.\");\n\n              return _context.abrupt(\"return\");\n\n            case 26:\n              _this.setState({\n                web3: web3\n              }, function () {\n                // Update balances immediately and every 10 seconds\n                _this.updateBalance();\n\n                setInterval(function () {\n                  _this.updateBalance();\n                }, 10 * 1000);\n              });\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 7]]);\n    }));\n\n    _this.render = function () {\n      var _this$state = _this.state,\n          balance = _this$state.balance,\n          message = _this$state.message,\n          error = _this$state.error;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Balance: \", balance, \" BTC\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.deposit().catch(_this.logError);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Deposit 0.003 BTC\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.withdraw().catch(_this.logError);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Withdraw \", balance, \" BTC\")), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, message), error ? React.createElement(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, error) : null);\n    };\n\n    _this.updateBalance =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var web3, contract, balance;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              web3 = _this.state.web3;\n              contract = new web3.eth.Contract(ABI, contractAddress);\n              _context2.next = 4;\n              return contract.methods.balance().call();\n\n            case 4:\n              balance = _context2.sent;\n\n              _this.setState({\n                balance: parseInt(balance.toString()) / Math.pow(10, 8)\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.logError = function (error) {\n      console.error(error);\n\n      _this.setState({\n        error: String((error || {}).message || error)\n      });\n    };\n\n    _this.log = function (message) {\n      _this.setState({\n        message: message\n      });\n    };\n\n    _this.deposit =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var _this$state2, web3, renJS, amount, mint;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.logError(\"\"); // Reset error\n\n\n              _this$state2 = _this.state, web3 = _this$state2.web3, renJS = _this$state2.renJS;\n              amount = 0.003; // BTC\n\n              _context4.next = 5;\n              return renJS.lockAndMint({\n                // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n                asset: \"BTC\",\n                from: Bitcoin(),\n                to: Ethereum(web3.currentProvider).Contract({\n                  // The contract we want to interact with\n                  sendTo: contractAddress,\n                  // The name of the function we want to call\n                  contractFn: \"deposit\",\n                  // Arguments expected for calling `deposit`\n                  contractParams: [{\n                    name: \"_msg\",\n                    type: \"bytes\",\n                    value: Buffer.from(\"Depositing \".concat(amount, \" BTC\"))\n                  }]\n                })\n              });\n\n            case 5:\n              mint = _context4.sent;\n\n              // Show the gateway address to the user so that they can transfer their BTC to it.\n              _this.log(\"Deposit \".concat(amount, \" BTC to \").concat(mint.gatewayAddress));\n\n              mint.on(\"deposit\",\n              /*#__PURE__*/\n              function () {\n                var _ref4 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3(deposit) {\n                  var hash, depositLog;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          // Details of the deposit are available from `deposit.depositDetails`.\n                          hash = deposit.txHash();\n\n                          depositLog = function depositLog(msg) {\n                            return _this.log(\"[\".concat(hash.slice(0, 8), \"][\").concat(deposit.status, \"] \").concat(msg));\n                          };\n\n                          _context3.next = 4;\n                          return deposit.confirmed().on(\"target\", function (confs, target) {\n                            return depositLog(\"\".concat(confs, \"/\").concat(target, \" confirmations\"));\n                          }).on(\"confirmation\", function (confs, target) {\n                            return depositLog(\"\".concat(confs, \"/\").concat(target, \" confirmations\"));\n                          });\n\n                        case 4:\n                          _context3.next = 6;\n                          return deposit.signed() // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n                          .on(\"status\", function (status) {\n                            return depositLog(\"Status: \".concat(status));\n                          });\n\n                        case 6:\n                          _context3.next = 8;\n                          return deposit.mint() // Print Ethereum transaction hash.\n                          .on(\"transactionHash\", function (txHash) {\n                            return depositLog(\"Mint tx: \".concat(txHash));\n                          });\n\n                        case 8:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                }));\n\n                return function (_x) {\n                  return _ref4.apply(this, arguments);\n                };\n              }());\n\n              _this.log(\"Deposited \".concat(amount, \" BTC.\"));\n\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    _this.withdraw =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var _this$state3, web3, renJS, balance, recipient, amount, burnAndRelease, confirmations;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.logError(\"\"); // Reset error\n\n\n              _this$state3 = _this.state, web3 = _this$state3.web3, renJS = _this$state3.renJS, balance = _this$state3.balance;\n              recipient = prompt(\"Enter BTC recipient:\");\n              amount = balance;\n              _context5.next = 6;\n              return renJS.burnAndRelease({\n                // Send BTC from Ethereum back to the Bitcoin blockchain.\n                asset: \"BTC\",\n                to: Bitcoin().Address(recipient),\n                from: Ethereum(web3.currentProvider).Contract(function (btcAddress) {\n                  return {\n                    sendTo: contractAddress,\n                    contractFn: \"withdraw\",\n                    contractParams: [{\n                      type: \"bytes\",\n                      name: \"_msg\",\n                      value: Buffer.from(\"Withdrawing \".concat(amount, \" BTC\"))\n                    }, {\n                      type: \"bytes\",\n                      name: \"_to\",\n                      value: Buffer.from(btcAddress)\n                    }, {\n                      type: \"uint256\",\n                      name: \"_amount\",\n                      value: RenJS.utils.toSmallestUnit(amount, 8)\n                    }]\n                  };\n                })\n              });\n\n            case 6:\n              burnAndRelease = _context5.sent;\n              confirmations = 0;\n              _context5.next = 10;\n              return burnAndRelease.burn() // Ethereum transaction confirmations.\n              .on(\"confirmation\", function (confs) {\n                confirmations = confs;\n              }) // Print Ethereum transaction hash.\n              .on(\"transactionHash\", function (txHash) {\n                return _this.log(\"txHash: \".concat(String(txHash)));\n              });\n\n            case 10:\n              _context5.next = 12;\n              return burnAndRelease.release() // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n              .on(\"status\", function (status) {\n                return status === \"confirming\" ? _this.log(\"\".concat(status, \" (\").concat(confirmations, \"/15)\")) : _this.log(status);\n              }) // Print RenVM transaction hash\n              .on(\"txHash\", _this.log);\n\n            case 12:\n              _this.log(\"Withdrew \".concat(amount, \" BTC to \").concat(recipient, \".\"));\n\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    _this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      renJS: new RenJS(\"testnet\")\n    };\n    return _this;\n  }\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/tejas/Desktop/marketplace2/src/components/Bridge.js"],"names":["React","Component","Web3","RenJS","Bitcoin","Ethereum","ethers","ABI","contractAddress","App","props","componentDidMount","window","ethereum","web3Provider","enable","logError","web3","currentProvider","eth","net","getId","networkID","setState","updateBalance","setInterval","render","state","balance","message","error","deposit","catch","withdraw","color","contract","Contract","methods","call","parseInt","toString","console","String","log","renJS","amount","lockAndMint","asset","from","to","sendTo","contractFn","contractParams","name","type","value","Buffer","mint","gatewayAddress","on","hash","txHash","depositLog","msg","slice","status","confirmed","confs","target","signed","recipient","prompt","burnAndRelease","Address","btcAddress","utils","toSmallestUnit","confirmations","burn","release"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\n// Need to correct RenJS tutorial BTC/ETH imports with newest NPM file hyphen\nimport RenJS from \"@renproject/ren\";\nimport { Bitcoin } from \"@renproject/chains-bitcoin\";\nimport { Ethereum } from \"@renproject/chains-ethereum\";\nimport { ethers } from \"ethers\";\nimport \"./App.css\";\nimport ABI from \"../abis/ABI.json\";\n\n// Replace with your contract's address.\nconst contractAddress = \"0x4EaFf0d9Ce1c01910a1C4AeC87399A4caEc0a0Dd\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      balance: 0,\n      message: \"\",\n      error: \"\",\n      renJS: new RenJS(\"testnet\"),\n    }\n  }\n\n  componentDidMount = async () => {\n    let web3Provider;\n\n    // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n    // Modern dApp browsers...\n    if (window.ethereum) {\n      web3Provider = window.ethereum;\n      try {\n        // Request account access\n        await window.ethereum.enable();\n      } catch (error) {\n        // User denied account access...\n        this.logError(\"Please allow access to your Web3 wallet.\");\n        return;\n      }\n    }\n    // Legacy dApp browsers...\n    else if (window.web3) {\n      web3Provider = window.web3.currentProvider;\n    }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n      this.logError(\"Please install MetaMask!\");\n      return;\n    }\n\n    const web3 = new Web3(web3Provider);\n\n    const networkID = await web3.eth.net.getId();\n    if (networkID !== 42) {\n      this.logError(\"Please set your network to Kovan.\");\n      return;\n    }\n\n    this.setState({ web3 }, () => {\n\n      // Update balances immediately and every 10 seconds\n      this.updateBalance();\n      setInterval(() => {\n        this.updateBalance();\n      }, 10 * 1000);\n    });\n  }\n\n  render = () => {\n    const { balance, message, error } = this.state;\n    return (\n      <div className=\"App\">\n        <p>Balance: {balance} BTC</p>\n        <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.003 BTC</button></p>\n        <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n        <p>{message}</p>\n        {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n      </div>\n    );\n  }\n\n  updateBalance = async () => {\n    const { web3 } = this.state;\n    const contract = new web3.eth.Contract(ABI, contractAddress);\n    const balance = await contract.methods.balance().call();\n    this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n  }\n\n  logError = (error) => {\n    console.error(error);\n    this.setState({ error: String((error || {}).message || error) });\n  }\n\n  log = (message) => {\n    this.setState({ message });\n  }\n\n  deposit = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS } = this.state;\n\n    const amount = 0.003; // BTC\n    const mint = await renJS.lockAndMint({\n        // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n        asset: \"BTC\",\n        from: Bitcoin(),\n        to: Ethereum(web3.currentProvider).Contract({\n            // The contract we want to interact with\n            sendTo: contractAddress,\n        \n            // The name of the function we want to call\n            contractFn: \"deposit\",\n        \n            // Arguments expected for calling `deposit`\n            contractParams: [\n                {\n                    name: \"_msg\",\n                    type: \"bytes\",\n                    value: Buffer.from(`Depositing ${amount} BTC`),\n                }\n            ],\n        }),\n    });\n    \n    // Show the gateway address to the user so that they can transfer their BTC to it.\n    this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n    \n    mint.on(\"deposit\", async (deposit) => {\n        // Details of the deposit are available from `deposit.depositDetails`.\n\n        const hash = deposit.txHash();\n        const depositLog = (msg) => this.log(`[${hash.slice(0, 8)}][${deposit.status}] ${msg}`);\n  \n        await deposit.confirmed()\n          .on(\"target\", (confs, target) => depositLog(`${confs}/${target} confirmations`))\n          .on(\"confirmation\", (confs, target) => depositLog(`${confs}/${target} confirmations`));\n  \n        await deposit.signed()\n          // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n          .on(\"status\", (status) => depositLog(`Status: ${status}`));\n  \n        await deposit.mint()\n          // Print Ethereum transaction hash.\n          .on(\"transactionHash\", (txHash) => depositLog(`Mint tx: ${txHash}`));\n    });\n    \n    this.log(`Deposited ${amount} BTC.`);\n  }\n\n  withdraw = async () => {\n    this.logError(\"\"); // Reset error\n\n    const { web3, renJS, balance } = this.state;\n\n    const recipient = prompt(\"Enter BTC recipient:\");\n    const amount = balance;\n    const burnAndRelease = await renJS.burnAndRelease({\n        // Send BTC from Ethereum back to the Bitcoin blockchain.\n        asset: \"BTC\",\n        to: Bitcoin().Address(recipient),\n        from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n            sendTo: contractAddress,\n            \n            contractFn: \"withdraw\",\n            \n            contractParams: [\n                {\n                    type: \"bytes\",\n                    name: \"_msg\",\n                    value: Buffer.from(`Withdrawing ${amount} BTC`),\n                },\n                {\n                    type: \"bytes\",\n                    name: \"_to\",\n                    value: Buffer.from(btcAddress),\n                },\n                {\n                    type: \"uint256\",\n                    name: \"_amount\",\n                    value: RenJS.utils.toSmallestUnit(amount, 8),\n                },\n            ],\n        })),\n    });\n    \n    let confirmations = 0;\n    await burnAndRelease\n        .burn()\n        // Ethereum transaction confirmations.\n        .on(\"confirmation\", (confs) => {\n            confirmations = confs;\n        })\n        // Print Ethereum transaction hash.\n        .on(\"transactionHash\", (txHash) =>\n            this.log(`txHash: ${String(txHash)}`),\n        );\n    \n    await burnAndRelease\n        .release()\n        // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n        .on(\"status\", (status) =>\n            status === \"confirming\"\n                ? this.log(`${status} (${confirmations}/15)`)\n                : this.log(status),\n        )\n        // Print RenVM transaction hash\n        .on(\"txHash\", this.log);\n    \n    this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}