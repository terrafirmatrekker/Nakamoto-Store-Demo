{"ast":null,"code":"export var RPCMethod;\n\n(function (RPCMethod) {\n  // MethodSubmitTx submits a new transaction to the Darknode for acceptance\n  // into the transaction pool.\n  RPCMethod[\"MethodSubmitTx\"] = \"ren_submitTx\"; // MethodQueryTx returns the latest information about a transaction\n  // identified by a transaction hash.\n\n  RPCMethod[\"MethodQueryTx\"] = \"ren_queryTx\"; // MethodQueryTxs returns pages of transactions with optional filtering by\n  // status and tags.\n\n  RPCMethod[\"MethodQueryTxs\"] = \"ren_queryTxs\"; // MethodQueryBlock returns a block identified by the block height.\n\n  RPCMethod[\"MethodQueryBlock\"] = \"ren_queryBlock\"; // MethodQueryBlocks returns recently committed blocks.\n\n  RPCMethod[\"MethodQueryBlocks\"] = \"ren_queryBlocks\"; // MethodQueryNumPeers returns the number of known peers.\n\n  RPCMethod[\"MethodQueryNumPeers\"] = \"ren_queryNumPeers\"; // MethodQueryPeers returns a random subset of known peers.\n\n  RPCMethod[\"MethodQueryPeers\"] = \"ren_queryPeers\"; // MethodQueryShards returns information about the currently online/offline\n  // Shards.\n\n  RPCMethod[\"MethodQueryShards\"] = \"ren_queryShards\"; // MethodQueryStat returns status information about the Darknode. This\n  // information cannot be verified.\n\n  RPCMethod[\"MethodQueryStat\"] = \"ren_queryStat\"; // MethodQueryFees returns information about the current RenVM fees and\n  // underlying blockchain fees. This information cannot be verified.\n\n  RPCMethod[\"MethodQueryFees\"] = \"ren_queryFees\";\n})(RPCMethod || (RPCMethod = {})); // The following lines will throw a type error if RenVMResponses or RenVMParams\n// aren't defined for all RPC methods.\n// type _responsesCheck = RenVMResponses[RPCMethod];\n// type _paramsCheck = RenVMParams[RPCMethod];\n\n\n(function () {});\n\n(function () {});","map":null,"metadata":{},"sourceType":"module"}