{"ast":null,"code":"/**\n * @license\n * https://github.com/ealmansi/cashaddrjs\n * Copyright (c) 2017-2020 Emilio Almansi\n * Distributed under the MIT software license, see the accompanying\n * file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n */\n'use strict';\n\nvar validate = require('./validation').validate;\n/**\n * Base32 encoding and decoding.\n *\n * @module base32\n */\n\n/**\n * Charset containing the 32 symbols used in the base32 encoding.\n * @private\n */\n\n\nvar CHARSET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n/**\n * Inverted index mapping each symbol into its index within the charset.\n * @private\n */\n\nvar CHARSET_INVERSE_INDEX = {\n  'q': 0,\n  'p': 1,\n  'z': 2,\n  'r': 3,\n  'y': 4,\n  '9': 5,\n  'x': 6,\n  '8': 7,\n  'g': 8,\n  'f': 9,\n  '2': 10,\n  't': 11,\n  'v': 12,\n  'd': 13,\n  'w': 14,\n  '0': 15,\n  's': 16,\n  '3': 17,\n  'j': 18,\n  'n': 19,\n  '5': 20,\n  '4': 21,\n  'k': 22,\n  'h': 23,\n  'c': 24,\n  'e': 25,\n  '6': 26,\n  'm': 27,\n  'u': 28,\n  'a': 29,\n  '7': 30,\n  'l': 31\n};\n/**\n * Encodes the given array of 5-bit integers as a base32-encoded string.\n *\n * @static\n * @param {Uint8Array} data Array of integers between 0 and 31 inclusive.\n * @returns {string}\n * @throws {ValidationError}\n */\n\nfunction encode(data) {\n  validate(data instanceof Uint8Array, 'Invalid data: ' + data + '.');\n  var base32 = '';\n\n  for (var i = 0; i < data.length; ++i) {\n    var value = data[i];\n    validate(0 <= value && value < 32, 'Invalid value: ' + value + '.');\n    base32 += CHARSET[value];\n  }\n\n  return base32;\n}\n/**\n * Decodes the given base32-encoded string into an array of 5-bit integers.\n *\n * @static\n * @param {string} string\n * @returns {Uint8Array}\n * @throws {ValidationError}\n */\n\n\nfunction decode(string) {\n  validate(typeof string === 'string', 'Invalid base32-encoded string: ' + string + '.');\n  var data = new Uint8Array(string.length);\n\n  for (var i = 0; i < string.length; ++i) {\n    var value = string[i];\n    validate(value in CHARSET_INVERSE_INDEX, 'Invalid value: ' + value + '.');\n    data[i] = CHARSET_INVERSE_INDEX[value];\n  }\n\n  return data;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};","map":null,"metadata":{},"sourceType":"script"}