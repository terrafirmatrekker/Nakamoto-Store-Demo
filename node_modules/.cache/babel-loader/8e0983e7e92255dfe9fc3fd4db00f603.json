{"ast":null,"code":"import _createClass from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Base, WordArray } from './core.js';\nvar X32WordArray = WordArray;\n/**\n * A 64-bit word.\n */\n\nexport var X64Word =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(X64Word, _Base);\n\n  /**\n   * Initializes a newly created 64-bit word.\n   *\n   * @param {number} high The high 32 bits.\n   * @param {number} low The low 32 bits.\n   *\n   * @example\n   *\n   *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n   */\n  function X64Word(high, low) {\n    var _this;\n\n    _classCallCheck(this, X64Word);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(X64Word).call(this));\n    _this.high = high;\n    _this.low = low;\n    return _this;\n  }\n\n  return X64Word;\n}(Base);\n/**\n * An array of 64-bit words.\n *\n * @property {Array} words The array of CryptoJS.x64.Word objects.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\n\nexport var X64WordArray =\n/*#__PURE__*/\nfunction (_Base2) {\n  _inherits(X64WordArray, _Base2);\n\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create();\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ]);\n   *\n   *     var wordArray = CryptoJS.x64.WordArray.create([\n   *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n   *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n   *     ], 10);\n   */\n  function X64WordArray() {\n    var _this2;\n\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 8;\n\n    _classCallCheck(this, X64WordArray);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(X64WordArray).call(this));\n    _this2.words = words;\n    _this2.sigBytes = sigBytes;\n    return _this2;\n  }\n  /**\n   * Converts this 64-bit word array to a 32-bit word array.\n   *\n   * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n   *\n   * @example\n   *\n   *     var x32WordArray = x64WordArray.toX32();\n   */\n\n\n  _createClass(X64WordArray, [{\n    key: \"toX32\",\n    value: function toX32() {\n      // Shortcuts\n      var x64Words = this.words;\n      var x64WordsLength = x64Words.length; // Convert\n\n      var x32Words = [];\n\n      for (var i = 0; i < x64WordsLength; i += 1) {\n        var x64Word = x64Words[i];\n        x32Words.push(x64Word.high);\n        x32Words.push(x64Word.low);\n      }\n\n      return X32WordArray.create(x32Words, this.sigBytes);\n    }\n    /**\n     * Creates a copy of this word array.\n     *\n     * @return {X64WordArray} The clone.\n     *\n     * @example\n     *\n     *     var clone = x64WordArray.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(X64WordArray.prototype), \"clone\", this).call(this); // Clone \"words\" array\n\n\n      clone.words = this.words.slice(0);\n      var words = clone.words; // Clone each X64Word object\n\n      var wordsLength = words.length;\n\n      for (var i = 0; i < wordsLength; i += 1) {\n        words[i] = words[i].clone();\n      }\n\n      return clone;\n    }\n  }]);\n\n  return X64WordArray;\n}(Base);","map":null,"metadata":{},"sourceType":"module"}