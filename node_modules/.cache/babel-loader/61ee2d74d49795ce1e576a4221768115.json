{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tejas/Desktop/marketplace2/src/components/Bridge.tsx\";\nimport * as React from \"react\";\nimport { useDeposit, useLockAndMint, useBurnAndRelease, BurnStates, DepositStates, isOpen } from \"@renproject/ren-react\";\nimport RenJS from \"@renproject/ren\";\nimport { Ethereum } from \"@renproject/chains-ethereum\";\nimport { Zcash } from \"@renproject/chains-bitcoin\";\nimport Web3 from \"web3\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { RenNetwork } from \"@renproject/interfaces\";\nimport Shop from \"./Shop\";\n\nvar BurnApp = function BurnApp(_ref) {\n  var account = _ref.account,\n      provider = _ref.provider,\n      destinationAddress = _ref.destinationAddress,\n      balance = _ref.balance;\n  var parameters = useMemo(function () {\n    return {\n      sdk: new RenJS(\"testnet\"),\n      burnParams: {\n        sourceAsset: \"ZEC\",\n        network: RenNetwork.Testnet,\n        destinationAddress: destinationAddress,\n        targetAmount: balance\n      },\n      from: Ethereum(provider, \"testnet\").Account({\n        address: account,\n        value: balance\n      }),\n      to: Zcash().Address(destinationAddress)\n    };\n  }, [provider, account, balance]);\n\n  var _useBurnAndRelease = useBurnAndRelease(parameters),\n      value = _useBurnAndRelease.value,\n      session = _useBurnAndRelease.session,\n      burn = _useBurnAndRelease.burn,\n      tx = _useBurnAndRelease.tx;\n\n  switch (value) {\n    case BurnStates.CREATED:\n      return React.createElement(\"button\", {\n        onClick: burn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Burn and release \", Number(balance) / Math.pow(10, 8), \" \", session.sourceAsset, \" to\", destinationAddress);\n\n    case BurnStates.CONFIRMING_BURN:\n      if (!tx) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"loading\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Waiting for burn confirmation \", tx.sourceTxConfs, \" /\", tx.sourceTxConfTarget);\n\n    case BurnStates.RENVM_RELEASING:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Submitting to RenVM\");\n\n    case BurnStates.RENVM_ACCEPTED:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Releasing\");\n\n    case BurnStates.RELEASED:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Released\");\n\n    case BurnStates.ERROR_BURNING:\n      if (!isBurnErroring(session)) return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"loading\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Couldn't burn: \", session.error.message);\n\n    case BurnStates.ERROR_RELEASING:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Rejected\");\n\n    default:\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Loading\");\n  }\n};\n\nvar MintApp = function MintApp(_ref2) {\n  var account = _ref2.account,\n      provider = _ref2.provider;\n  var parameters = useMemo(function () {\n    return {\n      sdk: new RenJS(\"testnet\"),\n      mintParams: {\n        sourceAsset: \"ZEC\",\n        network: RenNetwork.Testnet,\n        destinationAddress: account\n      },\n      to: Ethereum(provider).Account({\n        address: account\n      }),\n      from: Zcash()\n    };\n  }, [provider, account]);\n  var mint = useLockAndMint(parameters);\n  if (!isOpen(mint.session)) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Loading\");\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Deposit \", mint.session.sourceAsset, \" at \", mint.session.gatewayAddress, mint.deposits.map(function (x) {\n    return React.createElement(Deposit, {\n      key: x,\n      session: mint,\n      depositId: x,\n      currency: mint.session.sourceAsset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  }));\n};\n\nvar Deposit = function Deposit(_ref3) {\n  var session = _ref3.session,\n      depositId = _ref3.depositId,\n      currency = _ref3.currency;\n  var machine = useDeposit(session, depositId);\n  if (!machine) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Missing deposit...\");\n  var state = machine.state,\n      mint = machine.mint;\n\n  if (state.matches(DepositStates.CONFIRMING_DEPOSIT)) {\n    var deposit = state.context.deposit;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Waiting for deposit confirmation \", deposit.sourceTxConfs, \"/\", deposit.sourceTxConfTarget);\n  }\n\n  if (state.matches(DepositStates.RENVM_SIGNING)) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"`Submitting to RenVM`\");\n  }\n\n  if (state.matches(DepositStates.RENVM_ACCEPTED)) {\n    return React.createElement(\"button\", {\n      onClick: mint,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Mint \", state.context.deposit.sourceTxAmount, \" \", currency, \"?\");\n  }\n\n  if (state.matches(DepositStates.SUBMITTING_MINT)) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Minting...\");\n  }\n\n  if (state.matches(DepositStates.MINTING) || state.matches(DepositStates.COMPLETED)) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Successfully minted: \", state.context.deposit.destTxHash);\n  }\n\n  if (state.matches(DepositStates.ERROR_MINTING) || state.matches(DepositStates.ERROR_SIGNING) || state.matches(DepositStates.ERROR_RESTORING)) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Error processing: \", state.context.deposit.error, \"; please refresh\");\n  }\n\n  if (state.matches(DepositStates.REJECTED)) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Deposit rejected \", state.context.deposit.error);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"State: \", state, \" id: \", state.context.deposit.sourceTxHash);\n};\n\nvar WithProvider = function WithProvider() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      provider = _useState2[0],\n      setProvider = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      account = _useState4[0],\n      setAccount = _useState4[1];\n\n  useEffect(function () {\n    window.ethereum.enable().then(\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              web3 = new Web3(window.ethereum);\n              _context.t0 = setAccount;\n              _context.next = 4;\n              return web3.eth.personal.getAccounts();\n\n            case 4:\n              _context.t1 = _context.sent[0];\n              (0, _context.t0)(_context.t1);\n              setProvider(window.ethereum);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  }, []);\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      balance = _useState6[0],\n      setBalance = _useState6[1];\n\n  useEffect(function () {\n    if (!provider) return;\n    Ethereum(provider, \"testnet\").getBalance(\"ZEC\", account).then(function (v) {\n      return setBalance(v.minus(1000).toString());\n    });\n  }, [provider, setBalance]);\n\n  if (!provider || !account || !balance) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Connect Wallet\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Mint\"), React.createElement(MintApp, {\n    provider: provider,\n    account: account,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Burn\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Zec Balance: \", balance), React.createElement(BurnApp, {\n    provider: provider,\n    account: account,\n    destinationAddress: \"tmCZ74c41byQKyVsA6xc8jMwXbQxKU16nJT\",\n    balance: 200000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  })));\n};\n\nexport default Shop; // import React, { Component } from \"react\";\n// import Web3 from \"web3\";\n// // Need to correct RenJS tutorial BTC/ETH imports with newest NPM file hyphen\n// import RenJS from \"@renproject/ren\";\n// import { Bitcoin } from \"@renproject/chains-bitcoin\";\n// import { Ethereum } from \"@renproject/chains-ethereum\";\n// // import { ethers } from \"ethers\";\n// import \"./App.css\";\n// import ABI from \"../abis/ABI.json\";\n// // Replace with your contract's address.\n// const contractAddress = \"0x4EaFf0d9Ce1c01910a1C4AeC87399A4caEc0a0Dd\";\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       balance: 0,\n//       message: \"\",\n//       error: \"\",\n//       renJS: new RenJS(\"testnet\"),\n//     }\n//   }\n//   componentDidMount = async () => {\n//     let web3Provider;\n//     // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n//     // Modern dApp browsers...\n//     if (window.ethereum) {\n//       web3Provider = window.ethereum;\n//       try {\n//         // Request account access\n//         await window.ethereum.enable();\n//       } catch (error) {\n//         // User denied account access...\n//         this.logError(\"Please allow access to your Web3 wallet.\");\n//         return;\n//       }\n//     }\n//     // Legacy dApp browsers...\n//     else if (window.web3) {\n//       web3Provider = window.web3.currentProvider;\n//     }\n//     // If no injected web3 instance is detected, fall back to Ganache\n//     else {\n//       this.logError(\"Please install MetaMask!\");\n//       return;\n//     }\n//     const web3 = new Web3(web3Provider);\n//     const networkID = await web3.eth.net.getId();\n//     if (networkID !== 42) {\n//       this.logError(\"Please set your network to Kovan.\");\n//       return;\n//     }\n//     this.setState({ web3 }, () => {\n//       // Update balances immediately and every 10 seconds\n//       this.updateBalance();\n//       setInterval(() => {\n//         this.updateBalance();\n//       }, 10 * 1000);\n//     });\n//   }\n//   render = () => {\n//     const { balance, message, error } = this.state;\n//     return (\n//       <div className=\"App\">\n//         <p>Balance: {balance} BTC</p>\n//         <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.003 BTC</button></p>\n//         <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n//         <p>{message}</p>\n//         {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n//       </div>\n//     );\n//   }\n//   updateBalance = async () => {\n//     const { web3 } = this.state;\n//     const contract = new web3.eth.Contract(ABI, contractAddress);\n//     const balance = await contract.methods.balance().call();\n//     this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n//   }\n//   logError = (error) => {\n//     console.error(error);\n//     this.setState({ error: String((error || {}).message || error) });\n//   }\n//   log = (message) => {\n//     this.setState({ message });\n//   }\n//   deposit = async () => {\n//     this.logError(\"\"); // Reset error\n//     const { web3, renJS } = this.state;\n//     const amount = 0.003; // BTC\n//     const mint = await renJS.lockAndMint({\n//         // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n//         asset: \"BTC\",\n//         from: Bitcoin(),\n//         to: Ethereum(web3.currentProvider).Contract({\n//             // The contract we want to interact with\n//             sendTo: contractAddress,\n//             // The name of the function we want to call\n//             contractFn: \"deposit\",\n//             // Arguments expected for calling `deposit`\n//             contractParams: [\n//                 {\n//                     name: \"_msg\",\n//                     type: \"bytes\",\n//                     value: Buffer.from(`Depositing ${amount} BTC`),\n//                 }\n//             ],\n//         }),\n//     });\n//     // Show the gateway address to the user so that they can transfer their BTC to it.\n//     this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n//     mint.on(\"deposit\", async (deposit) => {\n//         // Details of the deposit are available from `deposit.depositDetails`.\n//         const hash = deposit.txHash();\n//         const depositLog = (msg) => this.log(`[${hash.slice(0, 8)}][${deposit.status}] ${msg}`);\n//         await deposit.confirmed()\n//           .on(\"target\", (confs, target) => depositLog(`${confs}/${target} confirmations`))\n//           .on(\"confirmation\", (confs, target) => depositLog(`${confs}/${target} confirmations`));\n//         await deposit.signed()\n//           // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//           .on(\"status\", (status) => depositLog(`Status: ${status}`));\n//         await deposit.mint()\n//           // Print Ethereum transaction hash.\n//           .on(\"transactionHash\", (txHash) => depositLog(`Mint tx: ${txHash}`));\n//     });\n//     this.log(`Deposited ${amount} BTC.`);\n//   }\n//   withdraw = async () => {\n//     this.logError(\"\"); // Reset error\n//     const { web3, renJS, balance } = this.state;\n//     const recipient = prompt(\"Enter BTC recipient:\");\n//     const amount = balance;\n//     const burnAndRelease = await renJS.burnAndRelease({\n//         // Send BTC from Ethereum back to the Bitcoin blockchain.\n//         asset: \"BTC\",\n//         to: Bitcoin().Address(recipient),\n//         from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n//             sendTo: contractAddress,\n//             contractFn: \"withdraw\",\n//             contractParams: [\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_msg\",\n//                     value: Buffer.from(`Withdrawing ${amount} BTC`),\n//                 },\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_to\",\n//                     value: Buffer.from(btcAddress),\n//                 },\n//                 {\n//                     type: \"uint256\",\n//                     name: \"_amount\",\n//                     value: RenJS.utils.toSmallestUnit(amount, 8),\n//                 },\n//             ],\n//         })),\n//     });\n//     let confirmations = 0;\n//     await burnAndRelease\n//         .burn()\n//         // Ethereum transaction confirmations.\n//         .on(\"confirmation\", (confs) => {\n//             confirmations = confs;\n//         })\n//         // Print Ethereum transaction hash.\n//         .on(\"transactionHash\", (txHash) =>\n//             this.log(`txHash: ${String(txHash)}`),\n//         );\n//     await burnAndRelease\n//         .release()\n//         // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//         .on(\"status\", (status) =>\n//             status === \"confirming\"\n//                 ? this.log(`${status} (${confirmations}/15)`)\n//                 : this.log(status),\n//         )\n//         // Print RenVM transaction hash\n//         .on(\"txHash\", this.log);\n//     this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/tejas/Desktop/marketplace2/src/components/Bridge.tsx"],"names":["React","useDeposit","useLockAndMint","useBurnAndRelease","BurnStates","DepositStates","isOpen","RenJS","Ethereum","Zcash","Web3","useEffect","useMemo","useState","RenNetwork","Shop","BurnApp","account","provider","destinationAddress","balance","parameters","sdk","burnParams","sourceAsset","network","Testnet","targetAmount","from","Account","address","value","to","Address","session","burn","tx","CREATED","Number","CONFIRMING_BURN","sourceTxConfs","sourceTxConfTarget","RENVM_RELEASING","RENVM_ACCEPTED","RELEASED","ERROR_BURNING","isBurnErroring","error","message","ERROR_RELEASING","MintApp","mintParams","mint","gatewayAddress","deposits","map","x","Deposit","depositId","currency","machine","state","matches","CONFIRMING_DEPOSIT","deposit","context","RENVM_SIGNING","sourceTxAmount","SUBMITTING_MINT","MINTING","COMPLETED","destTxHash","ERROR_MINTING","ERROR_SIGNING","ERROR_RESTORING","REJECTED","sourceTxHash","WithProvider","setProvider","setAccount","window","ethereum","enable","then","web3","eth","personal","getAccounts","setBalance","getBalance","v","minus","toString"],"mappings":"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":["import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport {\n    useDeposit,\n    useLockAndMint,\n    useBurnAndRelease,\n    BurnStates,\n    DepositStates,\n    isOpen,\n} from \"@renproject/ren-react\";\nimport RenJS from \"@renproject/ren\";\nimport { Ethereum } from \"@renproject/chains-ethereum\";\nimport { Zcash } from \"@renproject/chains-bitcoin\";\nimport Web3 from \"web3\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { RenNetwork } from \"@renproject/interfaces\";\nimport Shop from \"./Shop\";\n\nconst BurnApp = ({ account, provider, destinationAddress, balance }) => {\n    const parameters = useMemo(\n        () => ({\n            sdk: new RenJS(\"testnet\"),\n            burnParams: {\n                sourceAsset: \"ZEC\",\n                network: RenNetwork.Testnet,\n                destinationAddress,\n                targetAmount: balance,\n            },\n            from: Ethereum(provider, \"testnet\").Account({\n                address: account,\n                value: balance,\n            }),\n            to: Zcash().Address(destinationAddress),\n        }),\n        [provider, account, balance],\n    );\n\n    const { value, session, burn, tx } = useBurnAndRelease(parameters);\n    switch (value) {\n        case BurnStates.CREATED:\n            return (\n                <button onClick={burn}>\n                    Burn and release {Number(balance) / 10 ** 8}{\" \"}\n                    {session.sourceAsset} to\n                    {destinationAddress}\n                </button>\n            );\n        case BurnStates.CONFIRMING_BURN:\n            if (!tx) return <div>loading</div>;\n            return (\n                <div>\n                    Waiting for burn confirmation {tx.sourceTxConfs} /\n                    {tx.sourceTxConfTarget}\n                </div>\n            );\n        case BurnStates.RENVM_RELEASING:\n            return <div>Submitting to RenVM</div>;\n        case BurnStates.RENVM_ACCEPTED:\n            return <div>Releasing</div>;\n        case BurnStates.RELEASED:\n            return <div>Released</div>;\n        case BurnStates.ERROR_BURNING:\n            if (!isBurnErroring(session)) return <div>loading</div>;\n            return <div>Couldn't burn: {session.error.message}</div>;\n        case BurnStates.ERROR_RELEASING:\n            return <div>Rejected</div>;\n        default:\n            return <div>Loading</div>;\n    }\n};\n\nconst MintApp = ({ account, provider }) => {\n    const parameters = useMemo(\n        () => ({\n            sdk: new RenJS(\"testnet\"),\n            mintParams: {\n                sourceAsset: \"ZEC\",\n                network: RenNetwork.Testnet,\n                destinationAddress: account,\n            },\n            to: Ethereum(provider).Account({ address: account }),\n            from: Zcash(),\n        }),\n        [provider, account],\n    );\n    const mint = useLockAndMint(parameters);\n    if (!isOpen(mint.session)) return <div>Loading</div>;\n    return (\n        <div>\n            Deposit {mint.session.sourceAsset} at {mint.session.gatewayAddress}\n            {mint.deposits.map((x) => (\n                <Deposit\n                    key={x}\n                    session={mint}\n                    depositId={x}\n                    currency={mint.session.sourceAsset}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst Deposit: React.FC<{\n    session: ReturnType<typeof useLockAndMint>;\n    depositId: string;\n    currency: string;\n}> = ({ session, depositId, currency }) => {\n    const machine = useDeposit(session, depositId);\n    if (!machine) return <div>Missing deposit...</div>;\n    const { state, mint } = machine;\n    if (state.matches(DepositStates.CONFIRMING_DEPOSIT)) {\n        const deposit = state.context.deposit;\n        return (\n            <div>\n                Waiting for deposit confirmation {deposit.sourceTxConfs}/\n                {deposit.sourceTxConfTarget}\n            </div>\n        );\n    }\n    if (state.matches(DepositStates.RENVM_SIGNING)) {\n        return <div>`Submitting to RenVM`</div>;\n    }\n    if (state.matches(DepositStates.RENVM_ACCEPTED)) {\n        return (\n            <button onClick={mint}>\n                Mint {state.context.deposit.sourceTxAmount} {currency}?\n            </button>\n        );\n    }\n    if (state.matches(DepositStates.SUBMITTING_MINT)) {\n        return <div>Minting...</div>;\n    }\n    if (\n        state.matches(DepositStates.MINTING) ||\n        state.matches(DepositStates.COMPLETED)\n    ) {\n        return (\n            <div>Successfully minted: {state.context.deposit.destTxHash}</div>\n        );\n    }\n    if (\n        state.matches(DepositStates.ERROR_MINTING) ||\n        state.matches(DepositStates.ERROR_SIGNING) ||\n        state.matches(DepositStates.ERROR_RESTORING)\n    ) {\n        return (\n            <div>\n                Error processing: {state.context.deposit.error}; please refresh\n            </div>\n        );\n    }\n    if (state.matches(DepositStates.REJECTED)) {\n        return <div>Deposit rejected {state.context.deposit.error}</div>;\n    }\n    return (\n        <div>\n            State: {state} id: {state.context.deposit.sourceTxHash}\n        </div>\n    );\n};\n\nconst WithProvider = () => {\n    const [provider, setProvider] = useState<any>();\n    const [account, setAccount] = useState<string>();\n    useEffect(() => {\n        (window as any).ethereum.enable().then(async () => {\n            const web3 = new Web3((window as any).ethereum);\n            setAccount((await web3.eth.personal.getAccounts())[0]);\n            setProvider((window as any).ethereum);\n        });\n    }, []);\n\n    const [balance, setBalance] = useState<string>();\n    useEffect(() => {\n        if (!provider) return;\n        Ethereum(provider, \"testnet\")\n            .getBalance(\"ZEC\", account)\n            .then((v) => setBalance(v.minus(1000).toString()));\n    }, [provider, setBalance]);\n\n    if (!provider || !account || !balance) {\n        return <div>Connect Wallet</div>;\n    }\n\n    return (\n        <div>\n            <div>\n                <h2>Mint</h2>\n                <MintApp provider={provider} account={account} />\n            </div>\n            <div>\n                <h2>Burn</h2>\n                <div>Zec Balance: {balance}</div>\n                <BurnApp\n                    provider={provider}\n                    account={account}\n                    destinationAddress={\"tmCZ74c41byQKyVsA6xc8jMwXbQxKU16nJT\"}\n                    balance={200000}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Shop;\n\n\n// import React, { Component } from \"react\";\n// import Web3 from \"web3\";\n// // Need to correct RenJS tutorial BTC/ETH imports with newest NPM file hyphen\n// import RenJS from \"@renproject/ren\";\n// import { Bitcoin } from \"@renproject/chains-bitcoin\";\n// import { Ethereum } from \"@renproject/chains-ethereum\";\n// // import { ethers } from \"ethers\";\n// import \"./App.css\";\n// import ABI from \"../abis/ABI.json\";\n\n// // Replace with your contract's address.\n// const contractAddress = \"0x4EaFf0d9Ce1c01910a1C4AeC87399A4caEc0a0Dd\";\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       balance: 0,\n//       message: \"\",\n//       error: \"\",\n//       renJS: new RenJS(\"testnet\"),\n//     }\n//   }\n\n//   componentDidMount = async () => {\n//     let web3Provider;\n\n//     // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n//     // Modern dApp browsers...\n//     if (window.ethereum) {\n//       web3Provider = window.ethereum;\n//       try {\n//         // Request account access\n//         await window.ethereum.enable();\n//       } catch (error) {\n//         // User denied account access...\n//         this.logError(\"Please allow access to your Web3 wallet.\");\n//         return;\n//       }\n//     }\n//     // Legacy dApp browsers...\n//     else if (window.web3) {\n//       web3Provider = window.web3.currentProvider;\n//     }\n//     // If no injected web3 instance is detected, fall back to Ganache\n//     else {\n//       this.logError(\"Please install MetaMask!\");\n//       return;\n//     }\n\n//     const web3 = new Web3(web3Provider);\n\n//     const networkID = await web3.eth.net.getId();\n//     if (networkID !== 42) {\n//       this.logError(\"Please set your network to Kovan.\");\n//       return;\n//     }\n\n//     this.setState({ web3 }, () => {\n\n//       // Update balances immediately and every 10 seconds\n//       this.updateBalance();\n//       setInterval(() => {\n//         this.updateBalance();\n//       }, 10 * 1000);\n//     });\n//   }\n\n//   render = () => {\n//     const { balance, message, error } = this.state;\n//     return (\n//       <div className=\"App\">\n//         <p>Balance: {balance} BTC</p>\n//         <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.003 BTC</button></p>\n//         <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n//         <p>{message}</p>\n//         {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n//       </div>\n//     );\n//   }\n\n//   updateBalance = async () => {\n//     const { web3 } = this.state;\n//     const contract = new web3.eth.Contract(ABI, contractAddress);\n//     const balance = await contract.methods.balance().call();\n//     this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n//   }\n\n//   logError = (error) => {\n//     console.error(error);\n//     this.setState({ error: String((error || {}).message || error) });\n//   }\n\n//   log = (message) => {\n//     this.setState({ message });\n//   }\n\n//   deposit = async () => {\n//     this.logError(\"\"); // Reset error\n\n//     const { web3, renJS } = this.state;\n\n//     const amount = 0.003; // BTC\n//     const mint = await renJS.lockAndMint({\n//         // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n//         asset: \"BTC\",\n//         from: Bitcoin(),\n//         to: Ethereum(web3.currentProvider).Contract({\n//             // The contract we want to interact with\n//             sendTo: contractAddress,\n        \n//             // The name of the function we want to call\n//             contractFn: \"deposit\",\n        \n//             // Arguments expected for calling `deposit`\n//             contractParams: [\n//                 {\n//                     name: \"_msg\",\n//                     type: \"bytes\",\n//                     value: Buffer.from(`Depositing ${amount} BTC`),\n//                 }\n//             ],\n//         }),\n//     });\n    \n//     // Show the gateway address to the user so that they can transfer their BTC to it.\n//     this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n    \n//     mint.on(\"deposit\", async (deposit) => {\n//         // Details of the deposit are available from `deposit.depositDetails`.\n\n//         const hash = deposit.txHash();\n//         const depositLog = (msg) => this.log(`[${hash.slice(0, 8)}][${deposit.status}] ${msg}`);\n  \n//         await deposit.confirmed()\n//           .on(\"target\", (confs, target) => depositLog(`${confs}/${target} confirmations`))\n//           .on(\"confirmation\", (confs, target) => depositLog(`${confs}/${target} confirmations`));\n  \n//         await deposit.signed()\n//           // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//           .on(\"status\", (status) => depositLog(`Status: ${status}`));\n  \n//         await deposit.mint()\n//           // Print Ethereum transaction hash.\n//           .on(\"transactionHash\", (txHash) => depositLog(`Mint tx: ${txHash}`));\n//     });\n    \n//     this.log(`Deposited ${amount} BTC.`);\n//   }\n\n//   withdraw = async () => {\n//     this.logError(\"\"); // Reset error\n\n//     const { web3, renJS, balance } = this.state;\n\n//     const recipient = prompt(\"Enter BTC recipient:\");\n//     const amount = balance;\n//     const burnAndRelease = await renJS.burnAndRelease({\n//         // Send BTC from Ethereum back to the Bitcoin blockchain.\n//         asset: \"BTC\",\n//         to: Bitcoin().Address(recipient),\n//         from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n//             sendTo: contractAddress,\n            \n//             contractFn: \"withdraw\",\n            \n//             contractParams: [\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_msg\",\n//                     value: Buffer.from(`Withdrawing ${amount} BTC`),\n//                 },\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_to\",\n//                     value: Buffer.from(btcAddress),\n//                 },\n//                 {\n//                     type: \"uint256\",\n//                     name: \"_amount\",\n//                     value: RenJS.utils.toSmallestUnit(amount, 8),\n//                 },\n//             ],\n//         })),\n//     });\n    \n//     let confirmations = 0;\n//     await burnAndRelease\n//         .burn()\n//         // Ethereum transaction confirmations.\n//         .on(\"confirmation\", (confs) => {\n//             confirmations = confs;\n//         })\n//         // Print Ethereum transaction hash.\n//         .on(\"transactionHash\", (txHash) =>\n//             this.log(`txHash: ${String(txHash)}`),\n//         );\n    \n//     await burnAndRelease\n//         .release()\n//         // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//         .on(\"status\", (status) =>\n//             status === \"confirming\"\n//                 ? this.log(`${status} (${confirmations}/15)`)\n//                 : this.log(status),\n//         )\n//         // Print RenVM transaction hash\n//         .on(\"txHash\", this.log);\n    \n//     this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n//   }\n// }\n\n// export default App;"]},"metadata":{},"sourceType":"module"}