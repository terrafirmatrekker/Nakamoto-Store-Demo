{"ast":null,"code":"import _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _construct from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport var Base =\n/*#__PURE__*/\nfunction () {\n  function Base() {\n    _classCallCheck(this, Base);\n  }\n\n  _createClass(Base, [{\n    key: \"mixIn\",\n\n    /**\n     * Copies properties into this object.\n     *\n     * @param {Object} properties The properties to mix in.\n     *\n     * @example\n     *\n     *     MyType.mixIn({\n     *         field: 'value'\n     *     });\n     */\n    value: function mixIn(properties) {\n      return Object.assign(this, properties);\n    }\n    /**\n     * Creates a copy of this object.\n     *\n     * @return {Object} The clone.\n     *\n     * @example\n     *\n     *     var clone = instance.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = new this.constructor();\n      Object.assign(clone, this);\n      return clone;\n    }\n  }], [{\n    key: \"create\",\n\n    /**\n     * Extends this object and runs the init method.\n     * Arguments to create() will be passed to init().\n     *\n     * @return {Object} The new object.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var instance = MyType.create();\n     */\n    value: function create() {\n      for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _construct(this, args);\n    }\n  }]);\n\n  return Base;\n}();\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\n\nexport var WordArray =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(WordArray, _Base);\n\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  function WordArray() {\n    var _this;\n\n    var words = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var sigBytes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : words.length * 4;\n\n    _classCallCheck(this, WordArray);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WordArray).call(this));\n    var typedArray = words; // Convert buffers to uint8\n\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    } // Convert other array views to uint8\n\n\n    if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    } // Handle Uint8Array\n\n\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      var typedArrayByteLength = typedArray.byteLength; // Extract bytes\n\n      var _words = [];\n\n      for (var i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n      } // Initialize this word array\n\n\n      _this.words = _words;\n      _this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      _this.words = words;\n      _this.sigBytes = sigBytes;\n    }\n\n    return _this;\n  }\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n\n\n  _createClass(WordArray, [{\n    key: \"toString\",\n\n    /**\n     * Converts this word array to a string.\n     *\n     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n     *\n     * @return {string} The stringified word array.\n     *\n     * @example\n     *\n     *     var string = wordArray + '';\n     *     var string = wordArray.toString();\n     *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n     */\n    value: function toString() {\n      var encoder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Hex;\n      return encoder.stringify(this);\n    }\n    /**\n     * Concatenates a word array to this word array.\n     *\n     * @param {WordArray} wordArray The word array to append.\n     *\n     * @return {WordArray} This word array.\n     *\n     * @example\n     *\n     *     wordArray1.concat(wordArray2);\n     */\n\n  }, {\n    key: \"concat\",\n    value: function concat(wordArray) {\n      // Shortcuts\n      var thisWords = this.words;\n      var thatWords = wordArray.words;\n      var thisSigBytes = this.sigBytes;\n      var thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n      this.clamp(); // Concat\n\n      if (thisSigBytes % 4) {\n        // Copy one byte at a time\n        for (var i = 0; i < thatSigBytes; i += 1) {\n          var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n          thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n        }\n      } else {\n        // Copy one word at a time\n        for (var _i = 0; _i < thatSigBytes; _i += 4) {\n          thisWords[thisSigBytes + _i >>> 2] = thatWords[_i >>> 2];\n        }\n      }\n\n      this.sigBytes += thatSigBytes; // Chainable\n\n      return this;\n    }\n    /**\n     * Removes insignificant bits.\n     *\n     * @example\n     *\n     *     wordArray.clamp();\n     */\n\n  }, {\n    key: \"clamp\",\n    value: function clamp() {\n      // Shortcuts\n      var words = this.words,\n          sigBytes = this.sigBytes; // Clamp\n\n      words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n      words.length = Math.ceil(sigBytes / 4);\n    }\n    /**\n     * Creates a copy of this word array.\n     *\n     * @return {WordArray} The clone.\n     *\n     * @example\n     *\n     *     var clone = wordArray.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(WordArray.prototype), \"clone\", this).call(this);\n\n      clone.words = this.words.slice(0);\n      return clone;\n    }\n  }], [{\n    key: \"random\",\n    value: function random(nBytes) {\n      var words = [];\n\n      var r = function r(m_w) {\n        var _m_w = m_w;\n        var _m_z = 0x3ade68b1;\n        var mask = 0xffffffff;\n        return function () {\n          _m_z = 0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10) & mask;\n          _m_w = 0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10) & mask;\n          var result = (_m_z << 0x10) + _m_w & mask;\n          result /= 0x100000000;\n          result += 0.5;\n          return result * (Math.random() > 0.5 ? 1 : -1);\n        };\n      };\n\n      for (var i = 0, rcache; i < nBytes; i += 4) {\n        var _r = r((rcache || Math.random()) * 0x100000000);\n\n        rcache = _r() * 0x3ade67b7;\n        words.push(_r() * 0x100000000 | 0);\n      }\n\n      return new WordArray(words, nBytes);\n    }\n  }]);\n\n  return WordArray;\n}(Base);\n/**\n * Hex encoding strategy.\n */\n\nexport var Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var hexChars = [];\n\n    for (var i = 0; i < sigBytes; i += 1) {\n      var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse: function parse(hexStr) {\n    // Shortcut\n    var hexStrLength = hexStr.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  }\n};\n/**\n * Latin1 encoding strategy.\n */\n\nexport var Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var latin1Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 1) {\n      var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse: function parse(latin1Str) {\n    // Shortcut\n    var latin1StrLength = latin1Str.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n    }\n\n    return new WordArray(words, latin1StrLength);\n  }\n};\n/**\n * UTF-8 encoding strategy.\n */\n\nexport var Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse: function parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n};\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\n\nexport var BufferedBlockAlgorithm =\n/*#__PURE__*/\nfunction (_Base2) {\n  _inherits(BufferedBlockAlgorithm, _Base2);\n\n  function BufferedBlockAlgorithm() {\n    var _this2;\n\n    _classCallCheck(this, BufferedBlockAlgorithm);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(BufferedBlockAlgorithm).call(this));\n    _this2._minBufferSize = 0;\n    return _this2;\n  }\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n\n\n  _createClass(BufferedBlockAlgorithm, [{\n    key: \"reset\",\n    value: function reset() {\n      // Initial values\n      this._data = new WordArray();\n      this._nDataBytes = 0;\n    }\n    /**\n     * Adds new data to this block algorithm's buffer.\n     *\n     * @param {WordArray|string} data\n     *\n     *     The data to append. Strings are converted to a WordArray using UTF-8.\n     *\n     * @example\n     *\n     *     bufferedBlockAlgorithm._append('data');\n     *     bufferedBlockAlgorithm._append(wordArray);\n     */\n\n  }, {\n    key: \"_append\",\n    value: function _append(data) {\n      var m_data = data; // Convert string to WordArray, else assume WordArray already\n\n      if (typeof m_data === 'string') {\n        m_data = Utf8.parse(m_data);\n      } // Append\n\n\n      this._data.concat(m_data);\n\n      this._nDataBytes += m_data.sigBytes;\n    }\n    /**\n     * Processes available data blocks.\n     *\n     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n     *\n     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n     *\n     * @return {WordArray} The processed data.\n     *\n     * @example\n     *\n     *     var processedData = bufferedBlockAlgorithm._process();\n     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n     */\n\n  }, {\n    key: \"_process\",\n    value: function _process(doFlush) {\n      var processedWords; // Shortcuts\n\n      var data = this._data,\n          blockSize = this.blockSize;\n      var dataWords = data.words;\n      var dataSigBytes = data.sigBytes;\n      var blockSizeBytes = blockSize * 4; // Count blocks ready\n\n      var nBlocksReady = dataSigBytes / blockSizeBytes;\n\n      if (doFlush) {\n        // Round up to include partial blocks\n        nBlocksReady = Math.ceil(nBlocksReady);\n      } else {\n        // Round down to include only full blocks,\n        // less the number of blocks that must remain in the buffer\n        nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n      } // Count words ready\n\n\n      var nWordsReady = nBlocksReady * blockSize; // Count bytes ready\n\n      var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks\n\n      if (nWordsReady) {\n        for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n          // Perform concrete-algorithm logic\n          this._doProcessBlock(dataWords, offset);\n        } // Remove processed words\n\n\n        processedWords = dataWords.splice(0, nWordsReady);\n        data.sigBytes -= nBytesReady;\n      } // Return processed words\n\n\n      return new WordArray(processedWords, nBytesReady);\n    }\n    /**\n     * Creates a copy of this object.\n     *\n     * @return {Object} The clone.\n     *\n     * @example\n     *\n     *     var clone = bufferedBlockAlgorithm.clone();\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var clone = _get(_getPrototypeOf(BufferedBlockAlgorithm.prototype), \"clone\", this).call(this);\n\n      clone._data = this._data.clone();\n      return clone;\n    }\n  }]);\n\n  return BufferedBlockAlgorithm;\n}(Base);\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\n\nexport var Hasher =\n/*#__PURE__*/\nfunction (_BufferedBlockAlgorit) {\n  _inherits(Hasher, _BufferedBlockAlgorit);\n\n  function Hasher(cfg) {\n    var _this3;\n\n    _classCallCheck(this, Hasher);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Hasher).call(this));\n    _this3.blockSize = 512 / 32;\n    /**\n     * Configuration options.\n     */\n\n    _this3.cfg = Object.assign(new Base(), cfg); // Set initial values\n\n    _this3.reset();\n\n    return _this3;\n  }\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n\n\n  _createClass(Hasher, [{\n    key: \"reset\",\n\n    /**\n     * Resets this hasher to its initial state.\n     *\n     * @example\n     *\n     *     hasher.reset();\n     */\n    value: function reset() {\n      // Reset data buffer\n      _get(_getPrototypeOf(Hasher.prototype), \"reset\", this).call(this); // Perform concrete-hasher logic\n\n\n      this._doReset();\n    }\n    /**\n     * Updates this hasher with a message.\n     *\n     * @param {WordArray|string} messageUpdate The message to append.\n     *\n     * @return {Hasher} This hasher.\n     *\n     * @example\n     *\n     *     hasher.update('message');\n     *     hasher.update(wordArray);\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(messageUpdate) {\n      // Append\n      this._append(messageUpdate); // Update the hash\n\n\n      this._process(); // Chainable\n\n\n      return this;\n    }\n    /**\n     * Finalizes the hash computation.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @example\n     *\n     *     var hash = hasher.finalize();\n     *     var hash = hasher.finalize('message');\n     *     var hash = hasher.finalize(wordArray);\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(messageUpdate) {\n      // Final message update\n      if (messageUpdate) {\n        this._append(messageUpdate);\n      } // Perform concrete-hasher logic\n\n\n      var hash = this._doFinalize();\n\n      return hash;\n    }\n  }], [{\n    key: \"_createHelper\",\n    value: function _createHelper(SubHasher) {\n      return function (message, cfg) {\n        return new SubHasher(cfg).finalize(message);\n      };\n    }\n    /**\n     * Creates a shortcut function to the HMAC's object interface.\n     *\n     * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n     *\n     * @return {Function} The shortcut function.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n     */\n\n  }, {\n    key: \"_createHmacHelper\",\n    value: function _createHmacHelper(SubHasher) {\n      return function (message, key) {\n        return new HMAC(SubHasher, key).finalize(message);\n      };\n    }\n  }]);\n\n  return Hasher;\n}(BufferedBlockAlgorithm);\n/**\n * HMAC algorithm.\n */\n\nexport var HMAC =\n/*#__PURE__*/\nfunction (_Base3) {\n  _inherits(HMAC, _Base3);\n\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  function HMAC(SubHasher, key) {\n    var _this4;\n\n    _classCallCheck(this, HMAC);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(HMAC).call(this));\n    var hasher = new SubHasher();\n    _this4._hasher = hasher; // Convert string to WordArray, else assume WordArray already\n\n    var _key = key;\n\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    } // Shortcuts\n\n\n    var hasherBlockSize = hasher.blockSize;\n    var hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    } // Clamp excess bits\n\n\n    _key.clamp(); // Clone key for inner and outer pads\n\n\n    var oKey = _key.clone();\n\n    _this4._oKey = oKey;\n\n    var iKey = _key.clone();\n\n    _this4._iKey = iKey; // Shortcuts\n\n    var oKeyWords = oKey.words;\n    var iKeyWords = iKey.words; // XOR keys with pad constants\n\n    for (var i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n    _this4.reset();\n\n    return _this4;\n  }\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n\n\n  _createClass(HMAC, [{\n    key: \"reset\",\n    value: function reset() {\n      // Shortcut\n      var hasher = this._hasher; // Reset\n\n      hasher.reset();\n      hasher.update(this._iKey);\n    }\n    /**\n     * Updates this HMAC with a message.\n     *\n     * @param {WordArray|string} messageUpdate The message to append.\n     *\n     * @return {HMAC} This HMAC instance.\n     *\n     * @example\n     *\n     *     hmacHasher.update('message');\n     *     hmacHasher.update(wordArray);\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(messageUpdate) {\n      this._hasher.update(messageUpdate); // Chainable\n\n\n      return this;\n    }\n    /**\n     * Finalizes the HMAC computation.\n     * Note that the finalize operation is effectively a destructive, read-once operation.\n     *\n     * @param {WordArray|string} messageUpdate (Optional) A final message update.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @example\n     *\n     *     var hmac = hmacHasher.finalize();\n     *     var hmac = hmacHasher.finalize('message');\n     *     var hmac = hmacHasher.finalize(wordArray);\n     */\n\n  }, {\n    key: \"finalize\",\n    value: function finalize(messageUpdate) {\n      // Shortcut\n      var hasher = this._hasher; // Compute HMAC\n\n      var innerHash = hasher.finalize(messageUpdate);\n      hasher.reset();\n      var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n      return hmac;\n    }\n  }]);\n\n  return HMAC;\n}(Base);","map":null,"metadata":{},"sourceType":"module"}