{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { isMainnetAddress, isTestnetAddress, toCashAddress } from \"bchaddrjs\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-cash\";\nimport { getConfirmations, getUTXO, getUTXOs } from \"send-crypto/build/main/handlers/BCH/BCHHandler\";\nimport { anyAddressFrom } from \"./btc\";\nimport { createAddress } from \"./common\";\nimport { Ox, strip0x } from \"./hex\";\nexport var createBCHAddress = createAddress(Networks, Opcode, Script);\nexport var getBitcoinCashUTXOs = function getBitcoinCashUTXOs(_ref) {\n  var isTestnet = _ref.isTestnet;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(address, confirmations) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", getUTXOs(isTestnet, {\n                  address: address,\n                  confirmations: confirmations\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getBitcoinCashConfirmations = function getBitcoinCashConfirmations(_ref3) {\n  var isTestnet = _ref3.isTestnet;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(txHash) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", getConfirmations(isTestnet, txHash));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getBitcoinCashUTXO = function getBitcoinCashUTXO(_ref5) {\n  var isTestnet = _ref5.isTestnet;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(txHash, vOut) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", getUTXO(isTestnet, txHash, vOut));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var bchAddressToHex = function bchAddressToHex(address) {\n  return Ox(Buffer.from(address));\n};\n\nvar isBCHAddress = function isBCHAddress(address, options) {\n  try {\n    return options ? options.isTestnet ? isTestnetAddress(address) : isMainnetAddress(address) : isTestnetAddress(address) || isMainnetAddress(address);\n  } catch (error) {\n    return false;\n  }\n};\n\nvar bchTactics = {\n  decoders: [function (address) {\n    return Buffer.from(address);\n  }, function (address) {\n    return Buffer.from(address, \"base64\");\n  }, function (address) {\n    return Buffer.from(strip0x(address), \"hex\");\n  }],\n  encoders: [function (buffer) {\n    return toCashAddress(buffer.toString());\n  }]\n};\nexport var bchAddressFrom = anyAddressFrom(isBCHAddress, bchTactics);","map":null,"metadata":{},"sourceType":"module"}