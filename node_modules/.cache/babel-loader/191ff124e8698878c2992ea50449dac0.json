{"ast":null,"code":"'use strict'; // Copyright (c) 2018 Matias Alejo Garcia\n// Copyright (c) 2017 Emilio Almansi\n// Copyright (c) 2017 Pieter Wuille\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Converts an array of integers made up of `from` bits into an\n * array of integers made up of `to` bits. The output array is\n * zero-padded if necessary, unless strict mode is true.\n * Original by Pieter Wuille: https://github.com/sipa/bech32.\n *\n * @param {Array} data Array of integers made up of `from` bits.\n * @param {number} from Length in bits of elements in the input array.\n * @param {number} to Length in bits of elements in the output array.\n * @param {bool} strict Require the conversion to be completed without padding.\n */\n\nvar $ = require('./preconditions');\n\nmodule.exports = function (data, from, to, strict) {\n  strict = strict || false;\n  var accumulator = 0;\n  var bits = 0;\n  var result = [];\n  var mask = (1 << to) - 1;\n\n  for (var i = 0; i < data.length; i++) {\n    var value = data[i];\n    $.checkArgument(!(value < 0 || value >> from !== 0), 'value ' + value);\n    accumulator = accumulator << from | value;\n    bits += from;\n\n    while (bits >= to) {\n      bits -= to;\n      result.push(accumulator >> bits & mask);\n    }\n  }\n\n  if (!strict) {\n    if (bits > 0) {\n      result.push(accumulator << to - bits & mask);\n    }\n  } else {\n    $.checkState(!(bits >= from || accumulator << to - bits & mask), 'Conversion requires padding but strict mode was used');\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}