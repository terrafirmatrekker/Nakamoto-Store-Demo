{"ast":null,"code":"// Coins supported by bitgo-bitcoinjs-lib\nvar typeforce = require('typeforce');\n\nvar networks = require('./networks');\n/**\n * @returns {Network[]} all known networks as array\n */\n\n\nfunction getNetworkList() {\n  return Object.keys(networks).map(function (n) {\n    return networks[n];\n  });\n}\n/**\n * @param {Network} network\n * @returns {string} the name of the network. Returns undefined if network is not a value\n *                   of `networks`\n */\n\n\nfunction getNetworkName(network) {\n  return Object.keys(networks).find(function (n) {\n    return networks[n] === network;\n  });\n}\n/**\n * @param {Network} network\n * @returns {Object} the mainnet corresponding to a testnet\n */\n\n\nfunction getMainnet(network) {\n  switch (network) {\n    case networks.bitcoin:\n    case networks.testnet:\n      return networks.bitcoin;\n\n    case networks.bitcoincash:\n    case networks.bitcoincashTestnet:\n      return networks.bitcoincash;\n\n    case networks.bitcoingold:\n      // FIXME(https://github.com/BitGo/bitgo-utxo-lib/issues/50): define bitcoingoldTest\n      return networks.bitcoingold;\n\n    case networks.bitcoinsv:\n    case networks.bitcoinsvTestnet:\n      return networks.bitcoinsv;\n\n    case networks.dash:\n    case networks.dashTest:\n      return networks.dash;\n\n    case networks.litecoin:\n    case networks.litecoinTest:\n      return networks.litecoin;\n\n    case networks.zcash:\n    case networks.zcashTest:\n      return networks.zcash;\n  }\n\n  throw new TypeError(\"invalid network\");\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a mainnet\n */\n\n\nfunction isMainnet(network) {\n  return getMainnet(network) === network;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is a testnet\n */\n\n\nfunction isTestnet(network) {\n  return getMainnet(network) !== network;\n}\n/**\n *\n * @param {Network} network\n * @param {Network} otherNetwork\n * @returns {boolean} true iff both networks are for the same coin\n */\n\n\nfunction isSameCoin(network, otherNetwork) {\n  return getMainnet(network) === getMainnet(otherNetwork);\n}\n\nvar mainnets = getNetworkList().filter(isMainnet);\nvar testnets = getNetworkList().filter(isTestnet);\n/**\n * Map where keys are mainnet networks and values are testnet networks\n * @type {Map<Network, Network[]>}\n */\n\nvar mainnetTestnetPairs = new Map(mainnets.map(function (m) {\n  return [m, testnets.filter(function (t) {\n    return getMainnet(t) === m;\n  })];\n}));\n/**\n * @param {Network} network\n * @returns {Network|undefined} - The testnet corresponding to a mainnet.\n *                               Returns undefined if a network has no testnet.\n */\n\nfunction getTestnet(network) {\n  if (isTestnet(network)) {\n    return network;\n  }\n\n  var testnets = mainnetTestnetPairs.get(network);\n\n  if (testnets === undefined) {\n    throw new Error(\"invalid argument\");\n  }\n\n  if (testnets.length === 0) {\n    return;\n  }\n\n  if (testnets.length === 1) {\n    return testnets[0];\n  }\n\n  throw new Error(\"more than one testnet for \".concat(getNetworkName(network)));\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network bitcoin or testnet\n */\n\n\nfunction isBitcoin(network) {\n  return getMainnet(network) === networks.bitcoin;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoincash or bitcoincashTestnet\n */\n\n\nfunction isBitcoinCash(network) {\n  return getMainnet(network) === networks.bitcoincash;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoingold\n */\n\n\nfunction isBitcoinGold(network) {\n  return getMainnet(network) === networks.bitcoingold;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is bitcoinsv or bitcoinsvTestnet\n */\n\n\nfunction isBitcoinSV(network) {\n  return getMainnet(network) === networks.bitcoinsv;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is dash or dashTest\n */\n\n\nfunction isDash(network) {\n  return getMainnet(network) === networks.dash;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is litecoin or litecoinTest\n */\n\n\nfunction isLitecoin(network) {\n  return getMainnet(network) === networks.litecoin;\n}\n/**\n * @param {Network} network\n * @returns {boolean} true iff network is zcash or zcashTest\n */\n\n\nfunction isZcash(network) {\n  return getMainnet(network) === networks.zcash;\n}\n/**\n * @param {Network} network\n * @returns {boolean} returns true iff network is any of the network stated in the argument\n */\n\n\nvar isValidNetwork = typeforce.oneOf(isBitcoin, isBitcoinCash, isBitcoinGold, isBitcoinSV, isDash, isLitecoin, isZcash);\nmodule.exports = {\n  BTC: networks.bitcoin.coin,\n  BCH: networks.bitcoincash.coin,\n  BSV: networks.bitcoinsv.coin,\n  BTG: networks.bitcoingold.coin,\n  DASH: networks.dash.coin,\n  LTC: networks.litecoin.coin,\n  ZEC: networks.zcash.coin,\n  getNetworkList: getNetworkList,\n  getNetworkName: getNetworkName,\n  getMainnet: getMainnet,\n  isMainnet: isMainnet,\n  getTestnet: getTestnet,\n  isTestnet: isTestnet,\n  isSameCoin: isSameCoin,\n  isBitcoin: isBitcoin,\n  isBitcoinCash: isBitcoinCash,\n  isBitcoinGold: isBitcoinGold,\n  isBitcoinSV: isBitcoinSV,\n  isDash: isDash,\n  isLitecoin: isLitecoin,\n  isZcash: isZcash,\n  isValidNetwork: isValidNetwork,\n\n  /**\n   * @deprecated: use isValidNetwork\n   */\n  isValidCoin: isValidNetwork\n};","map":null,"metadata":{},"sourceType":"script"}