{"ast":null,"code":"var BigInteger = require('bigi');\n\nvar ECPair = require('../ecpair');\n/**\n * Create an ECPair from the raw private key bytes\n * @param {Buffer} buffer - Private key for the ECPair. Must be exactly 32 bytes.\n * @param {Object} [network] - Network for the ECPair. Defaults to bitcoin.\n * @return {ECPair}\n */\n\n\nfunction privateKeyBufferToECPair(buffer, network) {\n  if (!Buffer.isBuffer(buffer) || buffer.length !== 32) {\n    throw new Error('invalid private key buffer');\n  }\n\n  var d = BigInteger.fromBuffer(buffer);\n  return new ECPair(d, null, {\n    network: network\n  });\n}\n/**\n * Get the private key as a 32 bytes buffer. If it is smaller than 32 bytes, pad it with zeros\n * @param {ECPair} ecPair\n * @return {Buffer} 32 bytes\n */\n\n\nfunction privateKeyBufferFromECPair(ecPair) {\n  if (!(ecPair instanceof ECPair)) {\n    throw new TypeError(\"invalid argument ecpair\");\n  }\n\n  if (!ecPair.d) throw new Error('Missing private key');\n  return ecPair.d.toBuffer(32);\n}\n\nmodule.exports = {\n  privateKeyBufferToECPair: privateKeyBufferToECPair,\n  privateKeyBufferFromECPair: privateKeyBufferFromECPair\n};","map":null,"metadata":{},"sourceType":"script"}