{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _BscConfigMap;\n\nimport { getRenNetworkDetails, RenNetwork } from \"@renproject/interfaces\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { EthereumClass } from \"./ethereum\";\nimport { addressIsValid } from \"./utils\";\nexport var renBscTestnet = {\n  name: \"BSC Testnet\",\n  chain: \"bscTestnet\",\n  isTestnet: true,\n  chainLabel: \"BSC Testnet\",\n  networkID: 97,\n  infura: \"https://data-seed-prebsc-1-s1.binance.org:8545\",\n  // etherscan: \"https://explorer.binance.org/smart-testnet\",\n  etherscan: \"https://testnet.bscscan.com\",\n  addresses: {\n    GatewayRegistry: \"0x838F881876f53a772D2F8E2f8aa2e4a996431495\",\n    BasicAdapter: \"0x7de1253A8da6620351ec477b38BdC6a55FCd0f85\"\n  }\n};\nexport var renBscDevnet = _objectSpread({}, renBscTestnet, {\n  addresses: {\n    GatewayRegistry: \"0x87e83f957a2F3A2E5Fe16d5C6B22e38FD28bdc06\",\n    BasicAdapter: \"0x105435a9b0f375B179e5e43A16228C04F01Fb2ee\"\n  }\n});\nexport var renBscMainnet = {\n  name: \"BSC Mainnet\",\n  chain: \"bscMainnet\",\n  isTestnet: false,\n  chainLabel: \"BSC Mainnet\",\n  networkID: 56,\n  infura: \"https://bsc-dataseed.binance.org/\",\n  etherscan: \"https://bscscan.com\",\n  addresses: {\n    GatewayRegistry: \"0x21C482f153D0317fe85C60bE1F7fa079019fcEbD\",\n    BasicAdapter: \"0xAC23817f7E9Ec7EB6B7889BDd2b50e04a44470c5\"\n  }\n};\nexport var BscConfigMap = (_BscConfigMap = {}, _defineProperty(_BscConfigMap, RenNetwork.MainnetVDot3, renBscMainnet), _defineProperty(_BscConfigMap, RenNetwork.TestnetVDot3, renBscTestnet), _defineProperty(_BscConfigMap, RenNetwork.DevnetVDot3, renBscDevnet), _BscConfigMap);\n\nvar resolveBSCNetwork = function resolveBSCNetwork(renNetwork) {\n  if (!renNetwork) {\n    return BscConfigMap[RenNetwork.MainnetVDot3];\n  }\n\n  if (renNetwork.addresses) {\n    return renNetwork;\n  } else {\n    var details = getRenNetworkDetails(renNetwork);\n    return details.isTestnet ? details.name === RenNetwork.DevnetVDot3 ? renBscDevnet : renBscTestnet : renBscMainnet;\n  }\n};\n\nexport var BinanceSmartChainClass =\n/*#__PURE__*/\nfunction (_EthereumClass) {\n  _inherits(BinanceSmartChainClass, _EthereumClass);\n\n  function BinanceSmartChainClass(web3Provider, renNetwork) {\n    var _this;\n\n    _classCallCheck(this, BinanceSmartChainClass);\n\n    // To be compatible with the Ethereum chain class, the first parameter\n    // is a web3Provider and the second the RenVM network. However,\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BinanceSmartChainClass).call(this, web3Provider, resolveBSCNetwork(renNetwork)));\n    _this.chain = BinanceSmartChainClass.chain;\n    _this.name = BinanceSmartChainClass.chain;\n    _this.legacyName = undefined;\n    _this.logRequestLimit = 5000;\n    _this.utils = utilsWithChainNetwork(BinanceSmartChainClass.utils, function () {\n      return _this.renNetworkDetails;\n    });\n\n    _this.initialize = function (renNetwork) {\n      _this.renNetworkDetails = _this.renNetworkDetails || BscConfigMap[getRenNetworkDetails(renNetwork).name];\n\n      if (!_this.renNetworkDetails) {\n        throw new Error(\"Unable to set \".concat(_this.name, \" network for RenVM network \").concat(getRenNetworkDetails(renNetwork).name, \". Please provide \").concat(_this.name, \" network details to \").concat(_this.name, \" constructor.\"));\n      }\n\n      return _assertThisInitialized(_assertThisInitialized(_this));\n    };\n\n    return _this;\n  }\n\n  return BinanceSmartChainClass;\n}(EthereumClass);\nBinanceSmartChainClass.chain = \"BinanceSmartChain\";\nBinanceSmartChainClass.utils = {\n  resolveChainNetwork: resolveBSCNetwork,\n  addressIsValid: addressIsValid,\n  addressExplorerLink: function addressExplorerLink(address, network) {\n    return \"\".concat((BinanceSmartChain.utils.resolveChainNetwork(network) || renBscMainnet).etherscan, \"/address/\").concat(address);\n  },\n  transactionExplorerLink: function transactionExplorerLink(transaction, network) {\n    return \"\".concat((BinanceSmartChain.utils.resolveChainNetwork(network) || renBscMainnet).etherscan, \"/tx/\").concat(transaction);\n  }\n}; // @dev Removes any static fields, except `utils`.\n\nexport var BinanceSmartChain = Callable(BinanceSmartChainClass);","map":null,"metadata":{},"sourceType":"module"}