{"ast":null,"code":"import _createClass from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { BlockCipherMode } from './cipher-core.js';\n\nvar incWord = function incWord(word) {\n  var _word = word;\n\n  if ((word >> 24 & 0xff) === 0xff) {\n    // overflow\n    var b1 = word >> 16 & 0xff;\n    var b2 = word >> 8 & 0xff;\n    var b3 = word & 0xff;\n\n    if (b1 === 0xff) {\n      // overflow b1\n      b1 = 0;\n\n      if (b2 === 0xff) {\n        b2 = 0;\n\n        if (b3 === 0xff) {\n          b3 = 0;\n        } else {\n          b3 += 1;\n        }\n      } else {\n        b2 += 1;\n      }\n    } else {\n      b1 += 1;\n    }\n\n    _word = 0;\n    _word += b1 << 16;\n    _word += b2 << 8;\n    _word += b3;\n  } else {\n    _word += 0x01 << 24;\n  }\n\n  return _word;\n};\n\nvar incCounter = function incCounter(counter) {\n  var _counter = counter;\n  _counter[0] = incWord(_counter[0]);\n\n  if (_counter[0] === 0) {\n    // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8\n    _counter[1] = incWord(_counter[1]);\n  }\n\n  return _counter;\n};\n/** @preserve\n * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n * derived from CryptoJS.mode.CTR\n * Jan Hruby jhruby.web@gmail.com\n */\n\n\nexport var CTRGladman =\n/*#__PURE__*/\nfunction (_BlockCipherMode) {\n  _inherits(CTRGladman, _BlockCipherMode);\n\n  function CTRGladman() {\n    _classCallCheck(this, CTRGladman);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CTRGladman).apply(this, arguments));\n  }\n\n  return CTRGladman;\n}(BlockCipherMode);\n\nCTRGladman.Encryptor =\n/*#__PURE__*/\nfunction (_CTRGladman) {\n  _inherits(_class, _CTRGladman);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));\n  }\n\n  _createClass(_class, [{\n    key: \"processBlock\",\n    value: function processBlock(words, offset) {\n      var _words = words; // Shortcuts\n\n      var cipher = this._cipher;\n      var blockSize = cipher.blockSize;\n      var iv = this._iv;\n      var counter = this._counter; // Generate keystream\n\n      if (iv) {\n        this._counter = iv.slice(0);\n        counter = this._counter; // Remove IV for subsequent blocks\n\n        this._iv = undefined;\n      }\n\n      incCounter(counter);\n      var keystream = counter.slice(0);\n      cipher.encryptBlock(keystream, 0); // Encrypt\n\n      for (var i = 0; i < blockSize; i += 1) {\n        _words[offset + i] ^= keystream[i];\n      }\n    }\n  }]);\n\n  return _class;\n}(CTRGladman);\n\nCTRGladman.Decryptor = CTRGladman.Encryptor;","map":null,"metadata":{},"sourceType":"module"}