{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subscribeToConfirmations = void 0;\n\nvar retry_1 = require(\"./retry\");\n\nexports.subscribeToConfirmations = function (promiEvent, cancelled, getConfirmations) {\n  var mutex;\n\n  var watchForConfirmations =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var lock, confirmations, newConfirmations;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              lock = Symbol();\n              mutex = lock; // Yield to task manager to let the event subscription finish\n\n              _context.next = 4;\n              return retry_1.sleep(0);\n\n            case 4:\n              confirmations = 0;\n\n            case 5:\n              if (!(!cancelled() && watchingConfirmations && mutex === lock)) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.prev = 6;\n              _context.next = 9;\n              return getConfirmations();\n\n            case 9:\n              newConfirmations = _context.sent;\n\n              if (newConfirmations > confirmations) {\n                confirmations = newConfirmations;\n                promiEvent.emit(\"confirmation\", confirmations);\n              }\n\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](6);\n              console.error(_context.t0);\n\n            case 16:\n              _context.next = 18;\n              return retry_1.sleep(5000);\n\n            case 18:\n              _context.next = 5;\n              break;\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 13]]);\n    }));\n\n    return function watchForConfirmations() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var watchingConfirmations = 0;\n  promiEvent.on(\"newListener\", function (eventName) {\n    if (eventName === \"confirmation\") {\n      watchingConfirmations++;\n\n      if (watchingConfirmations === 1) {\n        watchForConfirmations();\n      }\n    }\n  });\n  promiEvent.on(\"removeListener\", function (eventName) {\n    if (eventName === \"confirmation\") {\n      watchingConfirmations--;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}