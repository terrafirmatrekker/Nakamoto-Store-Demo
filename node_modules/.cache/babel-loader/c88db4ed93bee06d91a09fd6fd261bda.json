{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useEffect, useRef, useState } from 'react';\nimport { isActorWithState } from './useActor';\nimport { getServiceSnapshot } from './useService';\n\nfunction isService(actor) {\n  return 'state' in actor && 'machine' in actor;\n}\n\nvar defaultCompare = function defaultCompare(a, b) {\n  return a === b;\n};\n\nvar defaultGetSnapshot = function defaultGetSnapshot(a) {\n  return isService(a) ? getServiceSnapshot(a) : isActorWithState(a) ? a.state : undefined;\n};\n\nexport function useSelector(actor, selector, compare, getSnapshot) {\n  if (compare === void 0) {\n    compare = defaultCompare;\n  }\n\n  if (getSnapshot === void 0) {\n    getSnapshot = defaultGetSnapshot;\n  }\n\n  var _a = __read(useState(function () {\n    return selector(getSnapshot(actor));\n  }), 2),\n      selected = _a[0],\n      setSelected = _a[1];\n\n  var selectedRef = useRef(selected);\n  useEffect(function () {\n    var updateSelectedIfChanged = function updateSelectedIfChanged(nextSelected) {\n      if (!compare(selectedRef.current, nextSelected)) {\n        setSelected(nextSelected);\n        selectedRef.current = nextSelected;\n      }\n    };\n\n    var initialSelected = selector(getSnapshot(actor));\n    updateSelectedIfChanged(initialSelected);\n    var sub = actor.subscribe(function (emitted) {\n      var nextSelected = selector(emitted);\n      updateSelectedIfChanged(nextSelected);\n    });\n    return function () {\n      return sub.unsubscribe();\n    };\n  }, [selector, compare]);\n  return selected;\n}","map":null,"metadata":{},"sourceType":"module"}