{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { retryNTimes, SECONDS } from \"@renproject/utils\";\nimport { DepositStatus } from \"./lockAndMint\";\n/**\n * See [[RenJS.defaultDepositHandler]].\n */\n\nvar createDepositHandler = function createDepositHandler() {\n  var retries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n\n  var fn =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(deposit) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(deposit.status !== DepositStatus.Submitted)) {\n                _context4.next = 16;\n                break;\n              }\n\n              _context4.t0 = deposit.status;\n              _context4.next = _context4.t0 === DepositStatus.Detected ? 4 : _context4.t0 === DepositStatus.Confirmed ? 7 : _context4.t0 === DepositStatus.Signed ? 10 : _context4.t0 === DepositStatus.Reverted ? 13 : 14;\n              break;\n\n            case 4:\n              _context4.next = 6;\n              return retryNTimes(\n              /*#__PURE__*/\n              _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        deposit._state.logger.log(\"Calling .confirmed\");\n\n                        _context.next = 3;\n                        return deposit.confirmed().on(\"target\", function (target) {\n                          deposit._state.logger.log(\"Waiting for \".concat(target, \" confirmations\"));\n                        }).on(\"confirmation\", function (confs, target) {\n                          deposit._state.logger.log(\"\".concat(confs, \"/\").concat(target, \" confirmations\"));\n                        });\n\n                      case 3:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              })), retries, 10 * SECONDS, deposit._state.logger);\n\n            case 6:\n              return _context4.abrupt(\"break\", 14);\n\n            case 7:\n              _context4.next = 9;\n              return retryNTimes(\n              /*#__PURE__*/\n              _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2() {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.prev = 0;\n\n                        deposit._state.logger.log(\"Calling .signed\");\n\n                        _context2.next = 4;\n                        return deposit.signed().on(\"txHash\", function (status) {\n                          deposit._state.logger.log(\"RenVM hash: \".concat(status));\n                        }).on(\"status\", function (status) {\n                          deposit._state.logger.log(\"status: \".concat(status));\n                        });\n\n                      case 4:\n                        _context2.next = 11;\n                        break;\n\n                      case 6:\n                        _context2.prev = 6;\n                        _context2.t0 = _context2[\"catch\"](0);\n\n                        if (!(deposit.status === DepositStatus.Reverted)) {\n                          _context2.next = 10;\n                          break;\n                        }\n\n                        return _context2.abrupt(\"return\");\n\n                      case 10:\n                        throw _context2.t0;\n\n                      case 11:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[0, 6]]);\n              })), retries, 10 * SECONDS, deposit._state.logger);\n\n            case 9:\n              return _context4.abrupt(\"break\", 14);\n\n            case 10:\n              _context4.next = 12;\n              return retryNTimes(\n              /*#__PURE__*/\n              _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee3() {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _context3.prev = 0;\n\n                        deposit._state.logger.log(\"Calling .mint\");\n\n                        _context3.next = 4;\n                        return deposit.mint().on(\"transactionHash\", function (txHash) {\n                          deposit._state.logger.log(\"txHash: \".concat(deposit.params.to.utils.transactionExplorerLink ? deposit.params.to.utils.transactionExplorerLink(txHash) || String(txHash) : String(txHash)));\n                        });\n\n                      case 4:\n                        _context3.next = 13;\n                        break;\n\n                      case 6:\n                        _context3.prev = 6;\n                        _context3.t0 = _context3[\"catch\"](0);\n\n                        if (!/(execution reverted)|(Transaction has been reverted)/.exec(_context3.t0.message || String(_context3.t0))) {\n                          _context3.next = 12;\n                          break;\n                        }\n\n                        deposit.status = DepositStatus.Reverted;\n                        deposit.revertReason = _context3.t0.message || String(_context3.t0);\n                        return _context3.abrupt(\"return\");\n\n                      case 12:\n                        throw _context3.t0;\n\n                      case 13:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3, null, [[0, 6]]);\n              })), retries, 10 * SECONDS, deposit._state.logger);\n\n            case 12:\n              return _context4.abrupt(\"break\", 14);\n\n            case 13:\n              throw new Error(\"RenVM transaction reverted\".concat(deposit.revertReason ? \": \" + deposit.revertReason : \"\"));\n\n            case 14:\n              _context4.next = 0;\n              break;\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function fn(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  fn.withRetries = function (newRetries) {\n    return createDepositHandler(newRetries);\n  };\n\n  return fn;\n};\n/**\n * See [[RenJS.defaultDepositHandler]].\n */\n\n\nexport var defaultDepositHandler = createDepositHandler();","map":null,"metadata":{},"sourceType":"module"}