{"ast":null,"code":"var cryptoUtils = require('./crypto/utils');\n\nvar cnBase58 = require('./crypto/cnBase58');\n\nvar DEFAULT_NETWORK_TYPE = 'prod';\nvar addressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{95}$');\nvar integratedAddressRegTest = new RegExp('^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]{106}$');\n\nfunction validateNetwork(decoded, currency, networkType, addressType) {\n  var network = currency.addressTypes;\n\n  if (addressType == 'integrated') {\n    network = currency.iAddressTypes;\n  }\n\n  switch (networkType) {\n    case 'prod':\n      return parseInt(decoded.substr(0, 2), 16) == network.prod[0];\n\n    case 'testnet':\n      return parseInt(decoded.substr(0, 2), 16) == network.testnet[0];\n\n    case 'both':\n      return parseInt(decoded.substr(0, 2), 16) == network.prod[0] || parseInt(decoded.substr(0, 2), 16) == network.testnet[0];\n\n    default:\n      return false;\n  }\n}\n\nfunction hextobin(hex) {\n  if (hex.length % 2 !== 0) return null;\n  var res = new Uint8Array(hex.length / 2);\n\n  for (var i = 0; i < hex.length / 2; ++i) {\n    res[i] = parseInt(hex.slice(i * 2, i * 2 + 2), 16);\n  }\n\n  return res;\n}\n\nmodule.exports = {\n  isValidAddress: function isValidAddress(address, currency, networkType) {\n    networkType = networkType || DEFAULT_NETWORK_TYPE;\n    var addressType = 'standard';\n\n    if (!addressRegTest.test(address)) {\n      if (integratedAddressRegTest.test(address)) {\n        addressType = 'integrated';\n      } else {\n        return false;\n      }\n    }\n\n    var decodedAddrStr = cnBase58.decode(address);\n    if (!decodedAddrStr) return false;\n    if (!validateNetwork(decodedAddrStr, currency, networkType, addressType)) return false;\n    var addrChecksum = decodedAddrStr.slice(-8);\n    var hashChecksum = cryptoUtils.keccak256Checksum(hextobin(decodedAddrStr.slice(0, -8)));\n    return addrChecksum === hashChecksum;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}