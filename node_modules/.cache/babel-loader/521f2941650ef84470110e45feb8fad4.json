{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Blockstream = void 0;\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar utxo_1 = require(\"../../lib/utxo\");\n\nvar timeout_1 = require(\"./timeout\");\n\nvar fetchUTXO = function fetchUTXO(testnet) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(txHash, vOut) {\n        var apiUrl, utxo, heightResponse, confirmations;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                apiUrl = \"https://blockstream.info/\".concat(testnet ? \"testnet/\" : \"\", \"api\");\n                _context.next = 3;\n                return axios_1.default.get(\"\".concat(apiUrl, \"/tx/\").concat(txHash), {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 3:\n                utxo = _context.sent.data;\n                _context.next = 6;\n                return axios_1.default.get(\"\".concat(apiUrl, \"/blocks/tip/height\"), {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 6:\n                heightResponse = _context.sent.data;\n                confirmations = utxo.status.confirmed ? Math.max(1 + parseInt(heightResponse, 10) - utxo.status.block_height, 0) : 0;\n                return _context.abrupt(\"return\", {\n                  txHash: txHash,\n                  amount: utxo.vout[vOut].value,\n                  vOut: vOut,\n                  confirmations: confirmations\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar fetchConfirmations = function fetchConfirmations(testnet) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(txHash) {\n        var apiUrl, utxo, heightResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                apiUrl = \"https://blockstream.info/\".concat(testnet ? \"testnet/\" : \"\", \"api\");\n                _context2.next = 3;\n                return axios_1.default.get(\"\".concat(apiUrl, \"/tx/\").concat(txHash), {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 3:\n                utxo = _context2.sent.data;\n\n                heightResponse = function heightResponse() {\n                  return axios_1.default.get(\"\".concat(apiUrl, \"/blocks/tip/height\"), {\n                    timeout: timeout_1.DEFAULT_TIMEOUT\n                  });\n                };\n\n                if (!utxo.status.confirmed) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.t1 = Math;\n                _context2.t2 = parseInt;\n                _context2.next = 10;\n                return heightResponse();\n\n              case 10:\n                _context2.t3 = _context2.sent.data;\n                _context2.t4 = (0, _context2.t2)(_context2.t3, 10);\n                _context2.t5 = 1 + _context2.t4;\n                _context2.t6 = utxo.status.block_height;\n                _context2.t7 = _context2.t5 - _context2.t6;\n                _context2.t0 = _context2.t1.max.call(_context2.t1, _context2.t7, 0);\n                _context2.next = 19;\n                break;\n\n              case 18:\n                _context2.t0 = 0;\n\n              case 19:\n                return _context2.abrupt(\"return\", _context2.t0);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar fetchUTXOs = function fetchUTXOs(testnet) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(address, confirmations) {\n        var apiUrl, response, heightResponse;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                apiUrl = \"https://blockstream.info/\".concat(testnet ? \"testnet/\" : \"\", \"api\");\n                _context3.next = 3;\n                return axios_1.default.get(\"\".concat(apiUrl, \"/address/\").concat(address, \"/utxo\"), {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 3:\n                response = _context3.sent;\n                _context3.next = 6;\n                return axios_1.default.get(\"\".concat(apiUrl, \"/blocks/tip/height\"), {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 6:\n                heightResponse = _context3.sent;\n                return _context3.abrupt(\"return\", response.data.map(function (utxo) {\n                  return {\n                    txHash: utxo.txid,\n                    amount: utxo.value,\n                    vOut: utxo.vout,\n                    confirmations: utxo.status.confirmed ? 1 + parseInt(heightResponse.data, 10) - utxo.status.block_height : 0\n                  };\n                }).filter(function (utxo) {\n                  return confirmations === 0 || utxo.confirmations >= confirmations;\n                }).sort(utxo_1.sortUTXOs));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; // const fetchSpentTXs = (testnet: boolean) => async (\n//     address: string,\n//     confirmations: number\n// ): Promise<readonly UTXO[]> => {\n//     const apiUrl = `https://blockstream.info/${testnet ? \"testnet/\" : \"\"}api`;\n//     const response = await axios.get<ReadonlyArray<BlockstreamUTXO>>(\n//         `${apiUrl}/address/${address}/txs`,\n//         { timeout: DEFAULT_TIMEOUT }\n//     );\n//     const heightResponse = await axios.get<string>(\n//         `${apiUrl}/blocks/tip/height`,\n//         { timeout: DEFAULT_TIMEOUT }\n//     );\n//     return response.data\n//         .map((utxo) => ({\n//             txHash: utxo.txid,\n//             amount: utxo.value,\n//             vOut: utxo.vout,\n//             confirmations: utxo.status.confirmed\n//                 ? 1 +\n//                   parseInt(heightResponse.data, 10) -\n//                   utxo.status.block_height\n//                 : 0,\n//         }))\n//         .filter(\n//             (utxo) => confirmations === 0 || utxo.confirmations >= confirmations\n//         )\n//         .sort(sortUTXOs);\n// };\n\n\nvar broadcastTransaction = function broadcastTransaction(testnet) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(txHex) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios_1.default.post(\"https://blockstream.info/\".concat(testnet ? \"testnet/\" : \"\", \"api/tx\"), txHex, {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 2:\n                response = _context4.sent;\n                return _context4.abrupt(\"return\", response.data);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x6) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexports.Blockstream = {\n  fetchUTXO: fetchUTXO,\n  fetchUTXOs: fetchUTXOs,\n  fetchConfirmations: fetchConfirmations,\n  broadcastTransaction: broadcastTransaction\n};","map":null,"metadata":{},"sourceType":"script"}