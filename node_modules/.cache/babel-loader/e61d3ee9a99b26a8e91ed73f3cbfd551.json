{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUTXOs = exports.fixUTXOs = exports.fixUTXO = exports.fixValue = exports.sortUTXOs = void 0;\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n/**\n * sortUTXOs compares two UTXOs by amount, then confirmations and then hash.\n *\n * @example\n * sortUTXOs({amount: 1, confirmations: 1}, {amount: 2, confirmations: 0});\n * // -1, representing that the first parameter should be ordered first.\n *\n * @returns a negative value to represent that a should come before b or a\n * positive value to represent that b should come before a.\n */\n\n\nexports.sortUTXOs = function (a, b) {\n  // Sort greater values first\n  if (a.amount !== b.amount) {\n    return b.amount - a.amount;\n  } // Sort older UTXOs first\n\n\n  if (a.confirmations !== b.confirmations) {\n    return a.confirmations - b.confirmations;\n  }\n\n  return a.txHash <= b.txHash ? -1 : 1;\n};\n/**\n * fixValue turns a readable value, e.g. `0.0001` BTC, to the value in the smallest\n * unit, e.g. `10000` sats.\n *\n * @example\n * fixValue(0.0001, 8) = 10000;\n *\n * @param value Value in the readable representation, e.g. `0.0001` BTC.\n * @param decimals The number of decimals to shift by, e.g. 8.\n */\n\n\nexports.fixValue = function (value, decimals) {\n  return new bignumber_js_1.default(value).multipliedBy(new bignumber_js_1.default(10).exponentiatedBy(decimals)).decimalPlaces(0).toNumber();\n};\n/**\n * fixUTXO calls {{fixValue}} on the value of the UTXO.\n */\n\n\nexports.fixUTXO = function (utxo, decimals) {\n  return Object.assign(Object.assign({}, utxo), {\n    amount: exports.fixValue(utxo.amount, decimals)\n  });\n};\n/**\n * fixUTXOs maps over an array of UTXOs and calls {{fixValue}}.\n */\n\n\nexports.fixUTXOs = function (utxos, decimals) {\n  return utxos.map(function (utxo) {\n    return exports.fixUTXO(utxo, decimals);\n  });\n};\n/**\n * Retrieves UTXOs for a BTC, ZEC or BCH address.\n *\n * @param network The Ren Network object\n * @param currencyName \"BTC\", \"ZEC\" or \"BCH\"\n *\n * @param address The BTC, ZEC or BCH address to retrieve the UTXOS for\n * @param confirmations Restrict UTXOs to having at least this many\n *        confirmations. If confirmations is 0, unconfirmed UTXOs are included.\n * @param endpoint An offset to allow trying different endpoints first, in case\n * o      one is out of sync.\n */\n\n\nexports.getUTXOs = function (testnet, currencyName, endpoints) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(address, confirmations) {\n        var endpoint,\n            firstError,\n            i,\n            utxos,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                endpoint = _args.length > 2 && _args[2] !== undefined ? _args[2] : 0;\n                i = 0;\n\n              case 2:\n                if (!(i < endpoints.length)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.prev = 3;\n                _context.next = 6;\n                return endpoints[(i + endpoint) % endpoints.length]();\n\n              case 6:\n                utxos = _context.sent;\n                return _context.abrupt(\"return\", utxos.filter(function (utxo) {\n                  return utxo.confirmations >= confirmations;\n                }));\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](3);\n                firstError = firstError || _context.t0;\n\n              case 13:\n                i++;\n                _context.next = 2;\n                break;\n\n              case 16:\n                throw firstError || new Error(\"No endpoints found for retrieving \".concat(currencyName, \" UTXOs.\"));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 10]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":null,"metadata":{},"sourceType":"script"}