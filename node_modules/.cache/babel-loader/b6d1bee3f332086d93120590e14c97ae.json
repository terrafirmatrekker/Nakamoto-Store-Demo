{"ast":null,"code":"\"use strict\"; // Modified from web3-core-method\n\nvar _classCallCheck = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forwardEvents = exports.newPromiEvent = void 0;\n/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file PromiEvent.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>, Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n// tslint:disable: no-any\n\nvar events_1 = require(\"events\");\n\nvar InternalPromiEvent =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function InternalPromiEvent() {\n    var _this = this;\n\n    _classCallCheck(this, InternalPromiEvent);\n\n    // tslint:disable-next-line: promise-must-complete\n    this.promise = new Promise(function (resolve, reject) {\n      _this.resolve = resolve;\n      _this.reject = reject;\n    });\n    this.eventEmitter = new events_1.EventEmitter();\n    return new Proxy(this, {\n      get: this.proxyHandler\n    });\n  }\n  /**\n   * Proxy handler to call the promise or eventEmitter methods\n   */\n\n\n  _createClass(InternalPromiEvent, [{\n    key: \"proxyHandler\",\n    value: function proxyHandler(target, name) {\n      if (name === \"resolve\" || name === \"reject\") {\n        return target[name];\n      }\n\n      if (name === \"then\") {\n        return target.promise.then.bind(target.promise);\n      }\n\n      if (name === \"catch\") {\n        return target.promise.catch.bind(target.promise);\n      }\n\n      if (target.eventEmitter[name]) {\n        return target.eventEmitter[name];\n      }\n    }\n  }]);\n\n  return InternalPromiEvent;\n}();\n\nexports.newPromiEvent = function () {\n  return new InternalPromiEvent();\n};\n\nexports.forwardEvents = function (src, dest) {\n  var filterFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (_name) {\n    return true;\n  };\n  // const forwardEmitterNewListener = (eventName: string, listener: (...args: any[]) => void) => {\n  //     if (filterFn(eventName) && listener.name.indexOf(\"__forward_emitter_\") !== 0) {\n  //         console.log(`Forwarding ${eventName} Listener:`);\n  //         console.log(listener);\n  //         src.on(eventName, listener);\n  //         src.on(\"transactionHash\", (txHash) => { console.log(`Got transaction hash on src`); });\n  //     } else {\n  //         console.log(\"Can't forward PromiEvent event!\");\n  //     }\n  // };\n  // const forwardEmitterRemoveListener = (eventName: string, listener: (...args: any[]) => void) => {\n  //     src.removeListener(eventName, listener);\n  // };\n  // // Listeners bound to the destination emitter should be bound to the source emitter.\n  // dest.on(\"newListener\", forwardEmitterNewListener);\n  // // When a listener is removed from the destination emitter, remove it from the source emitter\n  // // (otherwise it will continue to be called).\n  // dest.on(\"removeListener\", forwardEmitterRemoveListener);\n  // Until the above is fixed, we manually forward each event name:\n  src.on(\"transactionHash\", function (eventReceipt) {\n    dest.emit(\"transactionHash\", eventReceipt);\n  });\n  src.on(\"receipt\", function (eventReceipt) {\n    dest.emit(\"receipt\", eventReceipt);\n  });\n  src.on(\"confirmation\", function (confNumber, eventReceipt) {\n    dest.emit(\"confirmation\", confNumber, eventReceipt);\n  });\n  src.on(\"error\", function (error) {\n    dest.emit(\"error\", error);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}