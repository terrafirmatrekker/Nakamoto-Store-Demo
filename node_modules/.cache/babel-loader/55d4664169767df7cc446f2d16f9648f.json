{"ast":null,"code":"import _get from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { StreamCipher } from './cipher-core.js';\n\nfunction generateKeystreamWord() {\n  // Shortcuts\n  var S = this._S;\n  var i = this._i;\n  var j = this._j; // Generate keystream word\n\n  var keystreamWord = 0;\n\n  for (var n = 0; n < 4; n += 1) {\n    i = (i + 1) % 256;\n    j = (j + S[i]) % 256; // Swap\n\n    var t = S[i];\n    S[i] = S[j];\n    S[j] = t;\n    keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;\n  } // Update counters\n\n\n  this._i = i;\n  this._j = j;\n  return keystreamWord;\n}\n/**\n * RC4 stream cipher algorithm.\n */\n\n\nexport var RC4Algo =\n/*#__PURE__*/\nfunction (_StreamCipher) {\n  _inherits(RC4Algo, _StreamCipher);\n\n  function RC4Algo() {\n    _classCallCheck(this, RC4Algo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RC4Algo).apply(this, arguments));\n  }\n\n  _createClass(RC4Algo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      // Shortcuts\n      var key = this._key;\n      var keyWords = key.words;\n      var keySigBytes = key.sigBytes; // Init sbox\n\n      this._S = [];\n      var S = this._S;\n\n      for (var i = 0; i < 256; i += 1) {\n        S[i] = i;\n      } // Key setup\n\n\n      for (var _i = 0, j = 0; _i < 256; _i += 1) {\n        var keyByteIndex = _i % keySigBytes;\n        var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;\n        j = (j + S[_i] + keyByte) % 256; // Swap\n\n        var t = S[_i];\n        S[_i] = S[j];\n        S[j] = t;\n      } // Counters\n\n\n      this._j = 0;\n      this._i = this._j;\n    }\n  }, {\n    key: \"_doProcessBlock\",\n    value: function _doProcessBlock(M, offset) {\n      var _M = M;\n      _M[offset] ^= generateKeystreamWord.call(this);\n    }\n  }]);\n\n  return RC4Algo;\n}(StreamCipher);\nRC4Algo.keySize = 256 / 32;\nRC4Algo.ivSize = 0;\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n */\n\nexport var RC4 = StreamCipher._createHelper(RC4Algo);\n/**\n * Modified RC4 stream cipher algorithm.\n */\n\nexport var RC4DropAlgo =\n/*#__PURE__*/\nfunction (_RC4Algo) {\n  _inherits(RC4DropAlgo, _RC4Algo);\n\n  function RC4DropAlgo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RC4DropAlgo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RC4DropAlgo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    /**\n     * Configuration options.\n     *\n     * @property {number} drop The number of keystream words to drop. Default 192\n     */\n\n    Object.assign(_this.cfg, {\n      drop: 192\n    });\n    return _this;\n  }\n\n  _createClass(RC4DropAlgo, [{\n    key: \"_doReset\",\n    value: function _doReset() {\n      _get(_getPrototypeOf(RC4DropAlgo.prototype), \"_doReset\", this).call(this); // Drop\n\n\n      for (var i = this.cfg.drop; i > 0; i -= 1) {\n        generateKeystreamWord.call(this);\n      }\n    }\n  }]);\n\n  return RC4DropAlgo;\n}(RC4Algo);\n/**\n * Shortcut functions to the cipher's object interface.\n *\n * @example\n *\n *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n */\n\nexport var RC4Drop = StreamCipher._createHelper(RC4DropAlgo);","map":null,"metadata":{},"sourceType":"module"}