{"ast":null,"code":"import { WordArray } from './core.js';\n\nvar parseLoop = function parseLoop(base64Str, base64StrLength, reverseMap) {\n  var words = [];\n  var nBytes = 0;\n\n  for (var i = 0; i < base64StrLength; i += 1) {\n    if (i % 4) {\n      var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;\n      var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;\n      var bitsCombined = bits1 | bits2;\n      words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;\n      nBytes += 1;\n    }\n  }\n\n  return WordArray.create(words, nBytes);\n};\n/**\n * Base64 encoding strategy.\n */\n\n\nexport var Base64 = {\n  /**\n   * Converts a word array to a Base64 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Base64 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const base64String = CryptoJS.enc.Base64.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes;\n    var map = this._map; // Clamp excess bits\n\n    wordArray.clamp(); // Convert\n\n    var base64Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 3) {\n      var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;\n      var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;\n      var triplet = byte1 << 16 | byte2 << 8 | byte3;\n\n      for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j += 1) {\n        base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));\n      }\n    } // Add padding\n\n\n    var paddingChar = map.charAt(64);\n\n    if (paddingChar) {\n      while (base64Chars.length % 4) {\n        base64Chars.push(paddingChar);\n      }\n    }\n\n    return base64Chars.join('');\n  },\n\n  /**\n   * Converts a Base64 string to a word array.\n   *\n   * @param {string} base64Str The Base64 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Base64.parse(base64String);\n   */\n  parse: function parse(base64Str) {\n    // Shortcuts\n    var base64StrLength = base64Str.length;\n    var map = this._map;\n    var reverseMap = this._reverseMap;\n\n    if (!reverseMap) {\n      this._reverseMap = [];\n      reverseMap = this._reverseMap;\n\n      for (var j = 0; j < map.length; j += 1) {\n        reverseMap[map.charCodeAt(j)] = j;\n      }\n    } // Ignore padding\n\n\n    var paddingChar = map.charAt(64);\n\n    if (paddingChar) {\n      var paddingIndex = base64Str.indexOf(paddingChar);\n\n      if (paddingIndex !== -1) {\n        base64StrLength = paddingIndex;\n      }\n    } // Convert\n\n\n    return parseLoop(base64Str, base64StrLength, reverseMap);\n  },\n  _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n};","map":null,"metadata":{},"sourceType":"module"}