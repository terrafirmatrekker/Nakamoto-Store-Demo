{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Base, WordArray } from './core.js';\nimport { SHA1Algo } from './sha1.js';\nimport { HMAC } from './hmac.js';\n/**\n * Password-Based Key Derivation Function 2 algorithm.\n */\n\nexport var PBKDF2Algo =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(PBKDF2Algo, _Base);\n\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.PBKDF2.create();\n   *     const kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n   */\n  function PBKDF2Algo(cfg) {\n    var _this;\n\n    _classCallCheck(this, PBKDF2Algo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PBKDF2Algo).call(this));\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hasher to use. Default: SHA1\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n\n    _this.cfg = Object.assign(new Base(), {\n      keySize: 128 / 32,\n      hasher: SHA1Algo,\n      iterations: 1\n    }, cfg);\n    return _this;\n  }\n  /**\n   * Computes the Password-Based Key Derivation Function 2.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n\n\n  _createClass(PBKDF2Algo, [{\n    key: \"compute\",\n    value: function compute(password, salt) {\n      // Shortcut\n      var cfg = this.cfg; // Init HMAC\n\n      var hmac = HMAC.create(cfg.hasher, password); // Initial values\n\n      var derivedKey = WordArray.create();\n      var blockIndex = WordArray.create([0x00000001]); // Shortcuts\n\n      var derivedKeyWords = derivedKey.words;\n      var blockIndexWords = blockIndex.words;\n      var keySize = cfg.keySize,\n          iterations = cfg.iterations; // Generate key\n\n      while (derivedKeyWords.length < keySize) {\n        var block = hmac.update(salt).finalize(blockIndex);\n        hmac.reset(); // Shortcuts\n\n        var blockWords = block.words;\n        var blockWordsLength = blockWords.length; // Iterations\n\n        var intermediate = block;\n\n        for (var i = 1; i < iterations; i += 1) {\n          intermediate = hmac.finalize(intermediate);\n          hmac.reset(); // Shortcut\n\n          var intermediateWords = intermediate.words; // XOR intermediate with block\n\n          for (var j = 0; j < blockWordsLength; j += 1) {\n            blockWords[j] ^= intermediateWords[j];\n          }\n        }\n\n        derivedKey.concat(block);\n        blockIndexWords[0] += 1;\n      }\n\n      derivedKey.sigBytes = keySize * 4;\n      return derivedKey;\n    }\n  }]);\n\n  return PBKDF2Algo;\n}(Base);\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.PBKDF2(password, salt);\n *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n */\n\nexport var PBKDF2 = function PBKDF2(password, salt, cfg) {\n  return PBKDF2Algo.create(cfg).compute(password, salt);\n};","map":null,"metadata":{},"sourceType":"module"}