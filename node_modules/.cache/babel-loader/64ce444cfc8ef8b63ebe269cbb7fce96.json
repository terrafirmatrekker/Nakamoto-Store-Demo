{"ast":null,"code":"'use strict';\n\nvar BufferWriter = require('./bufferwriter');\n\nvar BufferReader = require('./bufferreader');\n\nvar BN = require('../crypto/bn');\n\nvar Varint = function Varint(buf) {\n  if (!(this instanceof Varint)) return new Varint(buf);\n\n  if (Buffer.isBuffer(buf)) {\n    this.buf = buf;\n  } else if (typeof buf === 'number') {\n    var num = buf;\n    this.fromNumber(num);\n  } else if (buf instanceof BN) {\n    var bn = buf;\n    this.fromBN(bn);\n  } else if (buf) {\n    var obj = buf;\n    this.set(obj);\n  }\n};\n\nVarint.prototype.set = function (obj) {\n  this.buf = obj.buf || this.buf;\n  return this;\n};\n\nVarint.prototype.fromString = function (str) {\n  this.set({\n    buf: Buffer.from(str, 'hex')\n  });\n  return this;\n};\n\nVarint.prototype.toString = function () {\n  return this.buf.toString('hex');\n};\n\nVarint.prototype.fromBuffer = function (buf) {\n  this.buf = buf;\n  return this;\n};\n\nVarint.prototype.fromBufferReader = function (br) {\n  this.buf = br.readVarintBuf();\n  return this;\n};\n\nVarint.prototype.fromBN = function (bn) {\n  this.buf = BufferWriter().writeVarintBN(bn).concat();\n  return this;\n};\n\nVarint.prototype.fromNumber = function (num) {\n  this.buf = BufferWriter().writeVarintNum(num).concat();\n  return this;\n};\n\nVarint.prototype.toBuffer = function () {\n  return this.buf;\n};\n\nVarint.prototype.toBN = function () {\n  return BufferReader(this.buf).readVarintBN();\n};\n\nVarint.prototype.toNumber = function () {\n  return BufferReader(this.buf).readVarintNum();\n};\n\nmodule.exports = Varint;","map":null,"metadata":{},"sourceType":"script"}