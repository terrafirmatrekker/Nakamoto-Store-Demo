{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\n\nvar JSUtil = require('./util/js');\n\nvar networks = [];\nvar networkMaps = {};\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\n\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\n\n\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n\n    for (var i = 0; i < networks.length; i++) {\n      var network = networks[i];\n\n      var filteredNet = _.pick(network, keys);\n\n      var netValues = _.values(filteredNet);\n\n      if (~netValues.indexOf(arg)) {\n        return network;\n      }\n    }\n\n    return undefined;\n  }\n\n  return networkMaps[arg];\n}\n/***\n * Derives an array from the given prefix to be used in the computation\n * of the address' checksum.\n *\n * @param {string} prefix Network prefix. E.g.: 'bitcoincash'.\n */\n\n\nfunction prefixToArray(prefix) {\n  var result = [];\n\n  for (var i = 0; i < prefix.length; i++) {\n    result.push(prefix.charCodeAt(i) & 31);\n  }\n\n  return result;\n}\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\n\n\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n  var indexBy = data.indexBy || Object.keys(data);\n\n  if (data.prefix) {\n    _.extend(network, {\n      prefix: data.prefix,\n      prefixArray: prefixToArray(data.prefix)\n    });\n  }\n\n  if (data.networkMagic) {\n    _.extend(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    _.extend(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    _.extend(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  networks.push(network);\n  indexNetworkBy(network, indexBy);\n  return network;\n}\n\nfunction indexNetworkBy(network, keys) {\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var networkValue = network[key];\n\n    if (!_.isUndefined(networkValue) && !_.isObject(networkValue)) {\n      networkMaps[networkValue] = network;\n    }\n  }\n}\n\nfunction unindexNetworkBy(network, values) {\n  for (var index = 0; index < values.length; index++) {\n    var value = values[index];\n\n    if (networkMaps[value] === network) {\n      delete networkMaps[value];\n    }\n  }\n}\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\n\n\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n\n  unindexNetworkBy(network, Object.keys(networkMaps));\n} // from https://github.com/Bitcoin-ABC/bitcoin-abc/blob/master/src/chainparams.cpp#L212\n\n\nvar dnsSeeds = ['seed.bitcoinabc.org', 'seed-abc.bitcoinforks.org', 'btccash-seeder.bitcoinunlimited.info', 'seeder.jasonbcox.com', 'seed.deadalnix.me', 'seed.bchd.cash'];\nvar liveNetwork = {\n  name: 'livenet',\n  alias: 'mainnet',\n  prefix: 'bitcoincash',\n  pubkeyhash: 28,\n  privatekey: 0x80,\n  scripthash: 40,\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xe3e1f3e8,\n  port: 8333,\n  dnsSeeds: dnsSeeds\n};\nvar testNetwork = {\n  name: 'testnet',\n  prefix: 'bchtest',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xf4e5f3f4,\n  port: 18333,\n  dnsSeeds: dnsSeeds\n};\nvar regtestNetwork = {\n  name: 'regtest',\n  prefix: 'bchreg',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394,\n  networkMagic: 0xdab5bffa,\n  port: 18444,\n  dnsSeeds: [],\n  indexBy: ['port', 'name', 'prefix', 'networkMagic']\n}; // Add configurable values for testnet/regtest\n\naddNetwork(testNetwork);\naddNetwork(regtestNetwork);\naddNetwork(liveNetwork);\nvar livenet = get('livenet');\nvar regtest = get('regtest');\nvar testnet = get('testnet');\n/**\n * @function\n * @deprecated\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\n\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n/**\n * @function\n * @deprecated\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\n\n\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n/**\n * @namespace Networks\n */\n\n\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  regtest: regtest,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":null,"metadata":{},"sourceType":"script"}