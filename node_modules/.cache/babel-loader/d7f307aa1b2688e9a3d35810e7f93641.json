{"ast":null,"code":"import _createClass from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { BlockCipherMode } from './cipher-core.js';\n\nfunction generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n  var _words = words;\n  var keystream; // Shortcut\n\n  var iv = this._iv; // Generate keystream\n\n  if (iv) {\n    keystream = iv.slice(0); // Remove IV for subsequent blocks\n\n    this._iv = undefined;\n  } else {\n    keystream = this._prevBlock;\n  }\n\n  cipher.encryptBlock(keystream, 0); // Encrypt\n\n  for (var i = 0; i < blockSize; i += 1) {\n    _words[offset + i] ^= keystream[i];\n  }\n}\n/**\n * Cipher Feedback block mode.\n */\n\n\nexport var CFB =\n/*#__PURE__*/\nfunction (_BlockCipherMode) {\n  _inherits(CFB, _BlockCipherMode);\n\n  function CFB() {\n    _classCallCheck(this, CFB);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CFB).apply(this, arguments));\n  }\n\n  return CFB;\n}(BlockCipherMode);\n\nCFB.Encryptor =\n/*#__PURE__*/\nfunction (_CFB) {\n  _inherits(_class, _CFB);\n\n  function _class() {\n    _classCallCheck(this, _class);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_class).apply(this, arguments));\n  }\n\n  _createClass(_class, [{\n    key: \"processBlock\",\n    value: function processBlock(words, offset) {\n      // Shortcuts\n      var cipher = this._cipher;\n      var blockSize = cipher.blockSize;\n      generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // Remember this block to use with next block\n\n      this._prevBlock = words.slice(offset, offset + blockSize);\n    }\n  }]);\n\n  return _class;\n}(CFB);\n\nCFB.Decryptor =\n/*#__PURE__*/\nfunction (_CFB2) {\n  _inherits(_class2, _CFB2);\n\n  function _class2() {\n    _classCallCheck(this, _class2);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_class2).apply(this, arguments));\n  }\n\n  _createClass(_class2, [{\n    key: \"processBlock\",\n    value: function processBlock(words, offset) {\n      // Shortcuts\n      var cipher = this._cipher;\n      var blockSize = cipher.blockSize; // Remember this block to use with next block\n\n      var thisBlock = words.slice(offset, offset + blockSize);\n      generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher); // This block becomes the previous block\n\n      this._prevBlock = thisBlock;\n    }\n  }]);\n\n  return _class2;\n}(CFB);","map":null,"metadata":{},"sourceType":"module"}