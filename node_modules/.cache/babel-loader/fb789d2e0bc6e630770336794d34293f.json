{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { createAddress, pubKeyScript as calculatePubKeyScript } from \"./script\";\nimport { Networks, Opcode, Script } from \"bitcore-lib\";\nimport { BitcoinBaseChain } from \"./base\";\nimport { validateAddress } from \"./utils\";\nimport { Blockstream } from \"./APIs/blockstream\";\nimport { Blockchair, BlockchairNetwork } from \"./APIs/blockchair\";\nimport { SoChain, SoChainNetwork } from \"./APIs/sochain\";\nimport base58 from \"bs58\";\n/**\n * The Bitcoin class adds support for the asset BTC.\n */\n\nexport var BitcoinClass =\n/*#__PURE__*/\nfunction (_BitcoinBaseChain) {\n  _inherits(BitcoinClass, _BitcoinBaseChain);\n\n  function BitcoinClass() {\n    var _this;\n\n    _classCallCheck(this, BitcoinClass);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BitcoinClass).apply(this, arguments));\n    _this.chain = BitcoinClass.chain;\n    _this.name = BitcoinClass.chain;\n    _this.legacyName = \"Btc\";\n    _this.asset = \"BTC\"; // APIs\n\n    _this.withDefaultAPIs = function (network) {\n      switch (network) {\n        case \"mainnet\":\n          // prettier-ignore\n          return _this.withAPI(Blockstream()).withAPI(Blockchair()).withAPI(SoChain(), {\n            priority: 15\n          });\n\n        case \"testnet\":\n          // prettier-ignore\n          return _this.withAPI(Blockstream({\n            testnet: true\n          })).withAPI(Blockchair(BlockchairNetwork.BITCOIN_TESTNET)).withAPI(SoChain(SoChainNetwork.BTCTEST), {\n            priority: 15\n          });\n\n        case \"regtest\":\n          // Will be supported when Electrum is added as an API.\n          throw new Error(\"Regtest is currently not supported.\");\n      }\n    };\n\n    _this.utils = utilsWithChainNetwork(BitcoinClass.utils, function () {\n      return _this.chainNetwork;\n    });\n    return _this;\n  }\n\n  return BitcoinClass;\n}(BitcoinBaseChain);\nBitcoinClass.chain = \"Bitcoin\"; // Asset\n\nBitcoinClass.asset = \"BTC\";\nBitcoinClass.utils = {\n  resolveChainNetwork: BitcoinBaseChain.utils.resolveChainNetwork,\n  p2shPrefix: {\n    mainnet: Buffer.from([0x05]),\n    testnet: Buffer.from([0xc4])\n  },\n  createAddress: createAddress(base58.encode, Networks, Opcode, Script),\n  calculatePubKeyScript: calculatePubKeyScript(Networks, Opcode, Script),\n  addressIsValid: function addressIsValid(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    return validateAddress(address, BitcoinBaseChain.asset, Bitcoin.utils.resolveChainNetwork(network));\n  },\n  addressExplorerLink: function addressExplorerLink(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n\n    switch (Bitcoin.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return BlockCypher.Address(BlockCypherNetwork.BitcoinMainnet, address);\n\n      case \"testnet\":\n        return BlockCypher.Address(BlockCypherNetwork.BitcoinTestnet, address);\n\n      case \"regtest\":\n        return undefined;\n    }\n  },\n  transactionExplorerLink: function transactionExplorerLink(tx) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    var txHash = typeof tx === \"string\" ? tx : tx.txHash;\n\n    switch (Bitcoin.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return BlockCypher.Transaction(BlockCypherNetwork.BitcoinMainnet, txHash);\n\n      case \"testnet\":\n        return BlockCypher.Transaction(BlockCypherNetwork.BitcoinTestnet, txHash);\n\n      case \"regtest\":\n        return undefined;\n    }\n  }\n};\nexport var Bitcoin = Callable(BitcoinClass);\nvar _ = Bitcoin; // Explorers ///////////////////////////////////////////////////////////////////\n\nexport var BlockCypherNetwork;\n\n(function (BlockCypherNetwork) {\n  BlockCypherNetwork[\"BitcoinMainnet\"] = \"btc\";\n  BlockCypherNetwork[\"BitcoinTestnet\"] = \"btc-testnet\";\n})(BlockCypherNetwork || (BlockCypherNetwork = {}));\n\nexport var BlockCypher = {\n  Address: function Address(network, address) {\n    return \"https://live.blockcypher.com/\".concat(network, \"/address/\").concat(address, \"/\");\n  },\n  Transaction: function Transaction(network, txHash) {\n    return \"https://live.blockcypher.com/\".concat(network, \"/tx/\").concat(txHash, \"/\");\n  }\n};","map":null,"metadata":{},"sourceType":"module"}