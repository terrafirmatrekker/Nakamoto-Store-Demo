{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { LogLevel, RenNetwork, SimpleLogger } from \"@renproject/interfaces\";\nimport { CombinedProvider } from \"@renproject/rpc\";\nimport { fromSmallestUnit, randomNonce, toSmallestUnit } from \"@renproject/utils\";\nimport { BurnAndRelease } from \"./burnAndRelease\";\nimport { defaultDepositHandler } from \"./defaultDepositHandler\";\nimport { LockAndMint } from \"./lockAndMint\";\n/**\n * This is the main exported class from `@renproject/ren`.\n *\n * ```typescript\n * import RenJS from \"@renproject/ren\";\n * ```\n *\n * By default, RenJS will connect to the RenVM mainnet network. To connect\n * to `testnet` or to configure a custom connection, RenJS takes an optional\n * provider object. See the [[constructor]] for more details.\n *\n * ```typescript\n * new RenJS(); // Same as `new RenJS(\"mainnet\");`\n * new RenJS(\"testnet\");\n * new RenJS(custom provider object);\n * ```\n *\n * It then exposes two main functions:\n * 1. [[lockAndMint]] - for transferring assets to Ethereum.\n * 2. [[burnAndRelease]] - for transferring assets out of Ethereum.\n *\n * Also see:\n * 1. [[getFees]] - for estimating the fees that will be incurred by minting or\n * burning.\n * 2. [[defaultDepositHandler]]\n *\n */\n\nvar RenJS =\n/**\n * Accepts the name of a network, or a network object.\n *\n * @param network Provide the name of a network - `\"mainnet\"` or `\"testnet\"` - or a network object.\n * @param providerOrConfig Provide a custom RPC provider, or provide RenJS configuration settings.\n */\nfunction RenJS(providerOrNetwork, config) {\n  var _this = this;\n\n  _classCallCheck(this, RenJS);\n\n  // const provider: string | Provider | undefined;\n  // let config: RenJSConfig | undefined;\n  // if (\n  //     providerOrConfig &&\n  //     (typeof providerOrConfig === \"string\" ||\n  //         (providerOrConfig as Provider).sendMessage)\n  // ) {\n  //     provider = providerOrConfig as string | Provider;\n  // } else if (providerOrConfig) {\n  //     config = providerOrConfig as RenJSConfig;\n  // }\n\n  /**\n   * @hidden\n   */\n  this.utils = RenJS.utils;\n\n  this.getFees =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(_ref) {\n      var asset, from, to, fees, mintFees, selector, lockFees, _mintFees, _selector, _lockFees, _mintFees2, burnFees;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              asset = _ref.asset, from = _ref.from, to = _ref.to;\n              _context.next = 3;\n              return from.assetIsSupported(asset);\n\n            case 3:\n              if (_context.sent) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error(\"Asset not supported by chain \".concat(from.name, \".\"));\n\n            case 5:\n              _context.next = 7;\n              return to.assetIsSupported(asset);\n\n            case 7:\n              if (_context.sent) {\n                _context.next = 9;\n                break;\n              }\n\n              throw new Error(\"Asset not supported by chain \".concat(to.name, \".\"));\n\n            case 9:\n              _context.next = 11;\n              return from.assetIsNative(asset);\n\n            case 11:\n              if (!_context.sent) {\n                _context.next = 22;\n                break;\n              }\n\n              _context.next = 14;\n              return to.getFees(asset);\n\n            case 14:\n              mintFees = _context.sent;\n              selector = _this.renVM.selector({\n                asset: asset,\n                from: from,\n                to: to\n              });\n              _context.next = 18;\n              return _this.renVM.estimateTransactionFee(selector, from);\n\n            case 18:\n              lockFees = _context.sent;\n              fees = _objectSpread({}, lockFees, mintFees);\n              _context.next = 42;\n              break;\n\n            case 22:\n              _context.next = 24;\n              return to.assetIsNative(asset);\n\n            case 24:\n              if (!_context.sent) {\n                _context.next = 35;\n                break;\n              }\n\n              _context.next = 27;\n              return from.getFees(asset);\n\n            case 27:\n              _mintFees = _context.sent;\n              _selector = _this.renVM.selector({\n                asset: asset,\n                from: from,\n                to: to\n              });\n              _context.next = 31;\n              return _this.renVM.estimateTransactionFee(_selector, to);\n\n            case 31:\n              _lockFees = _context.sent;\n              fees = _objectSpread({}, _lockFees, _mintFees);\n              _context.next = 42;\n              break;\n\n            case 35:\n              _context.next = 37;\n              return from.getFees(asset);\n\n            case 37:\n              _mintFees2 = _context.sent;\n              _context.next = 40;\n              return to.getFees(asset);\n\n            case 40:\n              burnFees = _context.sent;\n              fees = {\n                mint: _mintFees2.mint,\n                burn: burnFees.burn\n              };\n\n            case 42:\n              return _context.abrupt(\"return\", fees);\n\n            case 43:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * `lockAndMint` initiates the process of bridging an asset from its native\n   * chain to a host chain.\n   *\n   * See [[LockAndMintParams]] for all the options that can be set.\n   *\n   * Returns a [[LockAndMint]] object.\n   *\n   * Example initialization:\n   *\n   * ```js\n   * const lockAndMint = renJS.lockAndMint({\n   *     asset: \"BTC\",\n   *     from: Bitcoin(),\n   *     to: Ethereum(web3Provider).Account({\n   *         address: \"0x...\",\n   *     }),\n   * });\n   * ```\n   *\n   * @param params See [[LockAndMintParams]].\n   */\n\n\n  this.lockAndMint =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(params) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", new LockAndMint(_this.renVM, params, _this._config)._initialize());\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  /**\n   * `burnAndRelease` submits a burn log to RenVM.\n   * Returns a [[BurnAndRelease]] object.\n   */\n\n\n  this.burnAndRelease =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(params) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", new BurnAndRelease(_this.renVM, params, _this._config)._initialize());\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  this._config = config || {};\n  this._logger = config && config.logger || new SimpleLogger(config && config.logLevel || LogLevel.Error);\n  this._config.logger = this._logger; // Use provided provider, provider URL or default lightnode URL.\n\n  this.renVM = providerOrNetwork && typeof providerOrNetwork !== \"string\" && providerOrNetwork.sendMessage ? providerOrNetwork : new CombinedProvider( // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  providerOrNetwork || RenNetwork.Mainnet, this._logger);\n}; // /**\n//  * [STATIC] `Tokens` exposes the tokens that can be passed in to the lockAndMint and\n//  * burnAndRelease methods.\n//  */\n// public static Tokens = Tokens;\n\n/**\n * `Networks` exposes the network options that can be passed in to the RenJS\n * constructor. `Networks.Mainnet` resolves to the string `\"mainnet\"`.\n */\n\n\nexport { RenJS as default };\nRenJS.Networks = RenNetwork;\n/**\n * A collection of helper functions. [[utils.randomNonce]] can be be used to\n * generate a nonce when calling [[RenJS.lockAndMint]].\n */\n\nRenJS.utils = {\n  randomNonce: randomNonce,\n  toSmallestUnit: toSmallestUnit,\n  fromSmallestUnit: fromSmallestUnit,\n  fromAscii: function fromAscii(str) {\n    return Buffer.from(str);\n  }\n};\n/**\n * `RenJS.defaultDepositHandler` can be passed as a deposit callback when\n * minting. It will handle submitting to RenVM and then to the mint-chain,\n * as long as a valid provider for the mint-chain is given.\n *\n * This is not recommended for front-ends, since it may trigger a wallet\n * pop-up unexpectedly when the mint is ready to be submitted.\n *\n * ```ts\n * lockAndMint.on(\"deposit\", RenJS.defaultDepositHandler);\n * ```\n */\n\nRenJS.defaultDepositHandler = defaultDepositHandler; // ////////////////////////////////////////////////////////////////////////// //\n// EXPORTS                                                                    //\n// Based on https://github.com/MikeMcl/bignumber.js/blob/master/bignumber.js  //\n// ////////////////////////////////////////////////////////////////////////// //\n\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-explicit-any */\n\nRenJS.default = RenJS.RenJS = RenJS; // AMD\n\ntry {\n  // @ts-ignore\n  if (typeof define === \"function\" && define.amd) {\n    // @ts-ignore\n    define(function () {\n      return RenJS;\n    });\n  }\n} catch (error) {}\n/* ignore */\n// Node.js and other environments that support module.exports.\n\n\ntry {\n  // @ts-ignore\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = RenJS;\n  }\n} catch (error) {}\n/* ignore */\n// Browser.\n\n\ntry {\n  // @ts-ignore\n  if (typeof window !== \"undefined\" && window) {\n    window.RenJS = RenJS;\n  }\n} catch (error) {\n  /* ignore */\n}","map":null,"metadata":{},"sourceType":"module"}