{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { Callable } from \"@renproject/utils\";\nimport axios from \"axios\";\nimport { fixUTXO, fixUTXOs, sortUTXOs, DEFAULT_TIMEOUT } from \"./API\";\nexport var SoChainNetwork;\n\n(function (SoChainNetwork) {\n  SoChainNetwork[\"BTC\"] = \"BTC\";\n  SoChainNetwork[\"LTC\"] = \"LTC\";\n  SoChainNetwork[\"ZEC\"] = \"ZEC\";\n  SoChainNetwork[\"DOGE\"] = \"DOGE\";\n  SoChainNetwork[\"DASH\"] = \"DASH\";\n  SoChainNetwork[\"BTCTEST\"] = \"BTCTEST\";\n  SoChainNetwork[\"LTCTEST\"] = \"LTCTEST\";\n  SoChainNetwork[\"ZECTEST\"] = \"ZECTEST\";\n  SoChainNetwork[\"DOGETEST\"] = \"DOGETEST\";\n  SoChainNetwork[\"DASHTEST\"] = \"DASHTEST\";\n})(SoChainNetwork || (SoChainNetwork = {}));\n\nexport var SoChainClass = function SoChainClass() {\n  var _this = this;\n\n  var network = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SoChainNetwork.BTC;\n\n  _classCallCheck(this, SoChainClass);\n\n  this.fetchUTXO =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(txHash, vOut) {\n      var url, response, tx;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              url = \"https://sochain.com/api/v2/get_tx/\".concat(_this.network, \"/\").concat(txHash);\n              _context.next = 3;\n              return axios.get(url, {\n                timeout: DEFAULT_TIMEOUT\n              });\n\n            case 3:\n              response = _context.sent;\n              tx = response.data.data;\n              return _context.abrupt(\"return\", fixUTXO({\n                txHash: tx.txid,\n                amount: tx.outputs[vOut].value.toString(),\n                vOut: vOut,\n                confirmations: tx.confirmations\n              }, 8));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  this.fetchUTXOs =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(address) {\n      var confirmations,\n          url,\n          response,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              confirmations = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 0;\n              url = \"https://sochain.com/api/v2/get_tx_unspent/\".concat(_this.network, \"/\").concat(address, \"/\").concat(confirmations);\n              _context2.next = 4;\n              return axios.get(url, {\n                timeout: DEFAULT_TIMEOUT\n              });\n\n            case 4:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", fixUTXOs(response.data.data.txs.map(function (utxo) {\n                return {\n                  txHash: utxo.txid,\n                  amount: utxo.value.toString(),\n                  // scriptPubKey: utxo.script_hex,\n                  vOut: utxo.output_no,\n                  confirmations: utxo.confirmations\n                };\n              }), 8).filter(function (utxo) {\n                return confirmations === 0 || utxo.confirmations >= confirmations;\n              }).sort(sortUTXOs));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  this.fetchTXs =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(address) {\n      var confirmations,\n          url,\n          response,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              confirmations = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 0;\n              url = \"https://sochain.com/api/v2/get_tx_received/\".concat(_this.network, \"/\").concat(address, \"/\").concat(confirmations);\n              _context3.next = 4;\n              return axios.get(url, {\n                timeout: DEFAULT_TIMEOUT\n              });\n\n            case 4:\n              response = _context3.sent;\n              return _context3.abrupt(\"return\", fixUTXOs(response.data.data.txs.map(function (utxo) {\n                return {\n                  txHash: utxo.txid,\n                  amount: utxo.value.toString(),\n                  // scriptPubKey: utxo.script_hex,\n                  vOut: utxo.output_no,\n                  confirmations: utxo.confirmations\n                };\n              }), 8).filter(function (utxo) {\n                return confirmations === 0 || utxo.confirmations >= confirmations;\n              }).sort(sortUTXOs));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  this.broadcastTransaction =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(txHex) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return axios.post(\"https://sochain.com/api/v2/send_tx/\".concat(_this.network), {\n                tx_hex: txHex\n              }, {\n                timeout: DEFAULT_TIMEOUT\n              });\n\n            case 2:\n              response = _context4.sent;\n              return _context4.abrupt(\"return\", response.data.data.txid);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  this.network = network;\n};\nexport var SoChain = Callable(SoChainClass);","map":null,"metadata":{},"sourceType":"module"}