{"ast":null,"code":"import _toConsumableArray from \"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { fromBase64 } from \"@renproject/utils\";\nimport BN from \"bn.js\";\nimport { PackPrimitive } from \"./pack\";\nexport var marshalPackType = function marshalPackType(type) {\n  switch (type) {\n    case \"nil\":\n      return 0;\n    // KindBool is the kind of all Bool values.\n\n    case PackPrimitive.Bool:\n      return 1;\n    // KindU8 is the kind of all U8 values.\n\n    case PackPrimitive.U8:\n      return 2;\n    // KindU16 is the kind of all U16 values.\n\n    case PackPrimitive.U16:\n      return 3;\n    // KindU32 is the kind of all U32 values.\n\n    case PackPrimitive.U32:\n      return 4;\n    // KindU64 is the kind of all U64 values.\n\n    case PackPrimitive.U64:\n      return 5;\n    // KindU128 is the kind of all U128 values.\n\n    case PackPrimitive.U128:\n      return 6;\n    // KindU256 is the kind of all U256 values.\n\n    case PackPrimitive.U256:\n      return 7;\n    // KindString is the kind of all utf8 strings.\n\n    case PackPrimitive.Str:\n      return 10;\n    // KindBytes is the kind of all dynamic byte arrays.\n\n    case PackPrimitive.Bytes:\n      return 11;\n    // KindBytes32 is the kind of all 32-byte arrays.\n\n    case PackPrimitive.Bytes32:\n      return 12;\n    // KindBytes65 is the kind of all 65-byte arrays.\n\n    case PackPrimitive.Bytes65:\n      return 13;\n    // KindStruct is the kind of all struct values. It is abstract, because it does\n    // not specify the fields in the struct.\n\n    case \"struct\":\n      return 20;\n    // KindList is the kind of all list values. It is abstract, because it does\n    // not specify the type of the elements in the list.\n\n    case \"list\":\n      return 21;\n  }\n\n  throw new Error(\"Unknown type \".concat(String(type), \".\"));\n};\nexport var marshalUint = function marshalUint(value, length) {\n  try {\n    return new BN(typeof value === \"number\" ? value : value.toString()).toArrayLike(Buffer, \"be\", length);\n  } catch (error) {\n    error.message = \"Unable to marshal uint\".concat(length * 8, \" '\").concat(value, \"': \").concat(String(error.message));\n    throw error;\n  }\n};\n\nvar marshalU = function marshalU(length) {\n  return function (value) {\n    return marshalUint(value, length);\n  };\n};\n\nexport var marshalU8 = marshalU(8 / 8);\nexport var marshalU16 = marshalU(16 / 8);\nexport var marshalU32 = marshalU(32 / 8);\nexport var marshalU64 = marshalU(64 / 8);\nexport var marshalU128 = marshalU(128 / 8);\nexport var marshalU256 = marshalU(256 / 8);\n\nvar withLength = function withLength(value) {\n  return Buffer.concat([marshalU32(value.length), value]);\n};\n\nexport var marshalString = function marshalString(value) {\n  return withLength(Buffer.from(value));\n};\nexport var marshalPackStructType = function marshalPackStructType(type) {\n  var length = marshalU32(type.struct.length);\n  return Buffer.concat([length].concat(_toConsumableArray(type.struct.map(function (field) {\n    var keys = Object.keys(field);\n\n    if (keys.length === 0) {\n      throw new Error(\"Invalid struct field with no entries.\");\n    }\n\n    if (keys.length > 1) {\n      throw new Error(\"Invalid struct field with multiple entries.\");\n    }\n\n    var key = Object.keys(field)[0];\n    var fieldType = field[key];\n    return Buffer.concat([marshalString(key), marshalPackTypeDefinition(fieldType)]);\n  }))));\n};\nexport var marshalPackTypeDefinition = function marshalPackTypeDefinition(type) {\n  if (typeof type === \"object\") {\n    return Buffer.concat([Buffer.from([marshalPackType(\"struct\")]), marshalPackStructType(type)]);\n  } else if (typeof type === \"string\") {\n    return Buffer.from([marshalPackType(type)]);\n  }\n\n  throw new Error(\"Unable to marshal type \".concat(String(type), \".\"));\n};\nexport var marshalPackPrimitive = function marshalPackPrimitive(type, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue) {\n  switch (type) {\n    // Booleans\n    case PackPrimitive.Bool:\n      return marshalU8(value ? 1 : 0);\n    // Integers\n\n    case PackPrimitive.U8:\n      return marshalU8(value);\n\n    case PackPrimitive.U16:\n      return marshalU16(value);\n\n    case PackPrimitive.U32:\n      return marshalU32(value);\n\n    case PackPrimitive.U64:\n      return marshalU64(value);\n\n    case PackPrimitive.U128:\n      return marshalU128(value);\n\n    case PackPrimitive.U256:\n      return marshalU256(value);\n    // Strings\n\n    case PackPrimitive.Str:\n      {\n        return marshalString(value);\n      }\n    // Bytes\n\n    case PackPrimitive.Bytes:\n      {\n        return withLength(Buffer.isBuffer(value) ? Buffer.from(value) : // Supports base64 url format\n        fromBase64(value));\n      }\n\n    case PackPrimitive.Bytes32:\n    case PackPrimitive.Bytes65:\n      return Buffer.isBuffer(value) ? Buffer.from(value) : // Supports base64 url format\n      fromBase64(value);\n  }\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport var marshalPackStruct = function marshalPackStruct(type, value) {\n  return Buffer.concat(type.struct.map(function (member) {\n    var keys = Object.keys(member);\n\n    if (keys.length === 0) {\n      throw new Error(\"Invalid struct member with no entries.\");\n    }\n\n    if (keys.length > 1) {\n      throw new Error(\"Invalid struct member with multiple entries.\");\n    }\n\n    var key = Object.keys(member)[0];\n    var memberType = member[key];\n\n    try {\n      return marshalPackValue(memberType, value[key]);\n    } catch (error) {\n      error.message = \"Unable to marshal struct field \".concat(key, \": \").concat(String(error.message));\n      throw error;\n    }\n  }));\n};\nexport var marshalPackValue = function marshalPackValue(type, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nvalue) {\n  if (typeof type === \"object\") {\n    return marshalPackStruct(type, value);\n  } else if (typeof type === \"string\") {\n    if (type === \"nil\") return Buffer.from([]);\n    return marshalPackPrimitive(type, value);\n  }\n\n  throw new Error(\"Unknown value type \".concat(String(type)).concat(!type ? \" for value \".concat(String(value)) : \"\"));\n};\nexport var marshalTypedPackValue = function marshalTypedPackValue(_ref) {\n  var t = _ref.t,\n      v = _ref.v;\n  var marshalledType = marshalPackTypeDefinition(t);\n  var marshalledValue = marshalPackValue(t, v);\n  return Buffer.concat([marshalledType, marshalledValue]);\n};","map":null,"metadata":{},"sourceType":"module"}