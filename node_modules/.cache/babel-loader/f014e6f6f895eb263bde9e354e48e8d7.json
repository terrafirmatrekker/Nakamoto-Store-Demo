{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { useCallback, useState } from 'react';\nimport { State } from 'xstate';\nimport { ReactEffectType } from './types';\nimport { useInterpret } from './useInterpret';\n\nfunction createReactActionFunction(exec, tag) {\n  var effectExec = function effectExec() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // don't execute; just return\n\n\n    return function () {\n      return exec.apply(void 0, __spreadArray([], __read(args)));\n    };\n  };\n\n  Object.defineProperties(effectExec, {\n    name: {\n      value: \"effect:\" + exec.name\n    },\n    __effect: {\n      value: tag\n    }\n  });\n  return effectExec;\n}\n\nexport function asEffect(exec) {\n  return createReactActionFunction(exec, ReactEffectType.Effect);\n}\nexport function asLayoutEffect(exec) {\n  return createReactActionFunction(exec, ReactEffectType.LayoutEffect);\n}\nexport function useMachine(getMachine, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var listener = useCallback(function (nextState) {\n    // Only change the current state if:\n    // - the incoming state is the \"live\" initial state (since it might have new actors)\n    // - OR the incoming state actually changed.\n    //\n    // The \"live\" initial state will have .changed === undefined.\n    var initialStateChanged = nextState.changed === undefined && Object.keys(nextState.children).length;\n\n    if (nextState.changed || initialStateChanged) {\n      setState(nextState);\n    }\n  }, []);\n  var service = useInterpret(getMachine, options, listener);\n\n  var _a = __read(useState(function () {\n    var initialState = service.machine.initialState;\n    return options.state ? State.create(options.state) : initialState;\n  }), 2),\n      state = _a[0],\n      setState = _a[1];\n\n  return [state, service.send, service];\n}","map":null,"metadata":{},"sourceType":"module"}