{"ast":null,"code":"import { Ox } from \"@renproject/utils\";\nimport * as v1 from \"./v1\";\nimport * as v2 from \"./v2\";\n/**\n * @dev Runs [[v1.createAddress]] and [[v2.createAddress]] side-by-side to make\n * sure that the v2 implementation is correct for all cases.\n * Eventually, v1 will be removed.\n */\n\nexport var createAddress = function createAddress(addressToString, networks, opcode, script) {\n  return function (isTestnet, gGubKeyHash, gHash, prefix) {\n    var v2Address = addressToString(v2.createAddress(gGubKeyHash, gHash, prefix));\n\n    if (networks && opcode && script) {\n      var v1Address = v1.createAddress(networks, opcode, script)(isTestnet, gGubKeyHash, gHash);\n\n      if (v1Address !== v2Address) {\n        throw new Error(\"Error: Different results returned from gateway address generation with parameters:     isTestnet: \".concat(isTestnet, \",     gPubKey: \").concat(Ox(gGubKeyHash), \",     gHash: \").concat(Ox(gHash), \",     prefix: \").concat(Ox(prefix), \": \").concat(v1Address, \" vs \").concat(v2Address));\n      }\n    }\n\n    return v2Address;\n  };\n};\n/**\n * @dev See [[createAddress]] comment.\n *\n */\n\nexport var pubKeyScript = function pubKeyScript(networks, opcode, script) {\n  return function (isTestnet, gPubKey, gHash) {\n    var v2PubKeyScript = v2.pubKeyScript(gPubKey, gHash);\n\n    if (networks && opcode && script) {\n      var v1PubKeyScript = v1.pubKeyScript(networks, opcode, script)(isTestnet, gPubKey, gHash);\n\n      if (!v1PubKeyScript.equals(v2PubKeyScript)) {\n        throw new Error(\"Error: Different results returned from gateway public key generation with parameters: isTestnet: \".concat(isTestnet, \", gPubKey: \").concat(Ox(gPubKey), \", gHash: \").concat(Ox(gHash)));\n      }\n    }\n\n    return v2PubKeyScript;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}