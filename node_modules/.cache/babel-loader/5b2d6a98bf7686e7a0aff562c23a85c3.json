{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useActor } from './useActor';\nexport function getServiceSnapshot(service) {\n  // TODO: remove compat lines in a new major, replace literal number with InterpreterStatus then as well\n  return ('status' in service ? service.status : service._status) !== 0 ? service.state : service.machine.initialState;\n}\nexport function useService(service) {\n  if (process.env.NODE_ENV !== 'production' && !('machine' in service)) {\n    throw new Error(\"Attempted to use an actor-like object instead of a service in the useService() hook. Please use the useActor() hook instead.\");\n  }\n\n  var _a = __read(useActor(service, getServiceSnapshot), 1),\n      state = _a[0];\n\n  return [state, service.send];\n}","map":null,"metadata":{},"sourceType":"module"}