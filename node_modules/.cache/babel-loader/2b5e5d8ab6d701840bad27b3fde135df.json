{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/tejas/Desktop/marketplace2/src/components/Bridge.tsx\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport RenJS from \"@renproject/ren\";\nimport { BasicMint, BasicBurn } from \"@renproject/ren-react\";\nimport { Ethereum } from \"@renproject/chains-ethereum\";\nimport { Zcash } from \"@renproject/chains-bitcoin\";\nimport Web3 from \"web3\";\nimport { RenNetwork } from \"@renproject/interfaces\";\n\nvar BasicBurnApp = function BasicBurnApp(_ref) {\n  var account = _ref.account,\n      provider = _ref.provider,\n      destinationAddress = _ref.destinationAddress,\n      balance = _ref.balance;\n  var parameters = useMemo(function () {\n    return {\n      sdk: new RenJS(\"testnet\"),\n      burnParams: {\n        sourceAsset: \"ZEC\",\n        network: RenNetwork.Testnet,\n        targetAmount: balance,\n        destinationAddress: destinationAddress\n      },\n      from: Ethereum(provider, \"testnet\").Account({\n        address: account,\n        value: balance\n      }),\n      to: Zcash().Address(destinationAddress)\n    };\n  }, [provider, account, balance]);\n  return React.createElement(BasicBurn, {\n    parameters: parameters,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  });\n};\n\nvar BasicMintApp = function BasicMintApp(_ref2) {\n  var account = _ref2.account,\n      provider = _ref2.provider;\n  var parameters = useMemo(function () {\n    return {\n      sdk: new RenJS(\"testnet\"),\n      mintParams: {\n        sourceAsset: \"ZEC\",\n        network: RenNetwork.Testnet,\n        destinationAddress: account\n      },\n      to: Ethereum(provider).Account({\n        address: account\n      }),\n      from: Zcash()\n    };\n  }, [provider, account]);\n  return React.createElement(BasicMint, {\n    parameters: parameters,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  });\n};\n\nvar WithProvider = function WithProvider() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      provider = _useState2[0],\n      setProvider = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      account = _useState4[0],\n      setAccount = _useState4[1];\n\n  useEffect(function () {\n    window.ethereum.enable().then(\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              web3 = new Web3(window.ethereum);\n              _context.t0 = setAccount;\n              _context.next = 4;\n              return web3.eth.personal.getAccounts();\n\n            case 4:\n              _context.t1 = _context.sent[0];\n              (0, _context.t0)(_context.t1);\n              setProvider(window.ethereum);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n  }, []);\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      balance = _useState6[0],\n      setBalance = _useState6[1];\n\n  useEffect(function () {\n    if (!provider) return;\n    Ethereum(provider, \"testnet\").getBalance(\"ZEC\", account).then(function (v) {\n      return setBalance(v.minus(1000).toString());\n    });\n  }, [provider, setBalance]);\n\n  if (!provider || !account || !balance) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Connect Wallet\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Basic Mint\"), React.createElement(BasicMintApp, {\n    provider: provider,\n    account: account,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Basic Burn\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Zec Balance: \", balance), React.createElement(BasicBurnApp, {\n    provider: provider,\n    account: account,\n    destinationAddress: \"tmCZ74c41byQKyVsA6xc8jMwXbQxKU16nJT\",\n    balance: 200000,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })));\n};\n\nReactDOM.render(React.createElement(WithProvider, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93\n  },\n  __self: this\n}), document.getElementById(\"root\"));\nexport default Shop; // import React, { Component } from \"react\";\n// import Web3 from \"web3\";\n// // Need to correct RenJS tutorial BTC/ETH imports with newest NPM file hyphen\n// import RenJS from \"@renproject/ren\";\n// import { Bitcoin } from \"@renproject/chains-bitcoin\";\n// import { Ethereum } from \"@renproject/chains-ethereum\";\n// // import { ethers } from \"ethers\";\n// import \"./App.css\";\n// import ABI from \"../abis/ABI.json\";\n// // Replace with your contract's address.\n// const contractAddress = \"0x4EaFf0d9Ce1c01910a1C4AeC87399A4caEc0a0Dd\";\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       balance: 0,\n//       message: \"\",\n//       error: \"\",\n//       renJS: new RenJS(\"testnet\"),\n//     }\n//   }\n//   componentDidMount = async () => {\n//     let web3Provider;\n//     // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n//     // Modern dApp browsers...\n//     if (window.ethereum) {\n//       web3Provider = window.ethereum;\n//       try {\n//         // Request account access\n//         await window.ethereum.enable();\n//       } catch (error) {\n//         // User denied account access...\n//         this.logError(\"Please allow access to your Web3 wallet.\");\n//         return;\n//       }\n//     }\n//     // Legacy dApp browsers...\n//     else if (window.web3) {\n//       web3Provider = window.web3.currentProvider;\n//     }\n//     // If no injected web3 instance is detected, fall back to Ganache\n//     else {\n//       this.logError(\"Please install MetaMask!\");\n//       return;\n//     }\n//     const web3 = new Web3(web3Provider);\n//     const networkID = await web3.eth.net.getId();\n//     if (networkID !== 42) {\n//       this.logError(\"Please set your network to Kovan.\");\n//       return;\n//     }\n//     this.setState({ web3 }, () => {\n//       // Update balances immediately and every 10 seconds\n//       this.updateBalance();\n//       setInterval(() => {\n//         this.updateBalance();\n//       }, 10 * 1000);\n//     });\n//   }\n//   render = () => {\n//     const { balance, message, error } = this.state;\n//     return (\n//       <div className=\"App\">\n//         <p>Balance: {balance} BTC</p>\n//         <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.003 BTC</button></p>\n//         <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n//         <p>{message}</p>\n//         {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n//       </div>\n//     );\n//   }\n//   updateBalance = async () => {\n//     const { web3 } = this.state;\n//     const contract = new web3.eth.Contract(ABI, contractAddress);\n//     const balance = await contract.methods.balance().call();\n//     this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n//   }\n//   logError = (error) => {\n//     console.error(error);\n//     this.setState({ error: String((error || {}).message || error) });\n//   }\n//   log = (message) => {\n//     this.setState({ message });\n//   }\n//   deposit = async () => {\n//     this.logError(\"\"); // Reset error\n//     const { web3, renJS } = this.state;\n//     const amount = 0.003; // BTC\n//     const mint = await renJS.lockAndMint({\n//         // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n//         asset: \"BTC\",\n//         from: Bitcoin(),\n//         to: Ethereum(web3.currentProvider).Contract({\n//             // The contract we want to interact with\n//             sendTo: contractAddress,\n//             // The name of the function we want to call\n//             contractFn: \"deposit\",\n//             // Arguments expected for calling `deposit`\n//             contractParams: [\n//                 {\n//                     name: \"_msg\",\n//                     type: \"bytes\",\n//                     value: Buffer.from(`Depositing ${amount} BTC`),\n//                 }\n//             ],\n//         }),\n//     });\n//     // Show the gateway address to the user so that they can transfer their BTC to it.\n//     this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n//     mint.on(\"deposit\", async (deposit) => {\n//         // Details of the deposit are available from `deposit.depositDetails`.\n//         const hash = deposit.txHash();\n//         const depositLog = (msg) => this.log(`[${hash.slice(0, 8)}][${deposit.status}] ${msg}`);\n//         await deposit.confirmed()\n//           .on(\"target\", (confs, target) => depositLog(`${confs}/${target} confirmations`))\n//           .on(\"confirmation\", (confs, target) => depositLog(`${confs}/${target} confirmations`));\n//         await deposit.signed()\n//           // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//           .on(\"status\", (status) => depositLog(`Status: ${status}`));\n//         await deposit.mint()\n//           // Print Ethereum transaction hash.\n//           .on(\"transactionHash\", (txHash) => depositLog(`Mint tx: ${txHash}`));\n//     });\n//     this.log(`Deposited ${amount} BTC.`);\n//   }\n//   withdraw = async () => {\n//     this.logError(\"\"); // Reset error\n//     const { web3, renJS, balance } = this.state;\n//     const recipient = prompt(\"Enter BTC recipient:\");\n//     const amount = balance;\n//     const burnAndRelease = await renJS.burnAndRelease({\n//         // Send BTC from Ethereum back to the Bitcoin blockchain.\n//         asset: \"BTC\",\n//         to: Bitcoin().Address(recipient),\n//         from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n//             sendTo: contractAddress,\n//             contractFn: \"withdraw\",\n//             contractParams: [\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_msg\",\n//                     value: Buffer.from(`Withdrawing ${amount} BTC`),\n//                 },\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_to\",\n//                     value: Buffer.from(btcAddress),\n//                 },\n//                 {\n//                     type: \"uint256\",\n//                     name: \"_amount\",\n//                     value: RenJS.utils.toSmallestUnit(amount, 8),\n//                 },\n//             ],\n//         })),\n//     });\n//     let confirmations = 0;\n//     await burnAndRelease\n//         .burn()\n//         // Ethereum transaction confirmations.\n//         .on(\"confirmation\", (confs) => {\n//             confirmations = confs;\n//         })\n//         // Print Ethereum transaction hash.\n//         .on(\"transactionHash\", (txHash) =>\n//             this.log(`txHash: ${String(txHash)}`),\n//         );\n//     await burnAndRelease\n//         .release()\n//         // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//         .on(\"status\", (status) =>\n//             status === \"confirming\"\n//                 ? this.log(`${status} (${confirmations}/15)`)\n//                 : this.log(status),\n//         )\n//         // Print RenVM transaction hash\n//         .on(\"txHash\", this.log);\n//     this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n//   }\n// }\n// export default App;","map":{"version":3,"sources":["/Users/tejas/Desktop/marketplace2/src/components/Bridge.tsx"],"names":["React","ReactDOM","useEffect","useMemo","useState","RenJS","BasicMint","BasicBurn","Ethereum","Zcash","Web3","RenNetwork","BasicBurnApp","account","provider","destinationAddress","balance","parameters","sdk","burnParams","sourceAsset","network","Testnet","targetAmount","from","Account","address","value","to","Address","BasicMintApp","mintParams","WithProvider","setProvider","setAccount","window","ethereum","enable","then","web3","eth","personal","getAccounts","setBalance","getBalance","v","minus","toString","render","document","getElementById","Shop"],"mappings":"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":["import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport RenJS from \"@renproject/ren\";\nimport { BasicMint, BasicBurn, BurnProps } from \"@renproject/ren-react\";\nimport { Ethereum } from \"@renproject/chains-ethereum\";\nimport { Zcash } from \"@renproject/chains-bitcoin\";\nimport Web3 from \"web3\";\nimport { RenNetwork } from \"@renproject/interfaces\";\n\nconst BasicBurnApp = ({ account, provider, destinationAddress, balance }) => {\n    const parameters = useMemo(\n        () => ({\n            sdk: new RenJS(\"testnet\"),\n            burnParams: {\n                sourceAsset: \"ZEC\",\n                network: RenNetwork.Testnet,\n                targetAmount: balance,\n                destinationAddress,\n            },\n            from: Ethereum(provider, \"testnet\").Account({\n                address: account,\n                value: balance,\n            }),\n            to: Zcash().Address(destinationAddress),\n        }),\n        [provider, account, balance],\n    );\n    return <BasicBurn parameters={parameters} />;\n};\n\nconst BasicMintApp = ({ account, provider }) => {\n    const parameters = useMemo(\n        () => ({\n            sdk: new RenJS(\"testnet\"),\n            mintParams: {\n                sourceAsset: \"ZEC\",\n                network: RenNetwork.Testnet,\n                destinationAddress: account,\n            },\n            to: Ethereum(provider).Account({ address: account }),\n            from: Zcash(),\n        }),\n        [provider, account],\n    );\n    return <BasicMint parameters={parameters} />;\n};\n\nconst WithProvider = () => {\n    const [provider, setProvider] = useState<any>();\n    const [account, setAccount] = useState<string>();\n    useEffect(() => {\n        (window as any).ethereum.enable().then(async () => {\n            const web3 = new Web3((window as any).ethereum);\n            setAccount((await web3.eth.personal.getAccounts())[0]);\n            setProvider((window as any).ethereum);\n        });\n    }, []);\n\n    const [balance, setBalance] = useState<string>();\n    useEffect(() => {\n        if (!provider) return;\n        Ethereum(provider, \"testnet\")\n            .getBalance(\"ZEC\", account)\n            .then((v) => setBalance(v.minus(1000).toString()));\n    }, [provider, setBalance]);\n\n    if (!provider || !account || !balance) {\n        return <div>Connect Wallet</div>;\n    }\n\n    return (\n        <div>\n            <div>\n                <h2>Basic Mint</h2>\n                <BasicMintApp provider={provider} account={account} />\n            </div>\n            <div>\n                <h2>Basic Burn</h2>\n                <div>Zec Balance: {balance}</div>\n                <BasicBurnApp\n                    provider={provider}\n                    account={account}\n                    destinationAddress={\"tmCZ74c41byQKyVsA6xc8jMwXbQxKU16nJT\"}\n                    balance={200000}\n                />\n            </div>\n        </div>\n    );\n};\n\nReactDOM.render(<WithProvider />, document.getElementById(\"root\"));\n\nexport default Shop;\n\n\n// import React, { Component } from \"react\";\n// import Web3 from \"web3\";\n// // Need to correct RenJS tutorial BTC/ETH imports with newest NPM file hyphen\n// import RenJS from \"@renproject/ren\";\n// import { Bitcoin } from \"@renproject/chains-bitcoin\";\n// import { Ethereum } from \"@renproject/chains-ethereum\";\n// // import { ethers } from \"ethers\";\n// import \"./App.css\";\n// import ABI from \"../abis/ABI.json\";\n\n// // Replace with your contract's address.\n// const contractAddress = \"0x4EaFf0d9Ce1c01910a1C4AeC87399A4caEc0a0Dd\";\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       balance: 0,\n//       message: \"\",\n//       error: \"\",\n//       renJS: new RenJS(\"testnet\"),\n//     }\n//   }\n\n//   componentDidMount = async () => {\n//     let web3Provider;\n\n//     // Initialize web3 (https://medium.com/coinmonks/web3-js-ethereum-javascript-api-72f7b22e2f0a)\n//     // Modern dApp browsers...\n//     if (window.ethereum) {\n//       web3Provider = window.ethereum;\n//       try {\n//         // Request account access\n//         await window.ethereum.enable();\n//       } catch (error) {\n//         // User denied account access...\n//         this.logError(\"Please allow access to your Web3 wallet.\");\n//         return;\n//       }\n//     }\n//     // Legacy dApp browsers...\n//     else if (window.web3) {\n//       web3Provider = window.web3.currentProvider;\n//     }\n//     // If no injected web3 instance is detected, fall back to Ganache\n//     else {\n//       this.logError(\"Please install MetaMask!\");\n//       return;\n//     }\n\n//     const web3 = new Web3(web3Provider);\n\n//     const networkID = await web3.eth.net.getId();\n//     if (networkID !== 42) {\n//       this.logError(\"Please set your network to Kovan.\");\n//       return;\n//     }\n\n//     this.setState({ web3 }, () => {\n\n//       // Update balances immediately and every 10 seconds\n//       this.updateBalance();\n//       setInterval(() => {\n//         this.updateBalance();\n//       }, 10 * 1000);\n//     });\n//   }\n\n//   render = () => {\n//     const { balance, message, error } = this.state;\n//     return (\n//       <div className=\"App\">\n//         <p>Balance: {balance} BTC</p>\n//         <p><button onClick={() => this.deposit().catch(this.logError)}>Deposit 0.003 BTC</button></p>\n//         <p><button onClick={() => this.withdraw().catch(this.logError)}>Withdraw {balance} BTC</button></p>\n//         <p>{message}</p>\n//         {error ? <p style={{ color: \"red\" }}>{error}</p> : null}\n//       </div>\n//     );\n//   }\n\n//   updateBalance = async () => {\n//     const { web3 } = this.state;\n//     const contract = new web3.eth.Contract(ABI, contractAddress);\n//     const balance = await contract.methods.balance().call();\n//     this.setState({ balance: parseInt(balance.toString()) / 10 ** 8 });\n//   }\n\n//   logError = (error) => {\n//     console.error(error);\n//     this.setState({ error: String((error || {}).message || error) });\n//   }\n\n//   log = (message) => {\n//     this.setState({ message });\n//   }\n\n//   deposit = async () => {\n//     this.logError(\"\"); // Reset error\n\n//     const { web3, renJS } = this.state;\n\n//     const amount = 0.003; // BTC\n//     const mint = await renJS.lockAndMint({\n//         // Send BTC from the Bitcoin blockchain to the Ethereum blockchain.\n//         asset: \"BTC\",\n//         from: Bitcoin(),\n//         to: Ethereum(web3.currentProvider).Contract({\n//             // The contract we want to interact with\n//             sendTo: contractAddress,\n        \n//             // The name of the function we want to call\n//             contractFn: \"deposit\",\n        \n//             // Arguments expected for calling `deposit`\n//             contractParams: [\n//                 {\n//                     name: \"_msg\",\n//                     type: \"bytes\",\n//                     value: Buffer.from(`Depositing ${amount} BTC`),\n//                 }\n//             ],\n//         }),\n//     });\n    \n//     // Show the gateway address to the user so that they can transfer their BTC to it.\n//     this.log(`Deposit ${amount} BTC to ${mint.gatewayAddress}`);\n    \n//     mint.on(\"deposit\", async (deposit) => {\n//         // Details of the deposit are available from `deposit.depositDetails`.\n\n//         const hash = deposit.txHash();\n//         const depositLog = (msg) => this.log(`[${hash.slice(0, 8)}][${deposit.status}] ${msg}`);\n  \n//         await deposit.confirmed()\n//           .on(\"target\", (confs, target) => depositLog(`${confs}/${target} confirmations`))\n//           .on(\"confirmation\", (confs, target) => depositLog(`${confs}/${target} confirmations`));\n  \n//         await deposit.signed()\n//           // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//           .on(\"status\", (status) => depositLog(`Status: ${status}`));\n  \n//         await deposit.mint()\n//           // Print Ethereum transaction hash.\n//           .on(\"transactionHash\", (txHash) => depositLog(`Mint tx: ${txHash}`));\n//     });\n    \n//     this.log(`Deposited ${amount} BTC.`);\n//   }\n\n//   withdraw = async () => {\n//     this.logError(\"\"); // Reset error\n\n//     const { web3, renJS, balance } = this.state;\n\n//     const recipient = prompt(\"Enter BTC recipient:\");\n//     const amount = balance;\n//     const burnAndRelease = await renJS.burnAndRelease({\n//         // Send BTC from Ethereum back to the Bitcoin blockchain.\n//         asset: \"BTC\",\n//         to: Bitcoin().Address(recipient),\n//         from: Ethereum(web3.currentProvider).Contract((btcAddress) => ({\n//             sendTo: contractAddress,\n            \n//             contractFn: \"withdraw\",\n            \n//             contractParams: [\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_msg\",\n//                     value: Buffer.from(`Withdrawing ${amount} BTC`),\n//                 },\n//                 {\n//                     type: \"bytes\",\n//                     name: \"_to\",\n//                     value: Buffer.from(btcAddress),\n//                 },\n//                 {\n//                     type: \"uint256\",\n//                     name: \"_amount\",\n//                     value: RenJS.utils.toSmallestUnit(amount, 8),\n//                 },\n//             ],\n//         })),\n//     });\n    \n//     let confirmations = 0;\n//     await burnAndRelease\n//         .burn()\n//         // Ethereum transaction confirmations.\n//         .on(\"confirmation\", (confs) => {\n//             confirmations = confs;\n//         })\n//         // Print Ethereum transaction hash.\n//         .on(\"transactionHash\", (txHash) =>\n//             this.log(`txHash: ${String(txHash)}`),\n//         );\n    \n//     await burnAndRelease\n//         .release()\n//         // Print RenVM status - \"pending\", \"confirming\" or \"done\".\n//         .on(\"status\", (status) =>\n//             status === \"confirming\"\n//                 ? this.log(`${status} (${confirmations}/15)`)\n//                 : this.log(status),\n//         )\n//         // Print RenVM transaction hash\n//         .on(\"txHash\", this.log);\n    \n//     this.log(`Withdrew ${amount} BTC to ${recipient}.`);\n//   }\n// }\n\n// export default App;"]},"metadata":{},"sourceType":"module"}