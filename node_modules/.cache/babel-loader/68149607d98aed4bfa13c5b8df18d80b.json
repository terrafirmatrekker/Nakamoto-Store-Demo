{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nimport { useEffect, useRef } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport { ReactEffectType } from './types';\nimport { partition } from './utils';\n\nfunction executeEffect(action, state) {\n  var exec = action.exec;\n  var originalExec = exec(state.context, state._event.data, {\n    action: action,\n    state: state,\n    _event: state._event\n  });\n  originalExec();\n}\n\nexport function useReactEffectActions(service) {\n  var effectActionsRef = useRef([]);\n  var layoutEffectActionsRef = useRef([]);\n  useIsomorphicLayoutEffect(function () {\n    var sub = service.subscribe(function (currentState) {\n      var _a, _b;\n\n      if (currentState.actions.length) {\n        var reactEffectActions = currentState.actions.filter(function (action) {\n          return typeof action.exec === 'function' && '__effect' in action.exec;\n        });\n\n        var _c = __read(partition(reactEffectActions, function (action) {\n          return action.exec.__effect === ReactEffectType.Effect;\n        }), 2),\n            effectActions = _c[0],\n            layoutEffectActions = _c[1];\n\n        (_a = effectActionsRef.current).push.apply(_a, __spreadArray([], __read(effectActions.map(function (effectAction) {\n          return [effectAction, currentState];\n        }))));\n\n        (_b = layoutEffectActionsRef.current).push.apply(_b, __spreadArray([], __read(layoutEffectActions.map(function (layoutEffectAction) {\n          return [layoutEffectAction, currentState];\n        }))));\n      }\n    });\n    return function () {\n      sub.unsubscribe();\n    };\n  }, []); // this is somewhat weird - this should always be flushed within useLayoutEffect\n  // but we don't want to receive warnings about useLayoutEffect being used on the server\n  // so we have to use `useIsomorphicLayoutEffect` to silence those warnings\n\n  useIsomorphicLayoutEffect(function () {\n    while (layoutEffectActionsRef.current.length) {\n      var _a = __read(layoutEffectActionsRef.current.shift(), 2),\n          layoutEffectAction = _a[0],\n          effectState = _a[1];\n\n      executeEffect(layoutEffectAction, effectState);\n    }\n  }); // https://github.com/davidkpiano/xstate/pull/1202#discussion_r429677773\n\n  useEffect(function () {\n    while (effectActionsRef.current.length) {\n      var _a = __read(effectActionsRef.current.shift(), 2),\n          effectAction = _a[0],\n          effectState = _a[1];\n\n      executeEffect(effectAction, effectState);\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}