{"ast":null,"code":"import _toConsumableArray from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/* eslint-disable no-console */\nimport BigNumber from \"bignumber.js\";\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warn\"] = 1] = \"Warn\";\n  LogLevel[LogLevel[\"Log\"] = 2] = \"Log\";\n  LogLevel[LogLevel[\"Info\"] = 3] = \"Info\";\n  LogLevel[LogLevel[\"Debug\"] = 4] = \"Debug\";\n  LogLevel[LogLevel[\"Trace\"] = 5] = \"Trace\";\n})(LogLevel || (LogLevel = {}));\n\nvar stringToLogLevel = function stringToLogLevel(level) {\n  switch (level) {\n    case \"error\":\n    case LogLevel.Error:\n      return 0;\n\n    case \"warn\":\n    case LogLevel.Warn:\n      return 1;\n\n    case \"warn\":\n    case LogLevel.Log:\n      return 2;\n\n    case \"info\":\n    case LogLevel.Info:\n      return 3;\n\n    case \"debug\":\n    case LogLevel.Debug:\n      return 4;\n\n    case \"trace\":\n    case LogLevel.Trace:\n      return 5;\n\n    default:\n      return 1;\n  }\n};\n\nvar logLevelName = function logLevelName(level) {\n  switch (stringToLogLevel(level)) {\n    case LogLevel.Error:\n      return \"ERROR\";\n\n    case LogLevel.Warn:\n      return \"WARN\";\n\n    case LogLevel.Log:\n      return \"WARN\";\n\n    case LogLevel.Info:\n      return \"INFO\";\n\n    case LogLevel.Debug:\n      return \"DEBUG\";\n\n    case LogLevel.Trace:\n      return \"TRACE\";\n  }\n};\n\nvar toString = function toString(value) {\n  try {\n    if (BigNumber.isBigNumber(value)) {\n      return value.toFixed();\n    }\n\n    return value;\n  } catch (error) {\n    try {\n      return String(value);\n    } catch (errorInner) {\n      return \"\";\n    }\n  }\n};\n\nvar printWithPrefix = function printWithPrefix(l, prefix) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  if (prefix) {\n    l.apply(void 0, [prefix].concat(args));\n  } else {\n    l.apply(void 0, args);\n  }\n};\n/**\n * SimpleLogger is a implementation of the Logger interface that also supports\n * setting the log level.\n *\n * @export\n * @class SimpleLogger\n */\n\n\nexport var SimpleLogger = function SimpleLogger() {\n  var _this = this;\n\n  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : LogLevel.Warn;\n  var logPrefix = arguments.length > 1 ? arguments[1] : undefined;\n  var debugPrefix = arguments.length > 2 ? arguments[2] : undefined;\n\n  _classCallCheck(this, SimpleLogger);\n\n  this.logPrefix = function () {\n    return \"\";\n  };\n\n  this.debugPrefix = function (level) {\n    return \"[RenJS][\".concat(logLevelName(level), \"]\");\n  };\n\n  this.trace = function (message) {\n    if (_this.level >= LogLevel.Trace) {\n      for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        optionalParams[_key2 - 1] = arguments[_key2];\n      }\n\n      if (optionalParams.length && typeof message === \"string\") {\n        var _console;\n\n        console.group((_this.debugPrefix(LogLevel.Trace) || \"\") + message);\n\n        (_console = console).trace.apply(_console, _toConsumableArray(optionalParams.map(toString)));\n\n        console.groupEnd();\n      } else {\n        printWithPrefix.apply(void 0, [console.trace, _this.debugPrefix(LogLevel.Trace), toString(message)].concat(_toConsumableArray(optionalParams.map(toString))));\n      }\n    }\n  };\n\n  this.debug = function (message) {\n    if (_this.level >= LogLevel.Debug) {\n      for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        optionalParams[_key3 - 1] = arguments[_key3];\n      }\n\n      if (optionalParams.length && typeof message === \"string\") {\n        var _console2;\n\n        console.group((_this.debugPrefix(LogLevel.Debug) || \"\") + message);\n\n        (_console2 = console).debug.apply(_console2, _toConsumableArray(optionalParams.map(toString)));\n\n        console.groupEnd();\n      } else {\n        printWithPrefix.apply(void 0, [console.debug, _this.debugPrefix(LogLevel.Debug), toString(message)].concat(_toConsumableArray(optionalParams.map(toString))));\n      }\n    }\n  };\n\n  this.info = function () {\n    if (_this.level >= LogLevel.Info) {\n      for (var _len4 = arguments.length, optionalParams = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        optionalParams[_key4] = arguments[_key4];\n      }\n\n      printWithPrefix.apply(void 0, [console.info, _this.logPrefix(LogLevel.Info)].concat(_toConsumableArray(optionalParams.map(toString))));\n    }\n  };\n\n  this.log = function () {\n    if (_this.level >= LogLevel.Log) {\n      for (var _len5 = arguments.length, optionalParams = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        optionalParams[_key5] = arguments[_key5];\n      }\n\n      printWithPrefix.apply(void 0, [console.log, _this.logPrefix(LogLevel.Log)].concat(_toConsumableArray(optionalParams.map(toString))));\n    }\n  };\n\n  this.warn = function () {\n    if (_this.level >= LogLevel.Warn) {\n      for (var _len6 = arguments.length, optionalParams = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        optionalParams[_key6] = arguments[_key6];\n      }\n\n      printWithPrefix.apply(void 0, [console.warn, _this.logPrefix(LogLevel.Warn)].concat(_toConsumableArray(optionalParams.map(toString))));\n    }\n  };\n\n  this.error = function () {\n    if (_this.level >= LogLevel.Error) {\n      for (var _len7 = arguments.length, optionalParams = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        optionalParams[_key7] = arguments[_key7];\n      }\n\n      printWithPrefix.apply(void 0, [console.error, _this.logPrefix(LogLevel.Error)].concat(_toConsumableArray(optionalParams.map(toString))));\n    }\n  };\n\n  this.level = level;\n\n  if (logPrefix) {\n    var logPrefixFn = typeof logPrefix === \"string\" ? function () {\n      return logPrefix;\n    } : logPrefix;\n    this.logPrefix = logPrefixFn;\n    this.debugPrefix = logPrefixFn;\n  }\n\n  if (debugPrefix) {\n    var debugPrefixFn = typeof debugPrefix === \"string\" ? function () {\n      return debugPrefix;\n    } : debugPrefix;\n    this.debugPrefix = debugPrefixFn;\n  }\n};\nexport var NullLogger = {\n  level: -1,\n  trace: function trace(_message) {},\n  debug: function debug(_message) {},\n  info: function info(_message) {},\n  log: function log(_message) {},\n  warn: function warn(_message) {},\n  error: function error(_message) {}\n};","map":null,"metadata":{},"sourceType":"module"}