{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('./util/preconditions');\n\nvar errors = require('./errors');\n\nvar Base58Check = require('./encoding/base58check');\n\nvar Networks = require('./networks');\n\nvar Hash = require('./crypto/hash');\n\nvar JSUtil = require('./util/js');\n\nvar PublicKey = require('./publickey');\n\nvar BN = require('./crypto/bn');\n\nvar base32 = require('./util/base32');\n\nvar convertBits = require('./util/convertBits');\n/**\n * Instantiate an address from an address String or Buffer, a public key or script hash Buffer,\n * or an instance of {@link PublicKey} or {@link Script}.\n *\n * This is an immutable class, and if the first parameter provided to this constructor is an\n * `Address` instance, the same argument will be returned.\n *\n * An address has two key properties: `network` and `type`. The type is either\n * `Address.PayToPublicKeyHash` (value is the `'pubkeyhash'` string)\n * or `Address.PayToScriptHash` (the string `'scripthash'`). The network is an instance of {@link Network}.\n * You can quickly check whether an address is of a given kind by using the methods\n * `isPayToPublicKeyHash` and `isPayToScriptHash`\n *\n * @example\n * ```javascript\n * // validate that an input field is valid\n * var error = Address.getValidationError(input, 'testnet');\n * if (!error) {\n *   var address = Address(input, 'testnet');\n * } else {\n *   // invalid network or checksum (typo?)\n *   var message = error.messsage;\n * }\n *\n * // get an address from a public key\n * var address = Address(publicKey, 'testnet').toString();\n * ```\n *\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n * @constructor\n */\n\n\nfunction Address(data, network, type) {\n  /* jshint maxcomplexity: 12 */\n\n  /* jshint maxstatements: 20 */\n  if (!(this instanceof Address)) {\n    return new Address(data, network, type);\n  }\n\n  if (_.isArray(data) && _.isNumber(network)) {\n    return Address.createMultisig(data, network, type);\n  }\n\n  if (data instanceof Address) {\n    // Immutable instance\n    return data;\n  }\n\n  $.checkArgument(data, 'First argument is required, please include address data.', 'guide/address.html');\n\n  if (network && !Networks.get(network)) {\n    throw new TypeError('Second argument must be \"livenet\", \"testnet\", or \"regtest\".');\n  }\n\n  if (type && type !== Address.PayToPublicKeyHash && type !== Address.PayToScriptHash) {\n    throw new TypeError('Third argument must be \"pubkeyhash\" or \"scripthash\".');\n  }\n\n  var info = this._classifyArguments(data, network, type); // set defaults if not set\n\n\n  info.network = info.network || Networks.get(network) || Networks.defaultNetwork;\n  info.type = info.type || type || Address.PayToPublicKeyHash;\n  JSUtil.defineImmutable(this, {\n    hashBuffer: info.hashBuffer,\n    network: info.network,\n    type: info.type\n  });\n  return this;\n}\n/**\n * Internal function used to split different kinds of arguments of the constructor\n * @param {*} data - The encoded data in various formats\n * @param {Network|String|number=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Object} An \"info\" object with \"type\", \"network\", and \"hashBuffer\"\n */\n\n\nAddress.prototype._classifyArguments = function (data, network, type) {\n  /* jshint maxcomplexity: 10 */\n  // transform and validate input data\n  if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 20) {\n    return Address._transformHash(data);\n  } else if ((data instanceof Buffer || data instanceof Uint8Array) && data.length === 21) {\n    return Address._transformBuffer(data, network, type);\n  } else if (data instanceof PublicKey) {\n    return Address._transformPublicKey(data);\n  } else if (data instanceof Script) {\n    return Address._transformScript(data, network);\n  } else if (typeof data === 'string') {\n    return Address._transformString(data, network, type);\n  } else if (_.isObject(data)) {\n    return Address._transformObject(data);\n  } else {\n    throw new TypeError('First argument is an unrecognized data format.');\n  }\n};\n/** @static */\n\n\nAddress.PayToPublicKeyHash = 'pubkeyhash';\n/** @static */\n\nAddress.PayToScriptHash = 'scripthash';\n/**\n * @param {Buffer} hash - An instance of a hash Buffer\n * @returns {Object} An object with keys: hashBuffer\n * @private\n */\n\nAddress._transformHash = function (hash) {\n  var info = {};\n\n  if (!(hash instanceof Buffer) && !(hash instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n\n  if (hash.length !== 20) {\n    throw new TypeError('Address hashbuffers must be exactly 20 bytes.');\n  }\n\n  info.hashBuffer = hash;\n  return info;\n};\n/**\n * Deserializes an address serialized through `Address#toObject()`\n * @param {Object} data\n * @param {string} data.hash - the hash that this address encodes\n * @param {string} data.type - either 'pubkeyhash' or 'scripthash'\n * @param {Network=} data.network - the name of the network associated\n * @return {Address}\n */\n\n\nAddress._transformObject = function (data) {\n  $.checkArgument(data.hash || data.hashBuffer, 'Must provide a `hash` or `hashBuffer` property');\n  $.checkArgument(data.type, 'Must provide a `type` property');\n  return {\n    hashBuffer: data.hash ? Buffer.from(data.hash, 'hex') : data.hashBuffer,\n    network: Networks.get(data.network) || Networks.defaultNetwork,\n    type: data.type\n  };\n};\n/**\n * Internal function to discover the network and type based on the first data byte\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @returns {Object} An object with keys: network and type\n * @private\n */\n\n\nAddress._classifyFromVersion = function (buffer) {\n  var version = {};\n  var pubkeyhashNetwork = Networks.get(buffer[0], 'pubkeyhash');\n  var scripthashNetwork = Networks.get(buffer[0], 'scripthash');\n\n  if (pubkeyhashNetwork) {\n    version.network = pubkeyhashNetwork;\n    version.type = Address.PayToPublicKeyHash;\n  } else if (scripthashNetwork) {\n    version.network = scripthashNetwork;\n    version.type = Address.PayToScriptHash;\n  }\n\n  return version;\n};\n/**\n * Internal function to transform a bitcoin address buffer\n *\n * @param {Buffer} buffer - An instance of a hex encoded address Buffer\n * @param {string=} network - The network: 'livenet' or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\n\n\nAddress._transformBuffer = function (buffer, network, type) {\n  /* jshint maxcomplexity: 9 */\n  var info = {};\n\n  if (!(buffer instanceof Buffer) && !(buffer instanceof Uint8Array)) {\n    throw new TypeError('Address supplied is not a buffer.');\n  }\n\n  if (buffer.length !== 1 + 20) {\n    throw new TypeError('Address buffers must be exactly 21 bytes.');\n  }\n\n  var networkObj = Networks.get(network);\n\n  var bufferVersion = Address._classifyFromVersion(buffer);\n\n  if (network && !networkObj) {\n    throw new TypeError('Unknown network');\n  }\n\n  if (!bufferVersion.network || networkObj && networkObj !== bufferVersion.network) {\n    throw new TypeError('Address has mismatched network type.');\n  }\n\n  if (!bufferVersion.type || type && type !== bufferVersion.type) {\n    throw new TypeError('Address has mismatched type.');\n  }\n\n  info.hashBuffer = buffer.slice(1);\n  info.network = bufferVersion.network;\n  info.type = bufferVersion.type;\n  return info;\n};\n/**\n * Internal function to transform a {@link PublicKey}\n *\n * @param {PublicKey} pubkey - An instance of PublicKey\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\n\n\nAddress._transformPublicKey = function (pubkey) {\n  var info = {};\n\n  if (!(pubkey instanceof PublicKey)) {\n    throw new TypeError('Address must be an instance of PublicKey.');\n  }\n\n  info.hashBuffer = Hash.sha256ripemd160(pubkey.toBuffer());\n  info.type = Address.PayToPublicKeyHash;\n  return info;\n};\n/**\n * Internal function to transform a {@link Script} into a `info` object.\n *\n * @param {Script} script - An instance of Script\n * @returns {Object} An object with keys: hashBuffer, type\n * @private\n */\n\n\nAddress._transformScript = function (script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n  var info = script.getAddressInfo(network);\n\n  if (!info) {\n    throw new errors.Script.CantDeriveAddress(script);\n  }\n\n  return info;\n};\n/**\n * Creates a P2SH address from a set of public keys and a threshold.\n *\n * The addresses will be sorted lexicographically, as that is the trend in bitcoin.\n * To create an address from unsorted public keys, use the {@link Script#buildMultisigOut}\n * interface.\n *\n * @param {Array} publicKeys - a set of public keys to create an address\n * @param {number} threshold - the number of signatures needed to release the funds\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @return {Address}\n */\n\n\nAddress.createMultisig = function (publicKeys, threshold, network) {\n  network = network || publicKeys[0].network || Networks.defaultNetwork;\n  return Address.payingTo(Script.buildMultisigOut(publicKeys, threshold), network);\n};\n\nfunction decodeCashAddress(address) {\n  function hasSingleCase(string) {\n    var lowerCase = string.toLowerCase();\n    var upperCase = string.toUpperCase();\n    var hasSingleCase = string === lowerCase || string === upperCase;\n    return hasSingleCase;\n  }\n\n  function validChecksum(prefix, payload) {\n    function prefixToArray(prefix) {\n      var result = [];\n\n      for (var i = 0; i < prefix.length; i++) {\n        result.push(prefix.charCodeAt(i) & 31);\n      }\n\n      return result;\n    }\n\n    var prefixData = prefixToArray(prefix).concat([0]);\n    return polymod(prefixData.concat(payload)) === 0;\n  }\n\n  $.checkArgument(hasSingleCase(address), 'Mixed case');\n  address = address.toLowerCase();\n  var pieces = address.split(':');\n  $.checkArgument(pieces.length <= 2, 'Invalid format:' + address);\n  var prefix, encodedPayload;\n\n  if (pieces.length === 2) {\n    prefix = pieces[0];\n    encodedPayload = pieces[1];\n  } else {\n    prefix = null;\n    encodedPayload = pieces[0];\n  }\n\n  var payload = base32.decode(encodedPayload.toLowerCase());\n\n  if (prefix) {\n    $.checkArgument(validChecksum(prefix, payload), 'Invalid checksum:' + address);\n  } else {\n    var netNames = ['livenet', 'testnet', 'regtest'];\n    var i;\n\n    while (!prefix && (i = netNames.shift())) {\n      var p = Networks.get(i).prefix;\n\n      if (validChecksum(p, payload)) {\n        prefix = p;\n      }\n    }\n\n    $.checkArgument(prefix, 'Invalid checksum:' + address);\n  }\n\n  var convertedBits = convertBits(payload.slice(0, -8), 5, 8, true);\n  var versionByte = convertedBits.shift();\n  var hash = convertedBits;\n  $.checkArgument(getHashSize(versionByte) === hash.length * 8, 'Invalid hash size:' + address);\n\n  function getType(versionByte) {\n    switch (versionByte & 120) {\n      case 0:\n        return 'pubkeyhash';\n\n      case 8:\n        return 'scripthash';\n\n      default:\n        throw new Error('Invalid address type in version byte:' + versionByte);\n    }\n  }\n\n  var type = getType(versionByte);\n  var network = Networks.get(prefix); //console.log('[address.js.336:network:]',network); //TODO\n\n  var info = {}; //return { prefix, type, hash };\n  //console.log('[address.js.339]', hash); //TODO\n\n  info.hashBuffer = Buffer.from(hash);\n  info.network = network;\n  info.type = type;\n  return info;\n}\n\nAddress._decodeCashAddress = decodeCashAddress;\n/**\n * Internal function to transform a bitcoin cash address string\n *\n * @param {string} data\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type: 'pubkeyhash' or 'scripthash'\n * @returns {Object} An object with keys: hashBuffer, network and type\n * @private\n */\n\nAddress._transformString = function (data, network, type) {\n  if (typeof data !== 'string') {\n    throw new TypeError('data parameter supplied is not a string.');\n  }\n\n  if (data.length < 34) {\n    throw new Error('Invalid Address string provided');\n  }\n\n  if (data.length > 100) {\n    throw new TypeError('address string is too long');\n  }\n\n  data = data.trim();\n  var networkObj = Networks.get(network);\n\n  if (network && !networkObj) {\n    throw new TypeError('Unknown network');\n  }\n\n  if (data.length > 35) {\n    var info = decodeCashAddress(data);\n\n    if (!info.network || networkObj && networkObj.name !== info.network.name) {\n      throw new TypeError('Address has mismatched network type.');\n    }\n\n    if (!info.type || type && type !== info.type) {\n      throw new TypeError('Address has mismatched type.');\n    }\n\n    return info;\n  } else {\n    var addressBuffer = Base58Check.decode(data); // Legacy addr\n\n    return Address._transformBuffer(addressBuffer, network, type);\n  }\n};\n/**\n * Instantiate an address from a PublicKey instance\n *\n * @param {PublicKey} data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromPublicKey = function (data, network) {\n  var info = Address._transformPublicKey(data);\n\n  network = network || Networks.defaultNetwork;\n  return new Address(info.hashBuffer, network, info.type);\n};\n/**\n * Instantiate an address from a ripemd160 public key hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromPublicKeyHash = function (hash, network) {\n  var info = Address._transformHash(hash);\n\n  return new Address(info.hashBuffer, network, Address.PayToPublicKeyHash);\n};\n/**\n * Instantiate an address from a ripemd160 script hash\n *\n * @param {Buffer} hash - An instance of buffer of the hash\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromScriptHash = function (hash, network) {\n  $.checkArgument(hash, 'hash parameter is required');\n\n  var info = Address._transformHash(hash);\n\n  return new Address(info.hashBuffer, network, Address.PayToScriptHash);\n};\n/**\n * Builds a p2sh address paying to script. This will hash the script and\n * use that to create the address.\n * If you want to extract an address associated with a script instead,\n * see {{Address#fromScript}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.payingTo = function (script, network) {\n  $.checkArgument(script, 'script is required');\n  $.checkArgument(script instanceof Script, 'script must be instance of Script');\n  return Address.fromScriptHash(Hash.sha256ripemd160(script.toBuffer()), network);\n};\n/**\n * Extract address from a Script. The script must be of one\n * of the following types: p2pkh input, p2pkh output, p2sh input\n * or p2sh output.\n * This will analyze the script and extract address information from it.\n * If you want to transform any script to a p2sh Address paying\n * to that script's hash instead, use {{Address#payingTo}}\n *\n * @param {Script} script - An instance of Script\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromScript = function (script, network) {\n  $.checkArgument(script instanceof Script, 'script must be a Script instance');\n\n  var info = Address._transformScript(script, network);\n\n  return new Address(info.hashBuffer, network, info.type);\n};\n/**\n * Instantiate an address from a buffer of the address\n *\n * @param {Buffer} buffer - An instance of buffer of the address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromBuffer = function (buffer, network, type) {\n  var info = Address._transformBuffer(buffer, network, type);\n\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n/**\n * Instantiate an address from an address string\n *\n * @param {string} str - An string of the bitcoin address\n * @param {String|Network=} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string=} type - The type of address: 'script' or 'pubkey'\n * @returns {Address} A new valid and frozen instance of an Address\n */\n\n\nAddress.fromString = function (str, network, type) {\n  var info = Address._transformString(str, network, type);\n\n  return new Address(info.hashBuffer, info.network, info.type);\n};\n/**\n * Instantiate an address from an Object\n *\n * @param {string} json - An JSON string or Object with keys: hash, network and type\n * @returns {Address} A new valid instance of an Address\n */\n\n\nAddress.fromObject = function fromObject(obj) {\n  $.checkState(JSUtil.isHexa(obj.hash), 'Unexpected hash property, \"' + obj.hash + '\", expected to be hex.');\n  var hashBuffer = Buffer.from(obj.hash, 'hex');\n  return new Address(hashBuffer, obj.network, obj.type);\n};\n/**\n * Will return a validation error if exists\n *\n * @example\n * ```javascript\n * // a network mismatch error\n * var error = Address.getValidationError('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'testnet');\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {null|Error} The corresponding error message\n */\n\n\nAddress.getValidationError = function (data, network, type) {\n  var error;\n\n  try {\n    /* jshint nonew: false */\n    new Address(data, network, type);\n  } catch (e) {\n    error = e;\n  }\n\n  return error;\n};\n/**\n * Will return a boolean if an address is valid\n *\n * @example\n * ```javascript\n * assert(Address.isValid('15vkcKf7gB23wLAnZLmbVuMiiVDc1Nm4a2', 'livenet'));\n * ```\n *\n * @param {string} data - The encoded data\n * @param {String|Network} network - either a Network instance, 'livenet', or 'testnet'\n * @param {string} type - The type of address: 'script' or 'pubkey'\n * @returns {boolean} The corresponding error message\n */\n\n\nAddress.isValid = function (data, network, type) {\n  return !Address.getValidationError(data, network, type);\n};\n/**\n * Returns true if an address is of pay to public key hash type\n * @return boolean\n */\n\n\nAddress.prototype.isPayToPublicKeyHash = function () {\n  return this.type === Address.PayToPublicKeyHash;\n};\n/**\n * Returns true if an address is of pay to script hash type\n * @return boolean\n */\n\n\nAddress.prototype.isPayToScriptHash = function () {\n  return this.type === Address.PayToScriptHash;\n};\n/**\n * Will return a buffer representation of the address\n *\n * @returns {Buffer} Bitcoin address buffer\n */\n\n\nAddress.prototype.toBuffer = function () {\n  var version = Buffer.from([this.network[this.type]]);\n  var buf = Buffer.concat([version, this.hashBuffer]);\n  return buf;\n};\n/**\n * @returns {Object} A plain object with the address information\n */\n\n\nAddress.prototype.toObject = Address.prototype.toJSON = function toObject() {\n  return {\n    hash: this.hashBuffer.toString('hex'),\n    type: this.type,\n    network: this.network.toString()\n  };\n};\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Bitcoin address\n */\n\n\nAddress.prototype.inspect = function () {\n  return '<Address: ' + this.toString() + ', type: ' + this.type + ', network: ' + this.network + '>';\n};\n/***\n * @license\n * https://github.com/bitcoincashjs/cashaddr\n * Copyright (c) 2017 Emilio Almansi\n * Distributed under the MIT software license, see the accompanying\n * file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n */\n\n\nAddress.prototype.toCashBuffer = function () {\n  var version = Buffer.from([this.network[this.type]]);\n  var buf = Buffer.concat([version, this.hashBuffer]);\n  return buf;\n};\n/**\n * Will return a the base58 (legacy) string representation of the address\n *\n * @returns {string} Bitcoin address\n */\n\n\nAddress.prototype.toLegacyAddress = function () {\n  return Base58Check.encode(this.toBuffer());\n};\n/**\n * Will return a cashaddr representation of the address. Always return lower case\n * Can be converted by the caller to uppercase is needed (still valid).\n *\n * @returns {string} Bitcoin Cash address\n */\n\n\nAddress.prototype.toCashAddress = function (stripPrefix) {\n  function getTypeBits(type) {\n    switch (type) {\n      case 'pubkeyhash':\n        return 0;\n\n      case 'scripthash':\n        return 8;\n\n      default:\n        throw new Error('Invalid type:' + type);\n    }\n  }\n\n  function getHashSizeBits(hash) {\n    switch (hash.length * 8) {\n      case 160:\n        return 0;\n\n      case 192:\n        return 1;\n\n      case 224:\n        return 2;\n\n      case 256:\n        return 3;\n\n      case 320:\n        return 4;\n\n      case 384:\n        return 5;\n\n      case 448:\n        return 6;\n\n      case 512:\n        return 7;\n\n      default:\n        throw new Error('Invalid hash size:' + hash.length);\n    }\n  }\n\n  var eight0 = [0, 0, 0, 0, 0, 0, 0, 0];\n  var prefixData = this.network.prefixArray.concat([0]);\n  var versionByte = getTypeBits(this.type) + getHashSizeBits(this.hashBuffer);\n  var arr = Array.prototype.slice.call(this.hashBuffer, 0);\n  var payloadData = convertBits([versionByte].concat(arr), 8, 5);\n  var checksumData = prefixData.concat(payloadData).concat(eight0);\n  var payload = payloadData.concat(checksumToArray(polymod(checksumData)));\n\n  if (stripPrefix === true) {\n    return base32.encode(payload);\n  } else {\n    return this.network.prefix + ':' + base32.encode(payload);\n  }\n};\n/**\n * Will return a string representation of the address (defaults to CashAddr format)\n *\n * @returns {string} address\n */\n\n\nAddress.prototype.toString = Address.prototype.toCashAddress;\n/***\n * Retrieves the the length in bits of the encoded hash from its bit\n * representation within the version byte.\n *\n * @param {number} versionByte\n */\n\nfunction getHashSize(versionByte) {\n  switch (versionByte & 7) {\n    case 0:\n      return 160;\n\n    case 1:\n      return 192;\n\n    case 2:\n      return 224;\n\n    case 3:\n      return 256;\n\n    case 4:\n      return 320;\n\n    case 5:\n      return 384;\n\n    case 6:\n      return 448;\n\n    case 7:\n      return 512;\n  }\n}\n/***\n * Returns an array representation of the given checksum to be encoded\n * within the address' payload.\n *\n * @param {number} checksum Computed checksum.\n */\n\n\nfunction checksumToArray(checksum) {\n  var result = [];\n\n  for (var i = 0; i < 8; ++i) {\n    result.push(checksum & 31);\n    checksum /= 32;\n  }\n\n  return result.reverse();\n}\n/***\n * Computes a checksum from the given input data as specified for the CashAddr\n * format: https://github.com/Bitcoin-UAHF/spec/blob/master/cashaddr.md.\n *\n * @param {Array} data Array of 5-bit integers over which the checksum is to be computed.\n */\n\n\nvar GENERATOR1 = [0x98, 0x79, 0xf3, 0xae, 0x1e];\nvar GENERATOR2 = [0xf2bc8e61, 0xb76d99e2, 0x3e5fb3c4, 0x2eabe2a8, 0x4f43e470];\n\nfunction polymod(data) {\n  // Treat c as 8 bits + 32 bits\n  var c0 = 0,\n      c1 = 1,\n      C = 0;\n\n  for (var j = 0; j < data.length; j++) {\n    // Set C to c shifted by 35\n    C = c0 >>> 3; // 0x[07]ffffffff\n\n    c0 &= 0x07; // Shift as a whole number\n\n    c0 <<= 5;\n    c0 |= c1 >>> 27; // 0xffffffff >>> 5\n\n    c1 &= 0x07ffffff;\n    c1 <<= 5; // xor the last 5 bits\n\n    c1 ^= data[j];\n\n    for (var i = 0; i < GENERATOR1.length; ++i) {\n      if (C & 1 << i) {\n        c0 ^= GENERATOR1[i];\n        c1 ^= GENERATOR2[i];\n      }\n    }\n  }\n\n  c1 ^= 1; // Negative numbers -> large positive numbers\n\n  if (c1 < 0) {\n    c1 ^= 1 << 31;\n    c1 += (1 << 30) * 2;\n  } // Unless bitwise operations are used,\n  // numbers are consisting of 52 bits, except\n  // the sign bit. The result is max 40 bits,\n  // so it fits perfectly in one number!\n\n\n  return c0 * (1 << 30) * 4 + c1;\n}\n\nmodule.exports = Address;\n\nvar Script = require('./script');","map":null,"metadata":{},"sourceType":"script"}