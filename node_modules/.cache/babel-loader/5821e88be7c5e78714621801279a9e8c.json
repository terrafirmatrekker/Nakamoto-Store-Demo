{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Base, WordArray } from './core.js';\nimport { MD5Algo } from './md5.js';\n/**\n * This key derivation function is meant to conform with EVP_BytesToKey.\n * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n */\n\nexport var EvpKDFAlgo =\n/*#__PURE__*/\nfunction (_Base) {\n  _inherits(EvpKDFAlgo, _Base);\n\n  /**\n   * Initializes a newly created key derivation function.\n   *\n   * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n   *\n   * @example\n   *\n   *     const kdf = CryptoJS.algo.EvpKDF.create();\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n   *     const kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n   */\n  function EvpKDFAlgo(cfg) {\n    var _this;\n\n    _classCallCheck(this, EvpKDFAlgo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EvpKDFAlgo).call(this));\n    /**\n     * Configuration options.\n     *\n     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n     * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n     * @property {number} iterations The number of iterations to perform. Default: 1\n     */\n\n    _this.cfg = Object.assign(new Base(), {\n      keySize: 128 / 32,\n      hasher: MD5Algo,\n      iterations: 1\n    }, cfg);\n    return _this;\n  }\n  /**\n   * Derives a key from a password.\n   *\n   * @param {WordArray|string} password The password.\n   * @param {WordArray|string} salt A salt.\n   *\n   * @return {WordArray} The derived key.\n   *\n   * @example\n   *\n   *     const key = kdf.compute(password, salt);\n   */\n\n\n  _createClass(EvpKDFAlgo, [{\n    key: \"compute\",\n    value: function compute(password, salt) {\n      var block; // Shortcut\n\n      var cfg = this.cfg; // Init hasher\n\n      var hasher = cfg.hasher.create(); // Initial values\n\n      var derivedKey = WordArray.create(); // Shortcuts\n\n      var derivedKeyWords = derivedKey.words;\n      var keySize = cfg.keySize,\n          iterations = cfg.iterations; // Generate key\n\n      while (derivedKeyWords.length < keySize) {\n        if (block) {\n          hasher.update(block);\n        }\n\n        block = hasher.update(password).finalize(salt);\n        hasher.reset(); // Iterations\n\n        for (var i = 1; i < iterations; i += 1) {\n          block = hasher.finalize(block);\n          hasher.reset();\n        }\n\n        derivedKey.concat(block);\n      }\n\n      derivedKey.sigBytes = keySize * 4;\n      return derivedKey;\n    }\n  }]);\n\n  return EvpKDFAlgo;\n}(Base);\n/**\n * Derives a key from a password.\n *\n * @param {WordArray|string} password The password.\n * @param {WordArray|string} salt A salt.\n * @param {Object} cfg (Optional) The configuration options to use for this computation.\n *\n * @return {WordArray} The derived key.\n *\n * @static\n *\n * @example\n *\n *     var key = CryptoJS.EvpKDF(password, salt);\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n */\n\nexport var EvpKDF = function EvpKDF(password, salt, cfg) {\n  return EvpKDFAlgo.create(cfg).compute(password, salt);\n};","map":null,"metadata":{},"sourceType":"module"}