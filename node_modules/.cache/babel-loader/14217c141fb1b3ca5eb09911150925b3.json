{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { toCashAddress, isMainnetAddress, isTestnetAddress, isValidAddress } from \"bchaddrjs\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-cash\";\nimport base58 from \"bs58\";\nimport { BitcoinDotCom } from \"./APIs/bitcoinDotCom\";\nimport { Blockchair, BlockchairNetwork } from \"./APIs/blockchair\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { decodeBitcoinCashAddress } from \"./bchaddrjs\";\nexport var BitcoinCashClass =\n/*#__PURE__*/\nfunction (_BitcoinClass) {\n  _inherits(BitcoinCashClass, _BitcoinClass);\n\n  function BitcoinCashClass() {\n    var _this;\n\n    _classCallCheck(this, BitcoinCashClass);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BitcoinCashClass).apply(this, arguments));\n    _this.chain = BitcoinCashClass.chain;\n    _this.name = BitcoinCashClass.chain;\n    _this.legacyName = \"Bch\"; // APIs\n\n    _this.withDefaultAPIs = function (network) {\n      switch (network) {\n        case \"mainnet\":\n          // prettier-ignore\n          return _this.withAPI(BitcoinDotCom()).withAPI(Blockchair(BlockchairNetwork.BITCOIN_CASH));\n\n        case \"testnet\":\n          // prettier-ignore\n          return _this.withAPI(BitcoinDotCom({\n            testnet: true\n          }));\n\n        case \"regtest\":\n          throw new Error(\"Regtest is currently not supported.\");\n      }\n    };\n\n    _this.asset = \"BCH\";\n    _this.utils = utilsWithChainNetwork(BitcoinCashClass.utils, function () {\n      return _this.chainNetwork;\n    });\n    /**\n     * See [[LockChain.addressStringToBytes]].\n     */\n\n    _this.addressStringToBytes = function (address) {\n      return decodeBitcoinCashAddress(address);\n    };\n\n    return _this;\n  }\n\n  return BitcoinCashClass;\n}(BitcoinClass);\nBitcoinCashClass.chain = \"BitcoinCash\";\nBitcoinCashClass.asset = \"BCH\";\nBitcoinCashClass.utils = {\n  resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n  p2shPrefix: {\n    mainnet: Buffer.from([0x05]),\n    testnet: Buffer.from([0xc4])\n  },\n  createAddress: createAddress(function (bytes) {\n    return toCashAddress(base58.encode(bytes));\n  }, Networks, Opcode, Script),\n  calculatePubKeyScript: pubKeyScript(Networks, Opcode, Script),\n  addressIsValid: function addressIsValid(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    var btcNetwork = BitcoinCash.utils.resolveChainNetwork(network);\n    return isValidAddress(address) && (btcNetwork === \"mainnet\" ? isMainnetAddress(address) : btcNetwork === \"testnet\" ? isTestnetAddress(address) : true);\n  },\n  addressExplorerLink: function addressExplorerLink(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n\n    switch (BitcoinCash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return \"https://explorer.bitcoin.com/bch/address/\".concat(address);\n\n      case \"testnet\":\n        return \"https://explorer.bitcoin.com/tbch/address/\".concat(address);\n\n      case \"regtest\":\n        return undefined;\n    }\n  },\n  transactionExplorerLink: function transactionExplorerLink(tx) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    var txHash = typeof tx === \"string\" ? tx : tx.txHash;\n\n    switch (BitcoinCash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return \"https://explorer.bitcoin.com/bch/tx/\".concat(txHash);\n\n      case \"testnet\":\n        return \"https://explorer.bitcoin.com/tbch/tx/\".concat(txHash);\n\n      case \"regtest\":\n        return undefined;\n    }\n  }\n};\nexport var BitcoinCash = Callable(BitcoinCashClass);\nvar _ = BitcoinCash;","map":null,"metadata":{},"sourceType":"module"}