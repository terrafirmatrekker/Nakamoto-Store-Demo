{"ast":null,"code":"import { WordArray } from './core.js';\n\nvar swapEndian = function swapEndian(word) {\n  return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;\n};\n/**\n * UTF-16 BE encoding strategy.\n */\n\n\nexport var Utf16BE = {\n  /**\n   * Converts a word array to a UTF-16 BE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 BE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var utf16Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 2) {\n      var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 BE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 BE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n   */\n  parse: function parse(utf16Str) {\n    // Shortcut\n    var utf16StrLength = utf16Str.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n};\nexport var Utf16 = Utf16BE;\n/**\n * UTF-16 LE encoding strategy.\n */\n\nexport var Utf16LE = {\n  /**\n   * Converts a word array to a UTF-16 LE string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-16 LE string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n   */\n  stringify: function stringify(wordArray) {\n    // Shortcuts\n    var words = wordArray.words,\n        sigBytes = wordArray.sigBytes; // Convert\n\n    var utf16Chars = [];\n\n    for (var i = 0; i < sigBytes; i += 2) {\n      var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);\n      utf16Chars.push(String.fromCharCode(codePoint));\n    }\n\n    return utf16Chars.join('');\n  },\n\n  /**\n   * Converts a UTF-16 LE string to a word array.\n   *\n   * @param {string} utf16Str The UTF-16 LE string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     const wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n   */\n  parse: function parse(utf16Str) {\n    // Shortcut\n    var utf16StrLength = utf16Str.length; // Convert\n\n    var words = [];\n\n    for (var i = 0; i < utf16StrLength; i += 1) {\n      words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);\n    }\n\n    return WordArray.create(words, utf16StrLength * 2);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}