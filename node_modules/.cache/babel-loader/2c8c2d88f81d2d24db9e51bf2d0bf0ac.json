{"ast":null,"code":"var _classCallCheck = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar typeforce = require('typeforce');\n\nvar types = require('../../types');\n\nvar version = require('./version');\n\nvar _require = require('../../bufferutils'),\n    BufferReader = _require.BufferReader,\n    BufferWriter = _require.BufferWriter;\n\nvar NUM_JOINSPLITS_INPUTS = 2;\nvar NUM_JOINSPLITS_OUTPUTS = 2;\nvar NOTECIPHERTEXT_SIZE = 1 + 8 + 32 + 32 + 512 + 16;\nvar G1_PREFIX_MASK = 0x02;\nvar G2_PREFIX_MASK = 0x0a;\n\nvar ZcashBufferReader =\n/*#__PURE__*/\nfunction (_BufferReader) {\n  \"use strict\";\n\n  _inherits(ZcashBufferReader, _BufferReader);\n\n  function ZcashBufferReader(buffer, offset, txVersion) {\n    var _this;\n\n    _classCallCheck(this, ZcashBufferReader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ZcashBufferReader).call(this, buffer, offset));\n    typeforce(types.maybe(types.Int32), txVersion);\n    _this.txVersion = txVersion;\n    return _this;\n  }\n\n  _createClass(ZcashBufferReader, [{\n    key: \"readInt64\",\n    value: function readInt64() {\n      var a = this.buffer.readUInt32LE(this.offset);\n      var b = this.buffer.readInt32LE(this.offset + 4);\n      b *= 0x100000000;\n      this.offset += 8;\n      return b + a;\n    }\n  }, {\n    key: \"readCompressedG1\",\n    value: function readCompressedG1() {\n      var yLsb = this.readUInt8() & 1;\n      var x = this.readSlice(32);\n      return {\n        x: x,\n        yLsb: yLsb\n      };\n    }\n  }, {\n    key: \"readCompressedG2\",\n    value: function readCompressedG2() {\n      var yLsb = this.readUInt8() & 1;\n      var x = this.readSlice(64);\n      return {\n        x: x,\n        yLsb: yLsb\n      };\n    }\n  }, {\n    key: \"readZKProof\",\n    value: function readZKProof() {\n      var zkproof;\n\n      if (this.txVersion >= version.SAPLING) {\n        zkproof = {\n          sA: this.readSlice(48),\n          sB: this.readSlice(96),\n          sC: this.readSlice(48)\n        };\n      } else {\n        zkproof = {\n          gA: this.readCompressedG1(),\n          gAPrime: this.readCompressedG1(),\n          gB: this.readCompressedG2(),\n          gBPrime: this.readCompressedG1(),\n          gC: this.readCompressedG1(),\n          gCPrime: this.readCompressedG1(),\n          gK: this.readCompressedG1(),\n          gH: this.readCompressedG1()\n        };\n      }\n\n      return zkproof;\n    }\n  }, {\n    key: \"readJoinSplit\",\n    value: function readJoinSplit() {\n      var vpubOld = this.readUInt64();\n      var vpubNew = this.readUInt64();\n      var anchor = this.readSlice(32);\n      var nullifiers = [];\n\n      for (var j = 0; j < NUM_JOINSPLITS_INPUTS; j++) {\n        nullifiers.push(this.readSlice(32));\n      }\n\n      var commitments = [];\n\n      for (j = 0; j < NUM_JOINSPLITS_OUTPUTS; j++) {\n        commitments.push(this.readSlice(32));\n      }\n\n      var ephemeralKey = this.readSlice(32);\n      var randomSeed = this.readSlice(32);\n      var macs = [];\n\n      for (j = 0; j < NUM_JOINSPLITS_INPUTS; j++) {\n        macs.push(this.readSlice(32));\n      }\n\n      var zkproof = this.readZKProof();\n      var ciphertexts = [];\n\n      for (j = 0; j < NUM_JOINSPLITS_OUTPUTS; j++) {\n        ciphertexts.push(this.readSlice(NOTECIPHERTEXT_SIZE));\n      }\n\n      return {\n        vpubOld: vpubOld,\n        vpubNew: vpubNew,\n        anchor: anchor,\n        nullifiers: nullifiers,\n        commitments: commitments,\n        ephemeralKey: ephemeralKey,\n        randomSeed: randomSeed,\n        macs: macs,\n        zkproof: zkproof,\n        ciphertexts: ciphertexts\n      };\n    }\n  }, {\n    key: \"readShieldedSpend\",\n    value: function readShieldedSpend() {\n      var cv = this.readSlice(32);\n      var anchor = this.readSlice(32);\n      var nullifier = this.readSlice(32);\n      var rk = this.readSlice(32);\n      var zkproof = this.readZKProof();\n      var spendAuthSig = this.readSlice(64);\n      return {\n        cv: cv,\n        anchor: anchor,\n        nullifier: nullifier,\n        rk: rk,\n        zkproof: zkproof,\n        spendAuthSig: spendAuthSig\n      };\n    }\n  }, {\n    key: \"readShieldedOutput\",\n    value: function readShieldedOutput() {\n      var cv = this.readSlice(32);\n      var cmu = this.readSlice(32);\n      var ephemeralKey = this.readSlice(32);\n      var encCiphertext = this.readSlice(580);\n      var outCiphertext = this.readSlice(80);\n      var zkproof = this.readZKProof();\n      return {\n        cv: cv,\n        cmu: cmu,\n        ephemeralKey: ephemeralKey,\n        encCiphertext: encCiphertext,\n        outCiphertext: outCiphertext,\n        zkproof: zkproof\n      };\n    }\n  }]);\n\n  return ZcashBufferReader;\n}(BufferReader);\n\nvar ZcashBufferWriter =\n/*#__PURE__*/\nfunction (_BufferWriter) {\n  \"use strict\";\n\n  _inherits(ZcashBufferWriter, _BufferWriter);\n\n  function ZcashBufferWriter() {\n    _classCallCheck(this, ZcashBufferWriter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ZcashBufferWriter).apply(this, arguments));\n  }\n\n  _createClass(ZcashBufferWriter, [{\n    key: \"writeCompressedG1\",\n    value: function writeCompressedG1(i) {\n      this.writeUInt8(G1_PREFIX_MASK | i.yLsb);\n      this.writeSlice(i.x);\n    }\n  }, {\n    key: \"writeCompressedG2\",\n    value: function writeCompressedG2(i) {\n      this.writeUInt8(G2_PREFIX_MASK | i.yLsb);\n      this.writeSlice(i.x);\n    }\n  }]);\n\n  return ZcashBufferWriter;\n}(BufferWriter);\n\nmodule.exports = {\n  ZcashBufferReader: ZcashBufferReader,\n  ZcashBufferWriter: ZcashBufferWriter\n};","map":null,"metadata":{},"sourceType":"script"}