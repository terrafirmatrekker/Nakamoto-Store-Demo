{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { Networks, Opcode, Script } from \"bitcore-lib-zcash\";\nimport base58 from \"bs58\";\nimport { Insight } from \"./APIs/insight\";\nimport { SoChain, SoChainNetwork } from \"./APIs/sochain\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { validateAddress } from \"./utils\";\nvar InsightEndpoints;\n\n(function (InsightEndpoints) {\n  // Testnet\n  InsightEndpoints[\"TestnetZCash\"] = \"https://explorer.testnet.z.cash/api/\"; // Mainnet\n\n  InsightEndpoints[\"ZCash\"] = \"https://explorer.z.cash/api/\";\n  InsightEndpoints[\"ZecBlockExplorer\"] = \"https://zecblockexplorer.com/api/\";\n  InsightEndpoints[\"ZecChain\"] = \"https://zechain.net/api/v1/\";\n  InsightEndpoints[\"BlockExplorer\"] = \"https://zcash.blockexplorer.com/api/\";\n})(InsightEndpoints || (InsightEndpoints = {}));\n\nexport var ZcashClass =\n/*#__PURE__*/\nfunction (_BitcoinClass) {\n  _inherits(ZcashClass, _BitcoinClass);\n\n  function ZcashClass() {\n    var _this;\n\n    _classCallCheck(this, ZcashClass);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ZcashClass).apply(this, arguments));\n    _this.chain = ZcashClass.chain;\n    _this.name = ZcashClass.chain;\n    _this.legacyName = \"Zec\";\n\n    _this.withDefaultAPIs = function (network) {\n      switch (network) {\n        case \"mainnet\":\n          // prettier-ignore\n          return _this.withAPI(Insight(InsightEndpoints.ZCash)).withAPI(Insight(InsightEndpoints.ZecBlockExplorer)).withAPI(Insight(InsightEndpoints.ZecChain)).withAPI(Insight(InsightEndpoints.BlockExplorer)).withAPI(SoChain(SoChainNetwork.ZEC), {\n            priority: 15\n          });\n\n        case \"testnet\":\n          // prettier-ignore\n          return _this.withAPI(Insight(InsightEndpoints.TestnetZCash)).withAPI(SoChain(SoChainNetwork.ZECTEST), {\n            priority: 15\n          });\n\n        case \"regtest\":\n          throw new Error(\"Regtest is currently not supported.\");\n      }\n    };\n\n    _this.asset = \"ZEC\";\n    _this.utils = utilsWithChainNetwork(Zcash.utils, function () {\n      return _this.chainNetwork;\n    });\n    return _this;\n  }\n\n  return ZcashClass;\n}(BitcoinClass);\nZcashClass.chain = \"Zcash\";\nZcashClass.asset = \"ZEC\";\nZcashClass.utils = {\n  resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n  p2shPrefix: {\n    mainnet: Buffer.from([0x1c, 0xbd]),\n    testnet: Buffer.from([0x1c, 0xba])\n  },\n  createAddress: createAddress(base58.encode, Networks, Opcode, Script),\n  calculatePubKeyScript: pubKeyScript(Networks, Opcode, Script),\n  addressIsValid: function addressIsValid(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    return validateAddress(address, ZcashClass.asset, Zcash.utils.resolveChainNetwork(network));\n  },\n  addressExplorerLink: function addressExplorerLink(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n\n    switch (Zcash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return \"https://sochain.com/address/ZEC/\".concat(address, \"/\");\n\n      case \"testnet\":\n        return \"https://sochain.com/address/ZECTEST/\".concat(address, \"/\");\n\n      case \"regtest\":\n        return undefined;\n    }\n  },\n  transactionExplorerLink: function transactionExplorerLink(tx) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    var txHash = typeof tx === \"string\" ? tx : tx.txHash;\n\n    switch (Zcash.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return \"https://sochain.com/tx/ZEC/\".concat(txHash, \"/\");\n\n      case \"testnet\":\n        return \"https://sochain.com/tx/ZECTEST/\".concat(txHash, \"/\");\n\n      case \"regtest\":\n        return undefined;\n    }\n  }\n};\nexport var Zcash = Callable(ZcashClass);\nvar _ = Zcash;","map":null,"metadata":{},"sourceType":"module"}