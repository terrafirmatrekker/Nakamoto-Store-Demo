{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/tejas/Desktop/marketplace/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Blockchair = exports.broadcastTransaction = void 0;\n\nvar axios_1 = __importDefault(require(\"axios\"));\n\nvar utxo_1 = require(\"../../lib/utxo\");\n\nvar timeout_1 = require(\"./timeout\");\n\nvar fetchUTXO = function fetchUTXO(network) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(txHash, vOut) {\n        var url, response, tx, txBlock, latestBlock, statsUrl, statsResponse, confirmations;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = \"https://api.blockchair.com/\".concat(network, \"/dashboards/transaction/\").concat(txHash);\n                _context.next = 3;\n                return axios_1.default.get(\"\".concat(url), {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 3:\n                response = _context.sent.data;\n\n                if (response.data[txHash]) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Transaction not found.\");\n\n              case 6:\n                tx = response.data[txHash];\n                txBlock = tx.transaction.block_id;\n                latestBlock = response.context.state;\n\n                if (!(latestBlock === 0)) {\n                  _context.next = 15;\n                  break;\n                }\n\n                statsUrl = \"https://api.blockchair.com/\".concat(network, \"/stats\");\n                _context.next = 13;\n                return axios_1.default.get(statsUrl);\n\n              case 13:\n                statsResponse = _context.sent.data;\n                latestBlock = statsResponse.data.blocks - 1;\n\n              case 15:\n                confirmations = txBlock === -1 ? 0 : Math.max(latestBlock - txBlock + 1, 0);\n                return _context.abrupt(\"return\", {\n                  txHash: txHash,\n                  vOut: vOut,\n                  amount: tx.outputs[vOut].value,\n                  confirmations: confirmations\n                });\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar fetchConfirmations = function fetchConfirmations(network) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(txHash) {\n        var url, response, txBlock, latestBlock, statsUrl, statsResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                url = \"https://api.blockchair.com/\".concat(network, \"/dashboards/transaction/\").concat(txHash);\n                _context2.next = 3;\n                return axios_1.default.get(\"\".concat(url), {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 3:\n                response = _context2.sent.data;\n\n                if (response.data[txHash]) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Transaction not found.\");\n\n              case 6:\n                txBlock = response.data[txHash].transaction.block_id;\n                latestBlock = response.context.state;\n\n                if (!(latestBlock === 0)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                statsUrl = \"https://api.blockchair.com/\".concat(network, \"/stats\");\n                _context2.next = 12;\n                return axios_1.default.get(statsUrl);\n\n              case 12:\n                statsResponse = _context2.sent.data;\n                latestBlock = statsResponse.data.blocks - 1;\n\n              case 14:\n                return _context2.abrupt(\"return\", txBlock === -1 ? 0 : Math.max(latestBlock - txBlock + 1, 0));\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar fetchUTXOs = function fetchUTXOs(network) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(address, confirmations) {\n        var url, response, latestBlock, statsUrl, statsResponse;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = \"https://api.blockchair.com/\".concat(network, \"/dashboards/address/\").concat(address, \"?limit=0,100\");\n                _context3.next = 3;\n                return axios_1.default.get(url, {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 3:\n                response = _context3.sent.data;\n                latestBlock = response.context.state;\n\n                if (!(latestBlock === 0)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                statsUrl = \"https://api.blockchair.com/\".concat(network, \"/stats\");\n                _context3.next = 9;\n                return axios_1.default.get(statsUrl);\n\n              case 9:\n                statsResponse = _context3.sent.data;\n                latestBlock = statsResponse.data.blocks - 1;\n\n              case 11:\n                return _context3.abrupt(\"return\", response.data[address].utxo.map(function (utxo) {\n                  return {\n                    txHash: utxo.transaction_hash,\n                    amount: utxo.value,\n                    vOut: utxo.index,\n                    confirmations: utxo.block_id === -1 ? 0 : latestBlock - utxo.block_id + 1\n                  };\n                }).filter(function (utxo) {\n                  return confirmations === 0 || utxo.confirmations >= confirmations;\n                }).sort(utxo_1.sortUTXOs));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexports.broadcastTransaction = function (network) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(txHex) {\n        var url, response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                url = \"https://api.blockchair.com/\".concat(network, \"/push/transaction\");\n                _context4.next = 3;\n                return axios_1.default.post(url, {\n                  data: txHex\n                }, {\n                  timeout: timeout_1.DEFAULT_TIMEOUT\n                });\n\n              case 3:\n                response = _context4.sent;\n\n                if (!response.data.error) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(response.data.error);\n\n              case 6:\n                return _context4.abrupt(\"return\", response.data.data.transaction_hash);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x6) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar Networks;\n\n(function (Networks) {\n  Networks[\"BITCOIN\"] = \"bitcoin\";\n  Networks[\"BITCOIN_CASH\"] = \"bitcoin-cash\";\n  Networks[\"LITECOIN\"] = \"litecoin\";\n  Networks[\"BITCOIN_SV\"] = \"bitcoin-sv\";\n  Networks[\"DOGECOIN\"] = \"dogecoin\";\n  Networks[\"DASH\"] = \"dash\";\n  Networks[\"GROESTLCOIN\"] = \"groestlcoin\";\n  Networks[\"BITCOIN_TESTNET\"] = \"bitcoin/testnet\";\n})(Networks || (Networks = {}));\n\nexports.Blockchair = {\n  networks: Networks,\n  fetchUTXO: fetchUTXO,\n  fetchUTXOs: fetchUTXOs,\n  fetchConfirmations: fetchConfirmations,\n  broadcastTransaction: exports.broadcastTransaction\n};","map":null,"metadata":{},"sourceType":"script"}