{"ast":null,"code":"import _regeneratorRuntime from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { Callable, Ox } from \"@renproject/utils\";\nimport BigNumber from \"bignumber.js\";\nimport { EthereumBaseChain } from \"./base\";\nexport var EthereumClass =\n/*#__PURE__*/\nfunction (_EthereumBaseChain) {\n  _inherits(EthereumClass, _EthereumBaseChain);\n\n  function EthereumClass(web3Provider, renNetwork) {\n    var _this;\n\n    _classCallCheck(this, EthereumClass);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EthereumClass).call(this, web3Provider, renNetwork));\n\n    _this.getMintParams = function (asset) {\n      return _this._getParams ? _this._getParams(asset) : undefined;\n    };\n\n    _this.getBurnParams = function (asset, burnPayload) {\n      return _this._getParams ? _this._getParams(asset, burnPayload) : undefined;\n    };\n    /** @category Main */\n\n\n    _this.Address = function (address, txConfig) {\n      return _this.Account({\n        address: address\n      }, txConfig);\n    };\n    /** @category Main */\n\n\n    _this.Account = function (_ref, txConfig) {\n      var value = _ref.value,\n          address = _ref.address;\n\n      _this._getParams =\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(asset, burnPayload) {\n          var addressToBuffer, gateway;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(!_this.renNetworkDetails || !_this.web3)) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  throw new Error(\"Ethereum must be initialized before calling 'getContractCalls'.\");\n\n                case 2:\n                  if (value) {\n                    _context.next = 12;\n                    break;\n                  }\n\n                  if (address) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  throw new Error(\"Must provide Ethereum recipient address.\");\n\n                case 5:\n                  if (!/.*\\.ens/.exec(address)) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  _context.next = 8;\n                  return _this.web3.eth.ens.getAddress(address);\n\n                case 8:\n                  address = _context.sent;\n\n                case 9:\n                  return _context.abrupt(\"return\", {\n                    contractCalls: [{\n                      sendTo: _this.renNetworkDetails.addresses.BasicAdapter,\n                      contractFn: \"mint\",\n                      contractParams: [{\n                        type: \"string\",\n                        name: \"_symbol\",\n                        value: asset\n                      }, {\n                        type: \"address\",\n                        name: \"_address\",\n                        value: address\n                      }],\n                      txConfig: txConfig\n                    }]\n                  });\n\n                case 12:\n                  if (value) {\n                    _context.next = 14;\n                    break;\n                  }\n\n                  throw new Error(\"Send amount must be provided in order to send directly to an address.\");\n\n                case 14:\n                  if (burnPayload) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  throw new Error(\"Must provide burn recipient address\");\n\n                case 16:\n                  addressToBuffer = Buffer.from(burnPayload);\n                  _context.next = 19;\n                  return _this.getGatewayContractAddress(asset);\n\n                case 19:\n                  gateway = _context.sent;\n                  return _context.abrupt(\"return\", {\n                    contractCalls: [{\n                      sendTo: gateway,\n                      contractFn: \"burn\",\n                      contractParams: [{\n                        type: \"bytes\",\n                        name: \"_to\",\n                        value: Ox(addressToBuffer)\n                      }, {\n                        type: \"uint256\",\n                        name: \"_amount\",\n                        value: new BigNumber(value).toFixed()\n                      }],\n                      txConfig: txConfig\n                    }]\n                  });\n\n                case 21:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      return _assertThisInitialized(_assertThisInitialized(_this));\n    };\n    /** @category Main */\n\n\n    _this.Contract = function (contractCall) {\n      _this._getParams = function (asset, burnPayload) {\n        if (!_this.renNetworkDetails) {\n          throw new Error(\"Ethereum must be initialized before calling 'getContractCalls'\");\n        }\n\n        if (typeof contractCall === \"function\") {\n          if (!burnPayload) {\n            throw new Error(\"Must provide burn payload\");\n          }\n\n          var addressToBuffer = Buffer.from(burnPayload);\n          return {\n            contractCalls: [contractCall(Ox(addressToBuffer), asset)]\n          };\n        } else {\n          return {\n            contractCalls: [contractCall]\n          };\n        }\n      };\n\n      return _assertThisInitialized(_assertThisInitialized(_this));\n    };\n    /** @category Main */\n\n\n    _this.Transaction = function (transaction) {\n      _this._getParams = function (_asset, _burnPayload) {\n        return {\n          transaction: transaction\n        };\n      };\n\n      return _assertThisInitialized(_assertThisInitialized(_this));\n    };\n    /** @category Main */\n\n\n    _this.BurnNonce = function (burnNonce) {\n      _this._getParams = function (_asset, _burnPayload) {\n        return {\n          burnNonce: burnNonce\n        };\n      };\n\n      return _assertThisInitialized(_assertThisInitialized(_this));\n    };\n\n    _this.toWei = function (value) {\n      return new BigNumber(value).times(new BigNumber(10).exponentiatedBy(18)).decimalPlaces(0).toFixed();\n    };\n\n    _this.fromWei = function (value) {\n      return new BigNumber(value).dividedBy(new BigNumber(10).exponentiatedBy(18)).toFixed();\n    };\n\n    return _this;\n  }\n\n  return EthereumClass;\n}(EthereumBaseChain); // @dev Removes any static fields, except `utils`.\n\nexport var Ethereum = Callable(EthereumClass);","map":null,"metadata":{},"sourceType":"module"}