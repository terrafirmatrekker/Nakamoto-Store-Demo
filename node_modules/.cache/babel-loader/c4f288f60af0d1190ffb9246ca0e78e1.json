{"ast":null,"code":"import _classCallCheck from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tejas/Desktop/marketplace2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Callable, utilsWithChainNetwork } from \"@renproject/utils\";\nimport { Networks, Opcode, Script } from \"@CoinSpace/bitcore-lib-dogecoin\";\nimport base58 from \"bs58\";\nimport { Blockchair, BlockchairNetwork } from \"./APIs/blockchair\";\nimport { SoChain, SoChainNetwork } from \"./APIs/sochain\";\nimport { BitcoinClass } from \"./bitcoin\";\nimport { createAddress, pubKeyScript } from \"./script\";\nimport { validateAddress } from \"./utils\";\nexport var DogecoinClass =\n/*#__PURE__*/\nfunction (_BitcoinClass) {\n  _inherits(DogecoinClass, _BitcoinClass);\n\n  function DogecoinClass() {\n    var _this;\n\n    _classCallCheck(this, DogecoinClass);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DogecoinClass).apply(this, arguments));\n    _this.chain = DogecoinClass.chain;\n    _this.name = DogecoinClass.chain;\n    _this.legacyName = undefined; // APIs\n\n    _this.withDefaultAPIs = function (network) {\n      switch (network) {\n        case \"mainnet\":\n          // prettier-ignore\n          return _this.withAPI(Blockchair(BlockchairNetwork.DOGECOIN)).withAPI(SoChain(SoChainNetwork.DOGE), {\n            priority: 15\n          });\n\n        case \"testnet\":\n          // prettier-ignore\n          return _this.withAPI(SoChain(SoChainNetwork.DOGETEST), {\n            priority: 15\n          });\n\n        case \"regtest\":\n          throw new Error(\"Regtest is currently not supported.\");\n      }\n    };\n\n    _this.asset = \"DOGE\";\n    _this.utils = utilsWithChainNetwork(DogecoinClass.utils, function () {\n      return _this.chainNetwork;\n    });\n    return _this;\n  }\n\n  return DogecoinClass;\n}(BitcoinClass);\nDogecoinClass.chain = \"Dogecoin\";\nDogecoinClass.asset = \"DOGE\";\nDogecoinClass.utils = {\n  resolveChainNetwork: BitcoinClass.utils.resolveChainNetwork,\n  p2shPrefix: {\n    mainnet: Buffer.from([0x16]),\n    testnet: Buffer.from([0xc4])\n  },\n  createAddress: createAddress(base58.encode, Networks, Opcode, Script),\n  calculatePubKeyScript: pubKeyScript(Networks, Opcode, Script),\n  addressIsValid: function addressIsValid(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    return validateAddress(address, DogecoinClass.asset, Dogecoin.utils.resolveChainNetwork(network));\n  },\n  addressExplorerLink: function addressExplorerLink(address) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n\n    switch (Dogecoin.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return \"https://sochain.com/address/DOGE/\".concat(address, \"/\");\n\n      case \"testnet\":\n        return \"https://sochain.com/address/DOGETEST/\".concat(address, \"/\");\n\n      case \"regtest\":\n        return undefined;\n    }\n  },\n  transactionExplorerLink: function transactionExplorerLink(tx) {\n    var network = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"mainnet\";\n    var txHash = typeof tx === \"string\" ? tx : tx.txHash;\n\n    switch (Dogecoin.utils.resolveChainNetwork(network)) {\n      case \"mainnet\":\n        return \"https://sochain.com/tx/DOGE/\".concat(txHash, \"/\");\n\n      case \"testnet\":\n        return \"https://sochain.com/tx/DOGETEST/\".concat(txHash, \"/\");\n\n      case \"regtest\":\n        return undefined;\n    }\n  }\n};\nexport var Dogecoin = Callable(DogecoinClass);\nvar _ = Dogecoin;","map":null,"metadata":{},"sourceType":"module"}